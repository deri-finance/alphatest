{"version":3,"sources":["components/Input/Input.js","pages/Bridge/Operate.js","pages/Bridge/img/arrow-left.svg","pages/Bridge/Bridge.js"],"names":["Wrapper","styled","div","props","inputWidth","unitPadding","Input","value","unit","max","step","onChange","styles","focus","readOnly","className","inputRef","useRef","useEffect","current","style","type","min","ref","e","target","bg","gt","isNaN","Operate","lang","amount","wallet","initialize","toLowerCase","from_network","to_network","Button","PRIMARY","label","fontSize","isNetwork","chainId","obj","netWork","img","ETH","BSC","HECO","inject","observer","useState","setAmount","balance","setBalance","isdev","DeriEnv","get","netWork_text","text","id","fromList","setFromList","toList","setToList","setSending","from_chainId","to_chainId","setInitialize","isClaim","dropdownList_from","setDropdownList_from","dropdownList_to","setDropdownList_to","From_img","setFrom_img","To_img","setTo_img","selectListClassFrom","classNames","selectListClassTo","isFromConnected","isToConnected","isWalletConnected","setIsWalletConnected","showListFrom","showListTo","getValid","a","isConnected","apiProxy","request","res","valid","fromChainId","toChainId","getBalance","detail","account","select_from","Init","JSON","parse","stringify","select_to","to_arr","from_one","filter","p","from_two","from_three","src","alt","down","onClick","arrow","deriLogo","state","console","log","rel","href"],"mappings":"yMAIMA,EAAUC,IAAOC,IAAV,+bAYD,SAAAC,GAAK,OAAIA,EAAMC,cAUT,SAAAD,GAAK,OAAIA,EAAME,eAGlB,SAASC,EAAT,GAA4H,IAA5GC,EAA2G,EAA3GA,MAAMC,EAAqG,EAArGA,KAAKC,EAAgG,EAAhGA,IAAIC,EAA4F,EAA5FA,KAAKC,EAAuF,EAAvFA,SAAuF,IAA9EC,cAA8E,MAArE,GAAqE,EAAlEC,EAAkE,EAAlEA,MAAkE,IAA5DR,mBAA4D,MAA9C,OAA8C,EAAvCS,EAAuC,EAAvCA,SAAuC,IAA9BV,kBAA8B,MAAjB,MAAiB,EAAXW,EAAW,EAAXA,UACvHC,EAAWC,iBAAO,MAmBxB,OAPAC,qBAAU,WACLF,EAASG,SAAWN,GACrBG,EAASG,QAAQN,UAEnB,CAACA,IAID,eAACb,EAAD,CAAUK,YAAaA,EAAaD,WAAYA,EAAYW,UAAWA,EAAWK,MAAK,eAAMR,GAA7F,UACE,uBAAOS,KAAK,SAASd,MAAOA,EAAOE,IAAKA,EAAMa,IAAI,IAAKZ,KAAQA,EAAMa,IAAKP,EAAUL,SApBzE,SAAAa,GAAM,IACZjB,EAASiB,EAAEC,OAAXlB,MACJE,GAAOiB,aAAGnB,GAAOoB,GAAGlB,GACrBE,GAAYA,EAASF,GACbF,GAAQ,GAAKqB,MAAMrB,GAC3BI,GAAYA,EAAS,IAErBA,GAAYA,EAASJ,IAaiFO,SAAUA,IAChH,qBAAKC,UAAU,OAAf,SAAuBP,S,kKChDd,SAASqB,EAAT,GAAkE,IAA/CC,EAA8C,EAA9CA,KAAcC,GAAgC,EAAxCC,OAAwC,EAAhCD,QAAQE,EAAwB,EAAxBA,WAAwB,EAAZtB,SAElE,OACE,sBAAKI,UAAU,UAAf,UACE,sBAAKA,UAAU,gBAAf,UACGe,EAAI,OADP,IACoBC,EADpB,IAC6BD,EAAI,KAASI,cAD1C,SAC+DD,EAAWE,aAD1E,IACyFL,EAAI,GAAOI,cADpG,IACoHD,EAAWG,cAE/H,qBAAKrB,UAAU,MAAf,SACE,cAACsB,EAAA,EAAD,CAAQhB,KAAMiB,IAASC,MAAOT,EAAI,KAAUU,SAAS,KAAKzB,UAAU,oBAEtE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,oCAAOe,EAAK,4BAAZ,OACA,oCAAOA,EAAK,8BAAZ,OACA,oCAAOA,EAAK,iBAAZ,UAEF,sBAAKf,UAAU,WAAf,UACE,oCAAOe,EAAK,kBAAZ,OACA,oCAAOA,EAAK,8BAAZ,OACA,oCAAOA,EAAK,iBAAZ,gB,YCvBK,MAA0B,uC,sECqUzC,SAASW,EAAUC,EAASZ,GAE1B,IAAIa,EAAM,GACV,OAFAD,GAAWA,GAGT,KAAK,EACHC,EAAIC,QAAUd,EAAI,SAClBa,EAAID,QAAU,EACdC,EAAIE,IAAMC,UACV,MACF,KAAK,GACHH,EAAIC,QAAUd,EAAI,IAClBa,EAAID,QAAU,GACdC,EAAIE,IAAME,UACV,MACF,KAAK,IACHJ,EAAIC,QAAUd,EAAI,KAClBa,EAAID,QAAU,IACdC,EAAIE,IAAMG,UACV,MACF,KAAK,GACHL,EAAIC,QAAUd,EAAK,eACnBa,EAAID,QAAU,GACdC,EAAIE,IAAME,UACV,MACF,KAAK,EACHJ,EAAIC,QAAUd,EAAI,QAClBa,EAAID,QAAU,EACdC,EAAIE,IAAMC,UACV,MACF,KAAK,IACHH,EAAIC,QAAUd,EAAK,gBACnBa,EAAID,QAAU,IACdC,EAAIE,IAAMG,UAKd,OAAOL,EAEMM,sBAAO,SAAPA,CAAiBC,aA9VhC,YAAmC,IAAjBlB,EAAgB,EAAhBA,OAAQF,EAAQ,EAARA,KAAQ,EACJqB,mBAAS,GADL,mBACzBpB,EADyB,KACjBqB,EADiB,OAEFD,mBAAS,GAFP,mBAEzBE,EAFyB,KAEhBC,EAFgB,KAI1BC,EAA0B,SAAlBC,UAAQC,MAChBC,EAAeH,EACnB,CACE,CACEI,KAAM7B,EAAI,QACV8B,GAAI,EACJf,IAAKC,WAEP,CACEa,KAAM7B,EAAK,eACX8B,GAAI,GACJf,IAAKE,WAEP,CACEY,KAAM7B,EAAK,gBACX8B,GAAI,IACJf,IAAKG,YAGP,CAEA,CACEW,KAAM7B,EAAI,SACV8B,GAAI,EACJf,IAAKC,WAEP,CACEa,KAAM7B,EAAI,IACV8B,GAAI,GACJf,IAAKE,WAEP,CACEY,KAAM7B,EAAI,KACV8B,GAAI,IACJf,IAAKG,YAtCqB,EA2CAG,mBAASO,GA3CT,mBA2CzBG,EA3CyB,KA2CfC,EA3Ce,OA4CJX,mBAASO,GA5CL,mBA4CzBK,EA5CyB,KA4CjBC,EA5CiB,OA6CFb,oBAAS,GA7CP,mBA6ChBc,GA7CgB,aA8CId,mBAASI,EAC3C,CACEW,aAAc,GACd/B,aAAcL,EAAK,eACnBqC,WAAY,EACZ/B,WAAYN,EAAI,SACd,CACFoC,aAAc,EACd/B,aAAcL,EAAI,SAClBqC,WAAY,GACZ/B,WAAYN,EAAI,MAxDY,mBA8CzBG,EA9CyB,KA8CbmC,EA9Ca,OA0DFjB,oBAAS,GA1DP,mBA0DzBkB,EA1DyB,aA2DkBlB,oBAAS,IA3D3B,mBA2DzBmB,EA3DyB,KA2DNC,EA3DM,OA4DcpB,oBAAS,GA5DvB,mBA4DzBqB,GA5DyB,KA4DRC,GA5DQ,QA6DAtB,mBAASV,EAAUR,EAAWiC,aAAcpC,GAAMe,KA7DlD,qBA6DzB6B,GA7DyB,MA6DfC,GA7De,SA8DJxB,mBAASV,EAAUR,EAAWkC,WAAYrC,GAAMe,KA9D5C,qBA8DzB+B,GA9DyB,MA8DjBC,GA9DiB,MA+D1BC,GAAsBC,IAAW,oBAAqB,CAAE,KAAQT,IAChEU,GAAoBD,IAAW,kBAAmB,CAAE,KAAQP,KAhElC,GAiEkBrB,mBAChD,CACE8B,iBAAiB,EACjBC,eAAe,IApEa,qBAiEzBC,GAjEyB,MAiENC,GAjEM,MAiF1BC,GAAe,WAEnBd,GAAsBD,IAElBgB,GAAa,WACjBb,IAAoBD,KAGhBe,GAAQ,uCAAG,4BAAAC,EAAA,0DACZxD,EAAOyD,cADK,gCAEGC,IAASC,QAAQ,2BAA2B,yBAF/C,QAETC,EAFS,QAGNC,QACLzB,EAAc,CACZF,aAAc0B,EAAIE,YAClB3D,aAAcM,EAAUmD,EAAIE,YAAYhE,GAAMc,QAC9CuB,WAAYyB,EAAIG,UAChB3D,WAAYK,EAAUmD,EAAIG,UAAUjE,GAAMc,UAE5C+B,GAAYlC,EAAUmD,EAAIE,YAAYhE,GAAMe,KAC5CgC,GAAUpC,EAAUmD,EAAIG,UAAUjE,GAAMe,KACxCO,EAAU1B,aAAGkE,EAAI7D,QAAQ,KACzBkC,EAAW2B,EAAIC,QAbJ,2CAAH,qDAkBRG,GAAU,uCAAG,4BAAAR,EAAA,0DACbxD,EAAOyD,cADM,gCAECC,IAASC,QAAQ,iBAAkB,CAAC3D,EAAOiE,OAAOvD,QAASV,EAAOiE,OAAOC,UAF1E,OAEXN,EAFW,OAGftC,EAAWsC,GAHI,2CAAH,qDAOhB1E,qBAAU,WACR8E,OACC,CAAChE,EAAOiE,OAAQhE,IAEnBf,qBAAU,WACRqE,OACA,CAACvD,EAAOiE,SAEV,IAAME,GAAc,SAAAxD,GAClB,IAAIyD,EAAOC,KAAKC,MAAMD,KAAKE,UAAUtE,IACjCmE,EAAKjC,aAAexB,EAAIiB,IAC1BwC,EAAKlC,aAAejC,EAAWkC,WAC/BiC,EAAKjE,aAAeF,EAAWG,WAC/BgE,EAAKjC,WAAalC,EAAWiC,aAC7BkC,EAAKhE,WAAaH,EAAWE,eAE7BiE,EAAKlC,aAAevB,EAAIiB,GACxBwC,EAAKjE,aAAeQ,EAAIgB,MAE1BS,EAAcgC,GACd7B,GAAsBD,IAElBkC,GAAY,SAAA7D,GAChB,IAAIyD,EAAOC,KAAKC,MAAMD,KAAKE,UAAUtE,IACjCmE,EAAKlC,eAAiBvB,EAAIiB,IAC5BwC,EAAKlC,aAAejC,EAAWkC,WAC/BiC,EAAKjE,aAAeF,EAAWG,WAC/BgE,EAAKjC,WAAalC,EAAWiC,aAC7BkC,EAAKhE,WAAaH,EAAWE,eAE7BiE,EAAKjC,WAAaxB,EAAIiB,GACtBwC,EAAKhE,WAAaO,EAAIgB,MAExBS,EAAcgC,GACd3B,IAAoBD,KA+BtB,OAvBAtD,qBAAU,WACR,IACIuF,EACAC,EAAWhD,EAAaiD,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO3B,EAAWiC,gBAAc,GACtE2C,EAAWnD,EAAaiD,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO3B,EAAWiC,gBAAc,GACtE4C,EAAapD,EAAaiD,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO3B,EAAWiC,gBAAc,GAK5EuC,EAAS,CAJI/C,EAAaiD,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO3B,EAAWkC,cAAY,GACzDT,EAAaiD,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO3B,EAAWkC,cAAY,GACvDT,EAAaiD,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAO3B,EAAWkC,cAAY,IAGxEL,EAFW,CAAC4C,EAAUG,EAAUC,IAGhC9C,EAAUyC,GACV9B,GAAYlC,EAAUR,EAAWiC,aAAcpC,GAAMe,KACrDgC,GAAUpC,EAAUR,EAAWkC,WAAYrC,GAAMe,KAnG/B,WAClB,IAAIoC,IAAkBjD,EAAOyD,gBAAkBzD,EAAOiE,OAAOvD,UAAYT,EAAWiC,aAChFgB,IAAgBlD,EAAOyD,gBAAkBzD,EAAOiE,OAAOvD,UAAYT,EAAWkC,WAKlFiB,GAJU,CACRH,gBAAiBA,EACjBC,cAAeA,IA+FjBO,KAEC,CAACxD,IAOF,qBAAKlB,UAAU,SAAf,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,QAAf,SACGe,EAAI,SAEP,qBAAKf,UAAU,aAAf,SACGe,EAAK,mBAGV,sBAAKf,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,uBAAf,SACGe,EAAK,qBAER,sBAAKf,UAAU,yBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,aAAf,SACGe,EAAI,OAEP,sBAAKf,UAAU,qBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKgG,IAAKrC,GAAUsC,IAAI,KACxB,+BAAO/E,EAAWE,eAClB,qBAAKpB,UAAWsD,EAAU,iBAAoBc,GAAkBF,gBAAmC,YAAjB,eAAlF,UACKZ,GAAWc,GAAkBF,gBAAmBnD,EAAI,UAAgBA,EAAI,iBAG/E,qBAAKf,UAAU,YAAYgG,IAAKE,UAAMD,IAAI,GAAGE,QAAS,WAAQ7B,WAEhE,qBAAItE,UAAW+D,GAAf,UACE,qBAAI/D,UAAU,YAAYmG,QAAS,kBAAMf,GAAYtC,EAAS,KAA9D,UACE,sBAAK9C,UAAU,kBAAf,UACE,qBAAKiG,IAAI,GAAGD,IAAKlD,EAAS,GAAGhB,MAD/B,IACuC,qCAAQgB,EAAS,GAAGF,KAApB,UAGvC,qBAAK5C,UAAU,cAAcmG,QAAS,WAAQ7B,MAA9C,SACE,qBAAK2B,IAAI,GAAGD,IAAKE,UAAMlG,UAAU,iBAGrC,oBAAIA,UAAU,YAAYmG,QAAS,kBAAMf,GAAYtC,EAAS,KAA9D,SACE,sBAAK9C,UAAU,kBAAf,UACE,qBAAKiG,IAAI,GAAGD,IAAKlD,EAAS,GAAGhB,MAD/B,IACuC,qCAAQgB,EAAS,GAAGF,KAApB,YAGzC,oBAAI5C,UAAU,YAAYmG,QAAS,kBAAMf,GAAYtC,EAAS,KAA9D,SACE,sBAAK9C,UAAU,kBAAf,UACE,qBAAKiG,IAAI,GAAGD,IAAKlD,EAAS,GAAGhB,MAD/B,IACuC,qCAAQgB,EAAS,GAAGF,KAApB,qBAM/C,qBAAK5C,UAAU,QAAf,SACE,qBAAKgG,IAAKI,EAAOH,IAAI,OAEvB,sBAAKjG,UAAU,aAAf,UACE,qBAAKA,UAAU,WAAf,SACGe,EAAI,KAEP,sBAAKf,UAAU,mBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKgG,IAAKnC,GAAQoC,IAAI,KACtB,+BAAO/E,EAAWG,aAClB,qBAAKrB,UAAYsD,EAA8Bc,GAAkBD,cAAiC,YAAjB,eAAtD,iBAA3B,SACIb,GAAWc,GAAkBD,cAAiBpD,EAAI,UAAgBA,EAAI,iBAG5E,qBAAKf,UAAU,YAAYgG,IAAKE,UAAMD,IAAI,GAAGE,QAAS,WAAQ5B,WAEhE,qBAAIvE,UAAWiE,GAAf,UACE,qBAAIjE,UAAU,YAAYmG,QAAS,kBAAMV,GAAUzC,EAAO,KAA1D,UACE,sBAAKhD,UAAU,kBAAf,UACE,qBAAKiG,IAAI,GAAGD,IAAKhD,EAAO,GAAGlB,MAD7B,IACqC,qCAAQkB,EAAO,GAAGJ,KAAlB,UAErC,qBAAK5C,UAAU,cAAcmG,QAAS,WAAQ5B,MAA9C,SACE,qBAAK0B,IAAI,GAAGD,IAAKE,UAAMlG,UAAU,iBAGrC,oBAAIA,UAAU,YAAYmG,QAAS,kBAAMV,GAAUzC,EAAO,KAA1D,SACE,sBAAKhD,UAAU,kBAAf,UACE,qBAAKiG,IAAI,GAAGD,IAAKhD,EAAO,GAAGlB,MAD7B,IACqC,qCAAQkB,EAAO,GAAGJ,KAAlB,YAGvC,oBAAI5C,UAAU,YAAYmG,QAAS,kBAAMV,GAAUzC,EAAO,KAA1D,SACE,sBAAKhD,UAAU,kBAAf,UACE,qBAAKiG,IAAI,GAAGD,IAAKhD,EAAO,GAAGlB,MAD7B,IACqC,qCAAQkB,EAAO,GAAGJ,KAAlB,2BAQjD,sBAAK5C,UAAU,aAAf,UACE,qBAAKA,UAAU,mBAAf,SACGe,EAAK,gBAER,sBAAKf,UAAU,iBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,cAACT,EAAA,EAAD,CAAOC,MAAOwB,EAAQpB,SA3GlB,SAACJ,GACjB6C,EAAU7C,IA0G6CQ,UAAU,cACrD,iCAAM,qBAAKiG,IAAI,GAAGD,IAAKK,UAAUrG,UAAU,eAA3C,cAEF,sBAAKA,UAAU,aAAf,UACGe,EAAK,gBADR,IAC0BuB,EAD1B,iBAKJ,qBAAKtC,UAAU,sBAAf,SACE,cAACc,EAAD,CAASC,KAAMA,EAAME,OAAQA,EAAQD,OAAQA,EAAQE,WAAYA,EAAYtB,SA3ItE,SAAC0G,GAChBC,QAAQC,IAAIF,QA4IN,qBAAKtG,UAAU,oBAAf,SACE,gCACE,sBAAKA,UAAU,0BAAf,UACGe,EAAK,qBADR,IAC8B,sBAAMf,UAAU,gBAAhB,SAC1B,mBAAGyG,IAAI,aAAa/F,OAAO,SAASgG,KAAK,sCAAzC,0BAGJ,qBAAK1G,UAAU,wBAAf,SACGe,EAAK","file":"static/js/9.703a198d.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { bg } from '../../lib/web3js';\n\nconst Wrapper = styled.div`\ndisplay : flex;\nfont-size : 14px;\nalign-items : center;\nbackground: rgba(85, 119, 253, 0.1);\nborder-radius: 4px;\njustify-content: space-between;\ninput {\n  background: transparent;\n  border-radius: 4px;\n  // min-width: 240px;\n  border: 0;\n  width : ${props => props.inputWidth};\n  height: 56px;\n  color : #E0ECFF;\n  font-size : 18px;\n  padding-left: 16px;\n}\ninput:focus {\n  outline: none;\n}\n.unit {\n  margin-right: ${props => props.unitPadding};\n}\n`\nexport default function Input({value,unit,max,step,onChange,styles = {},focus,unitPadding = '24px',readOnly,inputWidth = '50%',className}){\n  const inputRef = useRef(null);\n  const change = e => {\n    const {value} = e.target\n    if(max && bg(value).gt(max)){    \n      onChange && onChange(max)\n    } else if(value <=0 || isNaN(value)) {\n      onChange && onChange('')\n    } else {\n      onChange && onChange(value)\n    }\n  }\n\n  useEffect(()=>{\n    if(inputRef.current && focus){\n      inputRef.current.focus();\n    }\n  },[focus])\n\n\n  return (\n    <Wrapper  unitPadding={unitPadding} inputWidth={inputWidth} className={className} style={{...styles}}>\n      <input type='number' value={value} max={max}  min='0'  step = {step} ref={inputRef} onChange={change} readOnly={readOnly}/>\n      <div className='unit'>{unit}</div>\n    </Wrapper>    \n  )\n}","import { useState, useEffect } from 'react'\nimport Button from '../../components/Button/Button'\nimport { PRIMARY } from '../../utils/Constants';\nimport useConfig from '../../hooks/useConfig'\nexport default function Operate({ lang, wallet, amount, initialize, onChange }) {\n\n  return (\n    <div className='operate'>\n      <div className='from-to-title'>\n        {lang['bridge']} {amount} {lang['from'].toLowerCase()} DERI {initialize.from_network} {lang['to'].toLowerCase()} {initialize.to_network}\n      </div>\n      <div className='btn'>\n        <Button type={PRIMARY} label={lang['send']} fontSize='18' className='button-bridge' />\n      </div>\n      <div className='hint'>\n        <div className='sending'>\n          <div> {lang['sending-deri-to-wormhole']} </div>\n          <div> {lang['waiting-for-bridge-to-sign']} </div>\n          <div> {lang['bridge-signed']} </div>\n        </div>\n        <div className='cliaming'>\n          <div> {lang['claim-deri-ing']} </div>\n          <div> {lang['waiting-for-bridge-to-sync']} </div>\n          <div> {lang['bridge-signed']} </div>\n        </div>\n      </div>\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/arrow-left.f14b02ac.svg\";","import React, { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react';\nimport { DeriEnv ,bg} from \"../../lib/web3js/index\";\nimport Input from '../../components/Input/Input'\nimport Operate from './Operate'\nimport apiProxy from '../../model/ApiProxy'\nimport arrow from './img/arrow-left.svg'\nimport BSC from '../../assets/img/bsc-logo.svg';\nimport ETH from '../../assets/img/ethereum.svg'\nimport deriLogo from '../../assets/img/logo.svg'\nimport HECO from '../../assets/img/heco.svg'\nimport down from '../../assets/img/arrow-down.svg'\nimport classNames from 'classnames'\nimport './bridge.less'\nfunction Bridge({ wallet, lang }) {\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(0);\n\n  const isdev = DeriEnv.get() !== 'prod' ? true : false;\n  const netWork_text = isdev ?\n    [\n      {\n        text: lang['ropsten'],\n        id: 3,\n        img: ETH,\n      },\n      {\n        text: lang['bsc-testnet'],\n        id: 97,\n        img: BSC,\n      },\n      {\n        text: lang['heco-testnet'],\n        id: 256,\n        img: HECO,\n      }\n    ]\n    : [\n\n      {\n        text: lang['ethereum'],\n        id: 1,\n        img: ETH,\n      },\n      {\n        text: lang['bsc'],\n        id: 56,\n        img: BSC,\n      },\n      {\n        text: lang['heco'],\n        id: 128,\n        img: HECO,\n      }\n\n    ]\n\n  const [fromList, setFromList] = useState(netWork_text)\n  const [toList, setToList] = useState(netWork_text)\n  const [sending, setSending] = useState(false);\n  const [initialize, setInitialize] = useState(isdev ?\n    {\n      from_chainId: 97,\n      from_network: lang['bsc-testnet'],\n      to_chainId: 3,\n      to_network: lang['ropsten']\n    } : {\n      from_chainId: 1,\n      from_network: lang['ethereum'],\n      to_chainId: 56,\n      to_network: lang['bsc']\n    });\n  const [isClaim, setIsClaim] = useState(false);\n  const [dropdownList_from, setDropdownList_from] = useState(false);\n  const [dropdownList_to, setDropdownList_to] = useState(false);\n  const [From_img, setFrom_img] = useState(isNetwork(initialize.from_chainId, lang).img);\n  const [To_img, setTo_img] = useState(isNetwork(initialize.to_chainId, lang).img);\n  const selectListClassFrom = classNames('from-network-list', { 'show': dropdownList_from })\n  const selectListClassTo = classNames('to-network-list', { 'show': dropdownList_to })\n  const [isWalletConnected, setIsWalletConnected] = useState(\n    {\n      isFromConnected: false,\n      isToConnected: false\n    }\n  );\n  const isConnected = () => {\n    let isFromConnected = wallet.isConnected() ? (+wallet.detail.chainId === initialize.from_chainId ? true : false) : false;\n    let isToConnected = wallet.isConnected() ? (+wallet.detail.chainId === initialize.to_chainId ? true : false) : false;\n    let obj = {\n      isFromConnected: isFromConnected,\n      isToConnected: isToConnected\n    }\n    setIsWalletConnected(obj)\n  }\n\n  const showListFrom = () => {\n\n    setDropdownList_from(!dropdownList_from)\n  }\n  const showListTo = () => {\n    setDropdownList_to(!dropdownList_to)\n  }\n\n  const getValid = async () => {\n    if(wallet.isConnected()){\n      let res = await apiProxy.request('getUserWormholeSignature','wallet.detail.account');\n      if(res.valid){\n        setInitialize({\n          from_chainId: res.fromChainId,\n          from_network: isNetwork(res.fromChainId,lang).netWork,\n          to_chainId: res.toChainId,\n          to_network: isNetwork(res.toChainId,lang).netWork,\n        })\n        setFrom_img(isNetwork(res.fromChainId,lang).img)\n        setTo_img(isNetwork(res.toChainId,lang).img)\n        setAmount(bg(res.amount,-18))\n        setSending(res.valid)\n      }\n    }\n  } \n\n  const getBalance = async () => {\n    if (wallet.isConnected()) {\n      let res = await apiProxy.request('getDeriBalance', [wallet.detail.chainId, wallet.detail.account])\n      setBalance(res)\n    }\n  }\n\n  useEffect(() => {\n    getBalance()\n  }, [wallet.detail, initialize]);\n\n  useEffect(()=>{\n    getValid()\n  },[wallet.detail])\n\n  const select_from = obj => {\n    let Init = JSON.parse(JSON.stringify(initialize));\n    if (Init.to_chainId === obj.id) {\n      Init.from_chainId = initialize.to_chainId;\n      Init.from_network = initialize.to_network;\n      Init.to_chainId = initialize.from_chainId;\n      Init.to_network = initialize.from_network;\n    } else {\n      Init.from_chainId = obj.id; \n      Init.from_network = obj.text;\n    }\n    setInitialize(Init)\n    setDropdownList_from(!dropdownList_from)\n  }\n  const select_to = obj => {\n    let Init = JSON.parse(JSON.stringify(initialize));\n    if (Init.from_chainId === obj.id) {\n      Init.from_chainId = initialize.to_chainId;\n      Init.from_network = initialize.to_network;\n      Init.to_chainId = initialize.from_chainId;\n      Init.to_network = initialize.from_network;\n    } else {\n      Init.to_chainId = obj.id;\n      Init.to_network = obj.text;\n    }\n    setInitialize(Init)\n    setDropdownList_to(!dropdownList_to)\n\n  }\n\n  const getState = (state) => {\n    console.log(state)\n  }\n\n  useEffect(() => {\n    let from_arr;\n    let to_arr;\n    let from_one = netWork_text.filter(p => p.id === initialize.from_chainId)[0]\n    let from_two = netWork_text.filter(p => p.id !== initialize.from_chainId)[0]\n    let from_three = netWork_text.filter(p => p.id !== initialize.from_chainId)[1]\n    let to_one = netWork_text.filter(p => p.id === initialize.to_chainId)[0]\n    let to_two = netWork_text.filter(p => p.id !== initialize.to_chainId)[0]\n    let to_three = netWork_text.filter(p => p.id !== initialize.to_chainId)[1]\n    from_arr = [from_one, from_two, from_three]\n    to_arr = [to_one, to_two, to_three]\n    setFromList(from_arr)\n    setToList(to_arr)\n    setFrom_img(isNetwork(initialize.from_chainId, lang).img)\n    setTo_img(isNetwork(initialize.to_chainId, lang).img)\n    isConnected()\n\n  }, [initialize])\n\n  const getAmount = (value) => {\n    setAmount(value)\n  }\n\n  return (\n    <div className='bridge'>\n      <div className='bridge-box'>\n        <div className='bridge-title'>\n          <div className='title'>\n            {lang['bridge']}\n          </div>\n          <div className='birdge-des'>\n            {lang['bridge-des']}\n          </div>\n        </div>\n        <div className='bridge-info'>\n          <div className='select-network-box'>\n            <div className='select-network-title'>\n              {lang['select-networks']}\n            </div>\n            <div className='select-network-from-to'>\n              <div className='from-network'>\n                <div className='from-title'>\n                  {lang['from']}\n                </div>\n                <div className='from-dropdown-list'>\n                  <div className='drop'>\n                    <div className='network-logo-connected'>\n                      <img src={From_img} alt='' />\n                      <span>{initialize.from_network}</span>\n                      <div className={isClaim ? 'connected-hide' : !isWalletConnected.isFromConnected ? 'is-connected' : 'connected'}>\n                        {(!isClaim && isWalletConnected.isFromConnected) ? lang['connected'] : lang['unconnected']}\n                      </div>\n                    </div>\n                    <img className='down-icon' src={down} alt='' onClick={() => { showListFrom() }} />\n                  </div>\n                  <ul className={selectListClassFrom}>\n                    <li className='wallet-li' onClick={() => select_from(fromList[0])}>\n                      <div className='li-logo-network'>\n                        <img alt='' src={fromList[0].img} /> <span> {fromList[0].text} </span>\n                        { }\n                      </div>\n                      <div className='up-icon-btn' onClick={() => { showListFrom() }}>\n                        <img alt='' src={down} className='up-icon' />\n                      </div>\n                    </li>\n                    <li className='wallet-li' onClick={() => select_from(fromList[1])}>\n                      <div className='li-logo-network'>\n                        <img alt='' src={fromList[1].img} /> <span> {fromList[1].text} </span>\n                      </div>\n                    </li>\n                    <li className='wallet-li' onClick={() => select_from(fromList[2])}>\n                      <div className='li-logo-network'>\n                        <img alt='' src={fromList[2].img} /> <span> {fromList[2].text} </span>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <div className='arrow'>\n                <img src={arrow} alt='' />\n              </div>\n              <div className='to-network'>\n                <div className='to-title'>\n                  {lang['to']}\n                </div>\n                <div className='to-dropdown-list'>\n                  <div className='drop'>\n                    <div className='network-logo-connected'>\n                      <img src={To_img} alt='' />\n                      <span>{initialize.to_network}</span>\n                      <div className={!isClaim ? 'connected-hide' : !isWalletConnected.isToConnected ? 'is-connected' : 'connected'}>\n                        {(isClaim && isWalletConnected.isToConnected) ? lang['connected'] : lang['unconnected']}\n                      </div>\n                    </div>\n                    <img className='down-icon' src={down} alt='' onClick={() => { showListTo() }} />\n                  </div>\n                  <ul className={selectListClassTo}>\n                    <li className='wallet-li' onClick={() => select_to(toList[0])}>\n                      <div className='li-logo-network'>\n                        <img alt='' src={toList[0].img} /> <span> {toList[0].text} </span>\n                      </div>\n                      <div className='up-icon-btn' onClick={() => { showListTo() }}>\n                        <img alt='' src={down} className='up-icon' />\n                      </div>\n                    </li>\n                    <li className='wallet-li' onClick={() => select_to(toList[1])}>\n                      <div className='li-logo-network'>\n                        <img alt='' src={toList[1].img} /> <span> {toList[1].text} </span>\n                      </div>\n                    </li>\n                    <li className='wallet-li' onClick={() => select_to(toList[2])}>\n                      <div className='li-logo-network'>\n                        <img alt='' src={toList[2].img} /> <span> {toList[2].text} </span>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='set-amount'>\n            <div className='set-amount-title'>\n              {lang['set-amount']}\n            </div>\n            <div className='set-amount-box'>\n              <div className='input-deri'>\n                <Input value={amount} onChange={getAmount} className='input-box' />\n                <span><img alt='' src={deriLogo} className='amount-img' /> DERI</span>\n              </div>\n              <div className='total-deri'>\n                {lang['total-amount']} {balance} DERI\n              </div>\n            </div>\n          </div>\n          <div className='bridge-operate-hint'>\n            <Operate lang={lang} wallet={wallet} amount={amount} initialize={initialize} onChange={getState} />\n          </div>\n          <div className='bridge-to-polygon'>\n            <div>\n              <div className='birdge-to-polygon-title'>\n                {lang['bridge-to-polygon']} <span className='polygon-title'>\n                  <a rel='noreferrer' target='_blank' href='https://wallet.matic.network/bridge'>Polygon</a>\n                </span>\n              </div>\n              <div className='bridge-to-polygon-des'>\n                {lang['bridge-to-polygon-des']}\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nfunction isNetwork(chainId, lang) {\n  chainId = +chainId\n  let obj = {}\n  switch (chainId) {\n    case 1:\n      obj.netWork = lang[\"ethereum\"];\n      obj.chainId = 1;\n      obj.img = ETH;\n      break;\n    case 56:\n      obj.netWork = lang[\"bsc\"];\n      obj.chainId = 56;\n      obj.img = BSC;\n      break;\n    case 128:\n      obj.netWork = lang[\"heco\"];\n      obj.chainId = 128;\n      obj.img = HECO;\n      break;\n    case 97:\n      obj.netWork = lang[\"bsc-testnet\"];\n      obj.chainId = 97;\n      obj.img = BSC;\n      break;\n    case 3:\n      obj.netWork = lang[\"ropsten\"];\n      obj.chainId = 3;\n      obj.img = ETH;\n      break;\n    case 256:\n      obj.netWork = lang[\"heco-testnet\"];\n      obj.chainId = 256;\n      obj.img = HECO;\n      break;\n    default:\n      break;\n  }\n  return obj;\n}\nexport default inject('wallet')(observer(Bridge))"],"sourceRoot":""}