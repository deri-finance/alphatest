{"version":3,"sources":["components/Button/Button.js","utils/DeriNumberFormat.js","components/Pool/PoolBox.js","hooks/useMiningPool.js","mobile/components/Mining/Pool.js"],"names":["Button","btnText","className","disabled","click","afterClick","useState","status","setStatus","pending","setPending","loadRef","useRef","onClick","a","current","style","display","ref","marginRight","DeriNumberFormat","props","renderablity","setRenderablity","useEffect","allowZero","others","value","Math","abs","displayType","chainConfig","config","DeriEnv","get","inject","observer","wallet","pool","buttonElement","setButtonElement","logoClassName","bTokenSymbol","history","useHistory","airdrop","connectWallet","connect","isConnected","url","chainId","type","symbol","address","push","network","toUpperCase","liquidity","thousandSeparator","decimalScale","lpApy","title","apy","suffix","label","target","rel","href","env","chainInfo","useMiningPool","loaded","setLoaded","pools","setPools","configs","getContractAddressConfig","map","getPoolLiquidity","liqPool","getPoolInfoApy","apyPool","Object","assign","name","formatAddress","buttonText","slpConfig","getLpContractAddressConfig","liqInfo","isLP","getLpPoolInfoApy","lapy","apy2","isSushiLP","isCakeLP","allConfigs","concat","Promise","all","then","length","Pool","index"],"mappings":"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","file":"static/js/11.370e2130.chunk.js","sourcesContent":["import {useState,useRef} from 'react';\r\nexport default function Button({btnText,className,disabled,click,afterClick}){\r\n  const [status, setStatus] = useState(disabled ? 'disabled' : 'enabled');\r\n  const [pending, setPending] = useState(false);\r\n  const loadRef = useRef(null)\r\n\r\n  const onClick = async () => {\r\n    if(status !== 'enabled') {\r\n      return ;\r\n    }\r\n    setStatus('disabled')\r\n    setPending(true);\r\n    loadRef.current && (loadRef.current.style.display = 'inline-block')\r\n    const result = await click();    \r\n    if(result){\r\n      afterClick && afterClick()\r\n    } \r\n    loadRef.current && (loadRef.current.style.display = 'none')\r\n    setStatus('enabled')\r\n    setPending(false);\r\n  }\r\n\r\n  return(\r\n    <button className={className} onClick={onClick} >\r\n        <span className='btn-loading-wrap'>\r\n          <span ref={loadRef}\r\n            className='spinner spinner-border spinner-border-sm'\r\n            style={{display : 'none' ,marginRight : '2'}}>\r\n          </span>\r\n        </span>\r\n          {pending ? 'PENDING' : btnText  }\r\n        </button>\r\n  )\r\n}","import React,{useState,useEffect} from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function DeriNumberFormat(props){\r\n  const [renderablity, setRenderablity] = useState('--');\r\n\r\n  useEffect(() => {\r\n    const {allowZero,...others} = props \r\n    if((props.value || ((Math.abs(props.value)) === 0 && allowZero === true))) {\r\n      setRenderablity(<NumberFormat {...others} displayType = 'text' />)\r\n    } \r\n    return () => {};\r\n  }, [props.value]);\r\n\r\n  return renderablity;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport config from  '../../config.json'\r\nimport { DeriEnv, getUserInfoAllForAirDrop, connectWallet, mintAirdrop, isUnlocked, unlock } from '../../lib/web3js/indexV2';\r\nimport DeriNumberFormat from '../../utils/DeriNumberFormat';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Button from '../Button/Button.js';\r\nimport { eqInNumber } from '../../utils/utils.js';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nconst chainConfig = config[DeriEnv.get()]['chainInfo'];\r\n\r\nfunction PoolBox({wallet,pool}){\r\n  const [buttonElement, setButtonElement] = useState('');\r\n  const logoClassName = `logo ${pool.bTokenSymbol}`\r\n  const history = useHistory();\r\n\r\n  const airdrop = () => {\r\n    // const res = getUserInfoAllForAirDrop(pool.pool)\r\n    // if(res){\r\n    //   const {chainId,valid} = res;\r\n    //   if(!valid){\r\n    //     alert('No DERI to claim')\r\n    //     return;\r\n    //   }\r\n    //   if(!eqInNumber(wallet.detail.chainId,chainId)) {\r\n    //     alert('Please switch to BSC to claim DERI')\r\n    //     return;\r\n    //   }\r\n    //   mintAirdrop(chainId,wallet.detail.account)\r\n    // }\r\n  }\r\n\r\n  const gotoMining = url => {\r\n    history.push(url)\r\n  }\r\n  const connectWallet = () => {\r\n    wallet.connect()\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if(pool && pool.airdrop){\r\n      if(!wallet.isConnected()) {\r\n        setButtonElement(<Button btnText='Connect Wallet' click={connectWallet}></Button>)\r\n      } else {\r\n        setButtonElement(<Button btnText='CLAIM' click={airdrop}></Button>)\r\n      }\r\n    } else {\r\n      setButtonElement(        \r\n          <button onClick={() => gotoMining(`/mining/${pool.chainId}/${pool.type}/${pool.symbol}/${pool.bTokenSymbol}/${pool.address}`)}>\r\n            STAKING\r\n          </button>\r\n        )\r\n    }    \r\n    return () => {};\r\n  }, [pool]);\r\n\r\n  return(\r\n    <div className=\"pool\" >\r\n      <div className=\"pool-header\">\r\n        <div className=\"network\">\r\n          {pool.network && pool.network.toUpperCase()}\r\n        </div>\r\n      </div>\r\n      <div className=\"pool-info\">\r\n        <div className=\"info-center\">\r\n          <div className=\"top-info\">\r\n            <div className={logoClassName} ></div>\r\n            <div className=\"pool-detail\">\r\n              <div className=\"base-token\">{pool.bTokenSymbol}</div>\r\n              <div>\r\n                <span>{pool.airdrop ? 'Total' : 'Pool Liq'}</span>\r\n                <DeriNumberFormat value={pool.liquidity} displayType='text' thousandSeparator={true} decimalScale={pool.lpApy ? 7 : 0}/>\r\n              </div>\r\n              <div>\r\n                <span>Symbol</span>\r\n                {pool.symbol}\r\n              </div>\r\n              <div className=\"apy\">\r\n                <span>APY</span>\r\n                <span>\r\n                  <span className={pool.lpApy ? 'sushi-apy-underline' : ''} title={ pool.lpApy && 'DERI-APY'}>\r\n                    {pool.apy ? <DeriNumberFormat value={pool.apy} suffix='%' displayType='text' allowZero={true} decimalScale={2}/> : '--'}                 \r\n                  </span>\r\n                  {pool.lpApy &&<>\r\n                  <span> + </span>\r\n                  <span className={pool.lpApy ? 'sushi-apy-underline' : '' } title={ pool.lpApy && pool.label}> <DeriNumberFormat value={pool.lpApy} displayType='text' suffix='%' decimalScale={2}/></span>\r\n                  </>}\r\n                </span>\r\n                \r\n              </div>\r\n              <div className=\"pool-address\">\r\n                <span>Address</span>\r\n                {!pool.airdrop ? <a target='_blank' rel='noreferrer' href={`${chainConfig[pool.chainId]['viewUrl']}/address/${pool.address || pool.pool}`}> \r\n                  {pool.pool}\r\n                </a> : '--'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bottom-btn\">\r\n            {buttonElement}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default  inject('wallet')(observer(PoolBox))","import {useState,useEffect} from 'react';\r\nimport {\r\n  DeriEnv,\r\n  getContractAddressConfig,\r\n  getPoolLiquidity,\r\n  getPoolInfoApy,\r\n  getLpContractAddressConfig,\r\n  getLpPoolInfoApy\r\n} from '../lib/web3js/indexV2'\r\nimport config from '../config.json'\r\nimport { formatAddress, isLP,isSushiLP,isCakeLP } from '../utils/utils';\r\n\r\nconst env = DeriEnv.get();\r\nconst {chainInfo} = config[env]\r\n\r\nexport default function useMiningPool(){\r\n  const [loaded,setLoaded] = useState(false)\r\n  const [pools, setPools] = useState([])\r\n\r\n\r\n  useEffect(() => {\r\n    const configs = getContractAddressConfig(env).map(async config =>  {\r\n      const liqPool = await getPoolLiquidity(config.chainId,config.pool) || {}\r\n      const apyPool = await getPoolInfoApy(config.chainId,config.pool) || {}\r\n      const pool = config.pool || ''\r\n      return Object.assign(config,{ \r\n        network : chainInfo[config.chainId].name,\r\n        liquidity : liqPool.liquidity,\r\n        apy :  (+apyPool.apy) * 100,\r\n        pool : formatAddress(pool),\r\n        address : pool,\r\n        type : 'perpetual',\r\n        buttonText : 'STAKING'        \r\n      })\r\n    })\r\n    const slpConfig = getLpContractAddressConfig(env).map(async config => {\r\n      const liqInfo = await getPoolLiquidity(config.chainId,config.pool) || {}\r\n      const apyPool = await getPoolInfoApy(config.chainId,config.pool) || {} \r\n      const pool = config.pool || ''      \r\n      let lpApy;\r\n      let label;\r\n      if(isLP(config.pool)){\r\n        let lapy = await getLpPoolInfoApy(config.chainId,config.pool);\r\n        lpApy = (+lapy.apy2) * 100;           \r\n      }\r\n      if(isSushiLP(config.pool)){\r\n        label = 'SUSHI-APY'\r\n      }\r\n      if(isCakeLP(config.pool)){\r\n        label = 'CAKE-APY'\r\n      }\r\n      return Object.assign(config,{\r\n        network : chainInfo[config.chainId].name,\r\n        liquidity : liqInfo.liquidity,\r\n        apy : (+apyPool.apy) * 100,\r\n        pool : formatAddress(pool),\r\n        lpApy : lpApy,\r\n        address : pool,\r\n        type : 'lp',\r\n        label:label,\r\n        buttonText : 'STAKING'\r\n      })    \r\n    })\r\n    const allConfigs = configs.concat(slpConfig)\r\n    Promise.all(allConfigs).then(pools => {\r\n      const airDrop = {\r\n        network : 'BSC',\r\n        bTokenSymbol : 'GIVEAWAY',\r\n        liquidity : '0',\r\n        symbol : '--',\r\n        airdrop : true,\r\n        buttonText : 'CLAIM'\r\n      }\r\n      // pools.push(airDrop)\r\n      setPools(pools);\r\n      setLoaded(true)\r\n    })\r\n    return () => pools.length = 0\r\n  })\r\n  return [loaded,pools];\r\n}","import React from 'react'\r\nimport './pool.less'\r\nimport PoolBox from '../../../components/Pool/PoolBox';\r\nimport useMiningPool from '../../../hooks/useMiningPool';\r\n\r\n\r\nexport default function Pool(){\r\n  const [loaded,pools] = useMiningPool();\r\n\r\n  return (\r\n    <div className=\"mining-info\">\r\n      <div className=\"pools\">\r\n        {pools.map((pool,index) => <PoolBox pool={pool} key={index}/>)}\r\n        {!loaded && <div className=\"loading\">\r\n          <span\r\n            className=\"spinner spinner-border spinner-border-sm\">\r\n            </span>\r\n          </div>}  \r\n      </div>\r\n    </div>\r\n  )\r\n}"],"sourceRoot":""}