{"version":3,"sources":["lib/web3js/utils.js","utils/LoadableComponent.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/walletApi.js","model/Oracle.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/apiGlobals.js","lib/web3js/indexV2.js","lib/web3js/apiV2/contractTransactionApiV2.js","lib/web3js/api/contractQueryApi.js","lib/polyfill/numberPolyfill.js","App.js","model/Wallet.js","model/Position.js","model/Contract.js","model/Config.js","model/Trading.js","index.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/config/database.js","lib/web3js/api/databaseApi.js","lib/web3js/factory/web3.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","utils/utils.js","lib/web3js/config/env.js"],"names":["BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","Web3","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","i","isNaN","checkHttpServerIsAlive","url","a","fetch","ok","getAliveHttpServer","urls","length","Error","MAX_VALUE","getNetworkName","chainId","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","pool","getContractAddressConfig","DeriEnv","get","filter","c","p","bTokenAddress","bToken","pTokenAddress","pToken","lTokenAddress","lToken","dTokenAdress","dToken","MinningVaultAddress","MiningVault","bTokenSymbol","symbol","unit","initialBlock","console","log","getMiningVaultContractAddress","pools","getAnnualBlockNumber","blockNumbers","getAnnualBlockNumberConfig","parseInt","getSlpContractAddress","getSlpContractAddressConfig","getClpContractAddress","getClpContractAddressConfig","getLpContractAddress","getLpContractAddressConfig","type","getDeriContractAddress","getDeriContractAddressConfig","deriAddress","Deri","wormholeAddress","Wormhole","getOracleUrl","env","addSymbolParam","getOracleInfo","priceResponse","json","priceResponseJson","getBTCUSDPrice","responseJson","price","getChainProviderUrl","getChainProviderUrlsConfig","format","bigNumber","toFormat","replaceAll","res","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","provider_urls","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","1","56","128","3","97","256","getRestServerConfig","calculateLiquidityUsed","tradersNetVolume","multiplier","liquidity","poolMarginRatio","abs","calculateFundingRate","fundingRateCoefficient","processFundingRate","fundingRate","annualBlockCount","calculateShareValue","lTokenTotalSupply","eq","calculateMaxRemovableShares","lTokenBalance","tradersNetCost","minPoolMarginRatio","shareValue","removable","plus","minus","calculateEntryPrice","volume","cost","calculateMarginHeld","minInitialMarginRatio","calculatePnl","calculateMaxWithdrawMargin","margin","held","pnl","calculateLiquidationPrice","minMaintenanceMarginRatio","tmp","gt","isOrderValid","newVolume","amount","minMargin","poolMaxVolume","negated","success","message","connectWallet","handleChainChanged","handleAccountChanged","undefined","window","ethereum","request","method","accounts","account","Array","isArray","on","location","reload","error","getUserWalletBalance","walletAddress","web3","metaMaskWeb3","eth","getBalance","balance","fromWei","Oracle","index","kData","ws","paused","listeners","makeAutoObservable","this","observable","setIndex","action","initWebSocket","WebSocket","transports","path","timeType","resume","setSymbol","data","obj","time","low","Number","high","open","close","time_type","forEach","listener","emit","emited","push","uid","bars","callback","history","map","el","setPause","unlock","accountAddress","bTokenFactory","tx","transaction","depositMargin","pPool","perpetualPoolFactory","withdrawMargin","pTokenFactory","getPositionInfo","getParameters","maxWithdrawMargin","_transactPool","addLiquidity","removeLiquidity","shares","lTokenFactory","Promise","all","totalSupply","getStateValues","maxRemovableShares","tradeWithMargin","orderValidation","closePosition","mintDToken","getUserInfoAll","userInfo","deadline","nonce","v","r","s","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","processTradeEvent","perpetualPool","info","blockNumber","txHash","feeRatio","tradeVolume","_getTimeStamp","timeStamp","direction","timestamp","transactionFee","_calculateFee","notional","baseToken","transactionHash","processLiquidateEvent","national","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","item","returnValues","unshift","getLiquidateHistoryOnline","getHttpBase","fetchJson","resp","getSpecification2","getLiquidityUsed2","getPositionInfo2","getLiquidityInfo2","getWalletBalance2","getTradeHistory2","tradeFromBlock","tradeHistoryBlock","liquidateFromBlock","liquidateHistoryBlock","tradeHistory","trim","tradeHistoryOnline","liquidateHistoryOnline","concat","sort","b","fundingRateCache","resourceMap","contractAddress","key","Object","keys","includes","set","resource","priceCache","_accountAddress","_price","_interval","_update","update","self","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","wsInstance","_ws","io","id","err","getOrSet","wsOnPromise","event","resolve","reject","JSON","parse","sendTradeTxToWorkerQuene","methodCall","send","tradeWithMargin2","closePosition2","depositMargin2","withdrawMargin2","addLiquidity2","removeLiquidity2","addSlpLiquidity2","addSlpLiquidity","removeSlpLiquidity2","removeSlpLiquidity","addClpLiquidity2","addClpLiquidity","removeClpLiquidity2","removeClpLiquidity","isUnlocked","getEstimatedFee","parameters","getFundingRate","catch","getPoolInfoApy","poolInfo","fundingRatePerBlock","volume24h","fundingRate0","toExponential","getEstimatedFundingRate","newNetVolume","fundingRate1","getEstimatedLiquidityUsed","liquidityUsed1","prototype","len","RangeError","Math","pow","round","numberArr","split","padNum","intNum","deciNum","lastNum","substr","changedInt","replace","num","dotPos","indexOf","need","j","DesktopApp","MobileApp","App","isBrowser","isMobile","Wallet","detail","isConnected","connect","loadWalletBalance","wallet","formatBalance","chainInfo","assign","supported","remove","sessionStorage","removeItem","Position","setInfo","spec","position","interval","load","Contract","getSpecification","chainid","Config","makeObservable","setAll","configs","Trading","contract","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setPaused","computed","fundingRateTip","volumeDisplay","configInfo","oracle","positionInfo","contractInfo","eqInNumber","find","onConfigChange","cur","pause","addListener","loadFundingRate","curVolume","contractValue","dynBalance","unrealizedPnl","leverage","available","exchanged","marginHeld","trading","ReactDOM","render","StrictMode","document","getElementById","getSlpLiquidityInfo","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","poolLiquidity","isSlpUnlocked","unlockSlp","getSlpWalletBalance","getClpLiquidityInfo","clpPool","clpPoolFactory","isClpUnlocked","unlockClp","getClpWalletBalance","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getUserInfo","userAddress","db","databaseFactory","getValues","getUserInfoHarvest","harvestLp","harvestTrade","lp","trade","getUserInfoTotal","total","userInfoHarvest","userInfoTotal","getPoolLiquidity","apy","volume1h","getSlpPoolInfoApy","getUserInfoInPool","getUserInfoAllForAirDrop","v1","r1","s1","v2","r2","s2","web3Instance","web3Factory","web3InstanceMap","providerUrl","providers","HttpProvider","MAX_GAS_AMOUNT","isProvider","methods","call","gas","estimateGas","from","_transactionReceipt","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","getGasPrice","txRaw","to","numberToHex","encodeABI","params","_getTransactionReceipt","POOL_ABI","PerpetualPool","_call","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","priceDelayAllowance","signed","gasPrice","args1","args2","liquidityUsed","getBlock","eventName","getPastEvents","es","e","CONTRACT_ABI","BTokenContract","allowance","_transact","address","_balance","decimals","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","_init","keyArray","updateProviderUrl","DatabaseWormholeContract","MiningVaultPool","SlpPool","ClpPool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","deriFactory","lpPoolInstanceMap","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","miningVaultRouterFactory","deriNatural","formatAddress","str1","str2","_deriEnv"],"mappings":"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","file":"static/js/main.0984768f.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getLpContractAddressConfig,\n  getAnnualBlockNumberConfig,\n  getDeriContractAddressConfig,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n// fetchWithTimeout\nconst fetchWithTimeout = (url, options, delay, onTimeout) => {\n  const timer = new Promise((resolve) => {\n    setTimeout(resolve, delay, {\n      timeout: true,\n    });\n  });\n  return Promise.race([fetch(url, options), timer]).then((response) => {\n    if (response.timeout) {\n      onTimeout();\n    }\n    return response;\n  });\n};\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    //const response = await fetchWithTimeout(url, {}, 1000);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    default:\n      throw new Error('The networkId is not valid');\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  console.log(\n    `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      if (symbol !== 'BTCUSD') {\n        return addSymbolParam('https://oracle3.deri.finance/price', symbol);\n      } else {\n        return addSymbolParam('https://oracle.deri.finance/price', symbol);\n      }\n    }\n    return 'https://oracle.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  try {\n    let url = getOracleUrl(chainId, poolAddress);\n    //console.log('oracle url', url);\n    const priceResponse = await fetch(url);\n    const priceResponseJson = await priceResponse.json();\n    return priceResponseJson;\n  } catch (err) {\n    throw new Error(`fetch oracle info error: ${err}`);\n  }\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  try {\n    const responseJson = await getOracleInfo(chainId, poolAddress)\n    return deriToNatural(responseJson.price).toString();\n  } catch (err) {\n    throw new Error(`fetch oracle price error: ${err}`);\n  }\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getAliveHttpServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  let res = chainId;\n  if (typeof chainId === 'number') {\n    res = chainId.toString();\n  }\n  return res;\n};\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","export const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '5288684',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n      },\n      {\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n      },\n      {\n        pool: '0x919F97417857781f754e00CCCD9100f78B759818',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7475766',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n\n      },\n      {\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11949433',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n      },\n      {\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11860070',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n      },\n      {\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '2557914',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n      },\n    ];\n  }\n  // develop environment\n  // console.log('-- test ---')\n  return [\n    {\n      pool: '0x67eE8f0CB17e750219Bd58d433D52ab4B3d8A081',\n      bToken: '0x8F038C454B6E68B2988706a1a5f78dE2C4634097',\n      pToken: '0xad794Adc3Ed6085A79Ba3e2FCD13Df8d33d462Ec',\n      lToken: '0x37732230ac101f59490762Ef73Be43B5E5Ec4949',\n      initialBlock: '9986356',\n      bTokenSymbol: 'USDT',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '3',\n    },\n    {\n      pool: '0xFFe402106E8F73F0A44C7350C2b734e048f448f2',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x5FeF67FD24f37b90E0c96324380F63413dF22f78',\n      lToken: '0xCdDbf76F76B9F95135F5D531fefc344258ff322a',\n      initialBlock: '7796681',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n    },\n    {\n      pool: '0x02A614844212f71049c469902F7A20F6540a2792',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x4396025914025F1C8B74788bF7c64f879064FbA6',\n      lToken: '0x2E80928a9eC105FE79cfC4B54c65d185AC3b7E9C',\n      initialBlock: '8108552',\n      bTokenSymbol: 'BUSD',\n      symbol: 'COIN',\n      unit: 'COIN',\n      chainId: '97',\n    },\n    {\n      pool: '0xE5a4fCd3CE3a824bF15D5FABd390cF44E83AbE8B',\n      bToken: '0x02c9840fD044abFd58E9674ecc232e8b1F323fE8',\n      pToken: '0xfa803C4528A1b9f91DFc5f8b4ff940f9FE4F4635',\n      lToken: '0xbD57300A178075F774b5F0F9f367B9A2912b7b5e',\n      initialBlock: '3663327',\n      bTokenSymbol: 'HUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '256',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP ONSEN',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n      },\n    ];\n  } else {\n    return [\n      {\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '8309032',\n        chainId: '97',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n      },\n    ];\n  }\n};\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP ONSEN',\n        type: 'slp',\n      },\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n        type: 'clp',\n      },\n    ];\n  } else {\n    return [\n      {\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '8309032',\n        chainId: '97',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: 'BTCUSD',\n        type: 'clp',\n      },\n    ];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress= (chainId) => {\n  const configs = [\n      {\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n        chainId: '56'\n      }\n    ]\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter\n  } else {\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\n  }\n\n}\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getAnnualBlockNumberConfig = () => ({\n  1: '2367422',\n  56: '10497304',\n  128: '10511369',\n  3: '2367422',\n  97: '10497304',\n  256: '10511369',\n});\n","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    return 'https://api.deri.finance';\n  } else {\n    // for test\n    return 'https://apitest.deri.finance';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","import { bg, getAnnualBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) =>\n  bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) =>\n  ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  console.log(annualBlockCount);\n  const res = bg(fundingRate).times(annualBlockCount);\n  // if (chainId === \"1\") {\n  //   res = bg(fundingRate).times(2367422);\n  // } else if (chainId === \"56\") {\n  //   res = bg(fundingRate).times(10497304);\n  // } else if (chainId === \"128\") {\n  //   res = bg(fundingRate).times(10511369);\n  // } else if (chainId === \"3\") {\n  //   res = bg(fundingRate).times(2367422);\n  // } else if (chainId === \"97\") {\n  //   res = bg(fundingRate).times(10497304);\n  // } else if (chainId === \"256\") {\n  //   res = bg(fundingRate).times(10511369);\n  // }\n  return res;\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => volume.abs().times(price).times(multiplier).times(minInitialMarginRatio);\n\nexport const calculatePnl = (price, volume, multiplier, cost) =>\n  volume.times(price).times(multiplier).minus(cost);\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    //console.log('accounts', accounts);\n    // const chainId = parseInt(\n    //   await window.ethereum.request({ method: 'net_version' })\n    // );\n    const chainId = hexToNumber(\n      await window.ethereum.request({ method: 'eth_chainId' })\n    );\n    //console.log('chainId', chainId);\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nclass Oracle {\n  symbol = 'BTCUSD'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n  listeners = []\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n    this.initWebSocket()\n  }\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket('wss://api.deri.finance', {\n        transports: ['websocket'],\n        path: '/kline'\n      })\n      this.ws.on('connect',() => console.log('ws is already connected'));\n    }    \n  }\n\n  // loadIndex(symbol){\n  //   this.resume();\n  //   this.setSymbol(symbol)\n  //   this.ws.emit('get_kline', {'symbol': symbol, 'time_type': 'min', 'bars': 10})\n  // }\n\n  load(symbol,timeType = 'min'){\n    this.resume();\n    this.setSymbol(symbol)\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol === this.symbol) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          this.listeners.forEach(listener => {\n            if(typeof listener === 'function') {\n              listener(obj)\n            }\n          })\n        }\n      }\n    })\n    this.emit(symbol,timeType);\n  }\n\n  emit(symbol,timeType){\n    if(!this.emited){\n      this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n      this.emited = true\n    }\n  }\n\n  addListener(listener){\n    this.listeners.push(listener)\n  }\n\n\n\n  unsubscribeBars(uid){\n    this.ws.emit('un_get_kline', {\n      symbol : this.symbol, 'time_type' : 'min', bars : 10\n    })\n  }\n\n\n  loadHistory(symbol,timeType,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        console.log('history ->',history[history.length-1].time)\n        callback(history)\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n    // this.emit(symbol);\n  }\n\n  // start(symbol){\n  //   this.initWebSocket();\n  //   this.loadIndex(symbol);\n  //   this.ws.on('kline_update',data => {\n  //     const obj = {}\n  //     let time = data.time\n  //     if (data.symbol === this.symbol) {\n  //       obj.time = time \n  //       obj.low = Number(data.low)\n  //       obj.high = Number(data.high)\n  //       obj.open = Number(data.open)\n  //       obj.close = Number(data.close)\n  //       obj.volume = Number(data.volume)\n  //       this.setIndex(obj.close)\n  //     }\n  //   })\n  // }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setPause(paused){\n    this.paused = paused\n  }\n}\n\nexport default new Oracle()","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","import {\n  getPoolContractAddress,\n  naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  console.log('hit');\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { getUserWormholeSignature } from './contractQueryApi';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 2000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","export {\n  DeriEnv,\n  getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  isUnlocked,\n  getEstimatedMargin,\n  getEstimatedFee,\n  getEstimatedFundingRate,\n  getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n} from './api/contractQueryApi';\nexport {\n  unlock,\n  //depositMargin,\n  //withdrawMargin,\n  mint,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport * from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\ngetSpecification2 as getSpecification,\ngetPositionInfo2 as getPositionInfo,\ngetLiquidityInfo2 as getLiquidityInfo,\ngetWalletBalance2 as getWalletBalance,\ngetFundingRate2 as getFundingRate,\ngetLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\ngetDeriBalance2 as getDeriBalance,\ngetTradeHistory2 as getTradeHistory,\n} from './api/restApi';\n\nexport {\n  tradeWithMargin2 as tradeWithMargin,\n  closePosition2 as closePosition,\n  depositMargin2 as depositMargin,\n  withdrawMargin2 as withdrawMargin,\n  addLiquidity2 as addLiquidity,\n  removeLiquidity2 as removeLiquidity,\n} from './apiV2/contractTransactionApiV2'\n\nexport * from './apiV2/lpPoolApi';\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from '../api/contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from '../api/slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from '../api/clpPoolApi'\nimport { wsInstance } from '../api/apiGlobals'\nimport { getRestServerConfig, DeriEnv, getRedisWorkerQueneConfig } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve, reject) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    return await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n  } else {\n    return res\n  }\n};","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  const symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n\n  return {\n    volume: volume.toString(),\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n    margin: margin.toString(),\n    marginHeld: calculateMarginHeld(\n      price,\n      volume,\n      multiplier,\n      minInitialMarginRatio\n    ).toString(),\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n    liquidationPrice: calculateLiquidationPrice(\n      volume,\n      margin,\n      cost,\n      multiplier,\n      minMaintenanceMarginRatio\n    ).toString(),\n  };\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.isUnlocked(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","// eslint-disable-next-line no-extend-native\nNumber.prototype.toFixed = function(len){\n  if(len>20 || len<0){\n      throw new RangeError('toFixed() digits argument must be between 0 and 20');\n  }\n  // .123转为0.123\n  var number = Number(this);\n  if (isNaN(number) || number >= Math.pow(10, 21)) {\n      return number.toString();\n  }\n  if (typeof (len) == 'undefined' || len == 0) {\n      return (Math.round(number)).toString();\n  }\n  var result = number.toString(),\n      numberArr = result.split('.');\n\n  if(numberArr.length<2){\n      //整数的情况\n      return padNum(result);\n  }\n  var intNum = numberArr[0], //整数部分\n      deciNum = numberArr[1],//小数部分\n      lastNum = deciNum.substr(len, 1);//最后一个数字\n  \n  if(deciNum.length == len){\n      //需要截取的长度等于当前长度\n      return result;\n  }\n  if(deciNum.length < len){\n      //需要截取的长度大于当前长度 1.3.toFixed(2)\n      return padNum(result)\n  }\n  //需要截取的长度小于当前长度，需要判断最后一位数字\n  result = intNum + '.' + deciNum.substr(0, len);\n  if(parseInt(lastNum, 10)>=5){\n      //最后一位数字大于5，要进位\n      var times = Math.pow(10, len); //需要放大的倍数\n      var changedInt = Number(result.replace('.',''));//截取后转为整数\n      changedInt++;//整数进位\n      changedInt /= times;//整数转为小数，注：有可能还是整数\n      result = padNum(changedInt+'');\n  }\n  return result;\n  //对数字末尾加0\n  function padNum(num){\n      var dotPos = num.indexOf('.');\n      if(dotPos === -1){\n          //整数的情况\n          num += '.';\n          for(var i = 0;i<len;i++){\n              num += '0';\n          }\n          return num;\n      } else {\n          //小数的情况\n          var need = len - (num.length - dotPos - 1);\n          for(var j = 0;j<need;j++){\n              num += '0';\n          }\n          return num;\n      }\n  }\n}","import {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App() {\n  \n  if(isBrowser){\n    return <DesktopApp/>\n  }\n  if(isMobile){\n    return <MobileApp/>\n  }\n}\n\nexport default App;\n","\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\nconst walletKey = 'mm_wallet_key'\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      loadWalletBalance : action,\n      connect : action      \n    })\n  }\n\n  isConnected = () => !!this.detail.account;\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);        \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    const env = DeriEnv.get();\n    const {chainInfo} = config[env]\n    \n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n    }\n    this.detail = detail;\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  remove = () => {\n    this.detail = null;\n    sessionStorage.removeItem(walletKey);\n    window.location.reload();\n  }\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action } from \"mobx\"\nimport { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n   // contract info\n   info = {}\n \n   constructor(){\n     makeAutoObservable(this,{\n        info : observable,\n        setInfo : action,\n       }\n     )\n   }\n\n   async load(wallet,spec,callback){\n     if(spec && spec.pool){\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account)\n      if(position){\n        this.setInfo(position);\n        if(callback){\n          callback(position)\n        }\n      }\n      this.start(wallet,spec,callback)\n      return position;\n     }\n   }\n\n   start(wallet,spec,callback){\n     if(!this.interval){\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)\n     }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(){\n     \n   }\n\n   setInfo(info){\n     this.info = info;\n   }\n\n\n \n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n\n  async load(wallet,config){\n    if(!this.info || (this.info && config.symbol !== this.info.symbol)){\n      const info = await getSpecification(wallet.detail.chainid,config.pool)\n      this.setInfo(info);\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info;\n  }\n\n}","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  async load(){\n    const configs = await getContractAddressConfig(DeriEnv.get())\n    this.setAll(configs)\n    return configs;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","import { observable, action, computed, makeObservable, runInAction } from \"mobx\";\nimport oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport Chain from \"./Config\";\nimport Config from \"./Config\";\nimport { eqInNumber } from \"../utils/utils\";\nimport { getEstimatedFundingRate,getLiquidityUsed, getEstimatedLiquidityUsed, getEstimatedFee } from \"../lib/web3js/indexV2\";\nimport { fromPromise } from \"mobx-utils\";\nimport { computedAsync, promisedComputed } from \"computed-async-mobx\";\nimport { getFundingRate } from \"../lib/web3js/api/contractQueryApi\";\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  wallet = null;\n  configs = [] \n  config = null;\n  fundingRate = '--' \n  index = null\n  volume = ''\n  paused = false\n  margin = ''\n  position = {}\n  contract = {}\n  fundingRate = {}\n  userSelectedDirection = 'long'\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      margin : observable,\n      fundingRate : observable,\n      position : observable,\n      contract : observable,\n      paused : observable,\n      userSelectedDirection : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setFundingRate : action,\n      setPaused : action,\n      amount : computed,\n      // effect : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = oracle;\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet){\n    if(!this.wallet || wallet.detail.account !== this.wallet.detail.account){\n      this.setWallet(wallet);\n      //配置信息，如chainId、pool address、symbol、baseToken等\n      const all = await this.configInfo.load();\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      this.setConfig(all.find(c => eqInNumber(wallet.detail.chainId,c.chainId)) || {})\n      this.onConfigChange(this.wallet,this.config)\n    }\n    this.setVolume('')\n  }\n\n  async switch(symbol){\n    const cur = this.configs.find(config => config.symbol === symbol)\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.onConfigChange(this.wallet,cur);      \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async onConfigChange(wallet,config){\n     //position\n     const position = await this.positionInfo.load(wallet,config,position => {\n        this.setPosition(position);\n     })\n    //  this.setPosition(position);\n     //index\n     this.oracle.addListener(data => {\n      this.setIndex(data.close)\n     })\n     this.oracle.load(config.symbol)\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)\n     this.setContract(contract)\n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     this.setFundingRate(fundingRate)\n  }\n\n  async refresh(){\n    const position = await this.positionInfo.load(this.wallet,this.config);\n    this.setPosition(position)\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    this.setVolume('')\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume();\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    this.position = position\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setMargin(margin){\n    this.margin = margin\n    if(this.contract){\n      const volume = (+margin) / ((+this.index) * (+this.contract.multiplier) * (+this.contract.minInitialMarginRatio))      \n      if(!isNaN(volume)){\n        this.setVolume(Math.abs(volume))\n        console.log('volume ',volume)\n      }\n    }\n  }\n\n  get volumeDisplay(){\n    if(this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\n      return '';\n    } else if(this.margin !== '') {\n        if((+this.volume) > Math.abs(+this.position.volume)) {\n          const result = parseInt(Math.abs(this.volume) - Math.abs(this.position.volume))\n          return result\n        } else {\n          const result = parseInt(Math.abs(this.position.volume) - Math.abs(this.volume));          \n          return result\n        }\n    } else {\n      return this.volume\n    }\n  }\n\n  \n  //计算available balance、contract value、\n  get amount(){\n    if(this.index && this.position && this.contract && this.volume !== ''){\n      //合同价值\n      let curVolume = Math.abs(this.volume);\n      //如果不是通过marge 算出来的volume\n      if(this.margin === '') {       \n        if(this.userSelectedDirection === 'long') {\n          if((+this.position.volume) > 0) {\n            curVolume = curVolume + (+this.position.volume)\n          } else {\n            curVolume = Math.abs(this.position.volume) - curVolume\n          }         \n        } else {\n          if((+this.position.volume) > 0){\n            curVolume =  (+this.position.volume) - curVolume\n          } else {\n            curVolume = Math.abs(this.position.volume) + (+curVolume)\n          }\n        }\n      }\n      const contractValue = Math.abs(curVolume) * this.index * this.contract.multiplier\n      const dynBalance = (+this.position.margin) + (+this.position.unrealizedPnl)\n      const margin = contractValue * this.contract.minInitialMarginRatio\n      const leverage = (+contractValue / +dynBalance).toFixed(1);\n      const balance = ((+dynBalance) - (+margin)).toFixed(2)\n      const available = balance > 0 ? balance : 0\n      const exchanged = contractValue / this.index\n      return {\n        dynBalance, //动态余额\n        margin,         //存入保证金\n        available,      //可用余额\n        exchanged,      //换算的值\n        leverage,        //杠杆\n      }\n    } else if(this.position && this.position.margin){\n      const dynBalance = ((+this.position.margin) + (+this.position.unrealizedPnl)).toFixed(2)\n      const margin = (+this.position.marginHeld).toFixed(2)\n      const available = ((+dynBalance) - (+margin)).toFixed(2)\n      return {\n        dynBalance,\n        margin,\n        available,\n      }\n    }\n    return {}\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(wallet && config){    \n      const res = await getFundingRate(wallet.detail.chainId,config.pool)\n      return res;\n    }\n  }\n\n  get fundingRateTip(){\n    if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n      return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\n      `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \n    }\n    return ''\n  }\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\n//note dont remove zhe line\nimport NumberPolyfill from './lib/polyfill/numberPolyfill'\nimport Trading from './model/Trading';\nimport { DeriEnv } from './lib/web3js/config';\n\nconst wallet = new Wallet();\nconst trading = new Trading()\n\nDeriEnv.set('prod')\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} >\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","export const getDBProviderUrlsConfig = () => [\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n","import { databaseFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getSlpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getClpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseFactory();\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return (chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    console.log(\n      `==== web3Factory(${chainId}), please caution the access limits ===`\n    );\n    const providerUrl = getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    if (isProvider) {\n      this.web3 = web3Factory(chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    return await this.contract.methods[method](...args).call();\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    //const gas = await this._estimatedGas(method, args);\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, args, accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (this.chainId === '56') {\n      amount = 1999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    //console.log(allowance.toString());\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  // for slp pool use\n  // async balanceOf(poolAddress) {\n  //   //const res = await this._call('balanceOf', [poolAddress])\n  //   let result\n  //   const [res, decimals] = await Promise.all([\n  //     this._balance(this.poolAddress),\n  //     this.decimals(),\n  //   ])\n  //   result = bg(res, -decimals)\n  //   return result\n  // }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async getPositionInfo(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async balance(accountAddress) {\n    //console.log('balance', this.chainId, this.contractAddress, accountAddress)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      DB_CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async getValues(keyArray) {\n    await this.updateProviderUrl();\n    return await this.contract.methods.getValues(keyArray).call();\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport { web3Factory } from '../factory/web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  async updateProviderUrl() {\n    if (\n      !(this.providerUrl && (await checkHttpServerIsAlive(this.providerUrl)))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n    }\n    this._init();\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = web3Factory('97');\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async signature(accountAddress) {\n    if (!this.contract) {\n      await this.updateProviderUrl();\n    }\n    return await this.contract.methods['signature'](accountAddress).call();\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"0x608060405234801561001057600080fd5b506040516112c63803806112c683398101604081905261002f91610066565b60008054336001600160a01b031991821617909155600380549091166001600160a01b039290921691909117905546600455610094565b600060208284031215610077578081fd5b81516001600160a01b038116811461008d578182fd5b9392505050565b611223806100a36000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636b0509b1116100975780639a8a0592116100665780639a8a0592146101c85780639d76ea58146101d0578063b06faf62146101d8578063f77c4791146101e0576100f5565b80636b0509b114610185578063701422691461018d57806379a87b19146101a057806392eefe9b146101b5576100f5565b806351dfdb48116100d357806351dfdb4814610137578063560ebbd11461014a57806358c700a31461016a578063677528cb14610172576100f5565b806306fdde03146100fa57806320606b7014610118578063325564ec1461012d575b600080fd5b6101026101e8565b60405161010f9190610dbf565b60405180910390f35b610120610209565b60405161010f9190610d48565b61013561022d565b005b610135610145366004610bab565b6103a1565b61015d610158366004610ca1565b61066f565b60405161010f9190610d3d565b610120610684565b610135610180366004610bea565b61068a565b6101206107b1565b61013561019b366004610c15565b6107d5565b6101a8610acc565b60405161010f9190610cec565b6101356101c3366004610bab565b610adb565b610120610b77565b6101a8610b7d565b61015d610b8c565b6101a8610b9c565b6040518060400160405280600581526020016415985d5b1d60da1b81525081565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6000546001600160a01b031633146102605760405162461bcd60e51b815260040161025790610f7f565b60405180910390fd5b600254600160a01b900460ff161561028a5760405162461bcd60e51b81526004016102579061106a565b6001541580159061029d57506001544210155b6102b95760405162461bcd60e51b815260040161025790610e12565b60035460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926102f19291169060001990600401610d24565b602060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610c81565b506002805460ff60a01b1916600160a01b17908190556001546040517fce3275b30d22151f82ee29ce7ea685563b66ff98e56afc576a94d8a88c676ec092610397929130916001600160a01b031690611153565b60405180910390a1565b6000546001600160a01b031633146103cb5760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156103f55760405162461bcd60e51b81526004016102579061106a565b6000816001600160a01b03166358c700a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561043057600080fd5b505afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610cb9565b90506000826001600160a01b03166379a87b196040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610bce565b905081158015906104ee5750814210155b61050a5760405162461bcd60e51b815260040161025790610ec5565b6001600160a01b03811630146105325760405162461bcd60e51b815260040161025790610fd5565b6003546040516370a0823160e01b81526001600160a01b03909116906323b872dd908590309084906370a082319061056e908590600401610cec565b60206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610cb9565b6040518463ffffffff1660e01b81526004016105dc93929190610d00565b602060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190610c81565b507f18ce2512842fddee8c808fb717780a66007d1da9a942dd32625813c82d53c34282843060405161066293929190611153565b60405180910390a1505050565b60056020526000908152604090205460ff1681565b60015481565b6000546001600160a01b031633146106b45760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156106de5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b0382166107045760405162461bcd60e51b8152600401610257906110d3565b60038110158015610717575061016d8111155b6107335760405162461bcd60e51b815260040161025790610e68565b61074081620151806111a0565b61074a9042611188565b6001819055600280546001600160a01b0319166001600160a01b0385811691909117918290556040517fe2a3b7ba8269be3ca7ba4627f844bb9abd978e9b05d290dc89d4b107f9e3dda7936107a59390923092911690611153565b60405180910390a15050565b7f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb1281565b600254600160a01b900460ff16156107ff5760405162461bcd60e51b81526004016102579061106a565b8442111561081f5760405162461bcd60e51b815260040161025790610f1b565b604080518082018252600581526415985d5b1d60da1b6020918201526004549151600092610894927f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866927f8d03f8e727eaf836840d08da04cd9ecc9773328dd38f4a6c7b84a9ec2b88b7c79291309101610d7d565b60405160208183030381529060405280519060200120905060007f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb12898989896040516020016108e7959493929190610d51565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff161561092f5760405162461bcd60e51b815260040161025790610f52565b6000818152600560209081526040808320805460ff191660011790555161095a918591859101610cd1565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516109979493929190610da1565b6020604051602081039080840390855afa1580156109b9573d6000803e3d6000fd5b5050604051601f1901516000549092506001600160a01b0380841691161490506109f55760405162461bcd60e51b81526004016102579061111c565b60035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610a27908e908e90600401610d24565b602060405180830381600087803b158015610a4157600080fd5b505af1158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190610c81565b508a6001600160a01b03167f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef18b8b8b604051610ab793929190611172565b60405180910390a25050505050505050505050565b6002546001600160a01b031681565b6000546001600160a01b03163314610b055760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff1615610b2f5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b038116610b555760405162461bcd60e51b815260040161025790611024565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b6003546001600160a01b031681565b600254600160a01b900460ff1681565b6000546001600160a01b031681565b600060208284031215610bbc578081fd5b8135610bc7816111d5565b9392505050565b600060208284031215610bdf578081fd5b8151610bc7816111d5565b60008060408385031215610bfc578081fd5b8235610c07816111d5565b946020939093013593505050565b600080600080600080600060e0888a031215610c2f578283fd5b8735610c3a816111d5565b9650602088013595506040880135945060608801359350608088013560ff81168114610c64578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215610c92578081fd5b81518015158114610bc7578182fd5b600060208284031215610cb2578081fd5b5035919050565b600060208284031215610cca578081fd5b5051919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015610deb57858101830151858201604001528201610dcf565b81811115610dfc5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526036908201527f5661756c742e617070726f76654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b60208082526039908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a2067726160408201527f636544617973206d75737420626520332d333635206461797300000000000000606082015260800190565b60208082526036908201527f5661756c742e657865637574654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b6020808252601e908201527f5661756c742e636c61696d3a207369676e617475726520657870697265640000604082015260600190565b6020808252601390820152725661756c742e636c61696d3a207265706c617960681b604082015260600190565b60208082526036908201527f4d696772617461626c652e5f636f6e74726f6c6c65725f3a2063616e206f6e6c6040820152753c9031b0b63632b210313c9031b7b73a3937b63632b960511b606082015260800190565b6020808252602f908201527f5661756c742e657865637574654d6967726174696f6e3a206e6f74206465737460408201526e696e6174696f6e206164647265737360881b606082015260800190565b60208082526026908201527f4d696772617461626c652e736574436f6e74726f6c6c65723a20746f2030206160408201526564647265737360d01b606082015260800190565b60208082526043908201527f4d696772617461626c652e5f76616c69645f3a2063616e6e6f742070726f636560408201527f65642c207468697320636f6e747261637420686173206265656e206d696772616060820152621d195960ea1b608082015260a00190565b60208082526029908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a20746f2060408201526830206164647265737360b81b606082015260800190565b60208082526019908201527f5661756c742e636c61696d3a20756e617574686f72697a656400000000000000604082015260600190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526020830191909152604082015260600190565b6000821982111561119b5761119b6111bf565b500190565b60008160001904831182151516156111ba576111ba6111bf565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111ea57600080fd5b5056fea2646970667358221220309376e66ca21a54581da8ded1f86303ca0c78bd47254d1bdb5fb101169baa2364736f6c63430008010033\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI['abi'],\n      this.contractAddress\n    );\n  }\n  async mintDToken(accountAddress, ...args) {\n    //return this._transact('claim', args)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async mint(accountAddress, ...args) {\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    //console.log('res', res);\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    //console.log('toWormholeAddress', toWormholeAddress)\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\nimport { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const lpPoolFactory = (function () {\n  const lpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(lpPoolInstanceMap).includes(key)) {\n      return lpPoolInstanceMap[key];\n    } else {\n      let lpPool;\n      const { type } = getLpContractAddress(chainId, contractAddress);\n      console.log(`lp type: ${type}`);\n      if (type === 'slp') {\n        lpPool = new SlpPool(chainId, contractAddress, isProvider);\n      } else if (type === 'clp') {\n        lpPool = new ClpPool(chainId, contractAddress, isProvider);\n      }\n      lpPoolInstanceMap[key] = lpPool;\n      return lpPool;\n    }\n  };\n})();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","\n\nimport BigNumber from 'bignumber.js'\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n"],"sourceRoot":""}