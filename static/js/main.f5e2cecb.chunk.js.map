{"version":3,"sources":["lib/web3js/factory/web3.js","utils/LoadableComponent.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/utils.js","lib/web3js/v2/utils/convert.js","lib/web3js/v2/utils/network.js","lib/web3js/v2/utils/validate.js","lib/web3js/v2/utils/chain.js","lib/web3js/v2/contract/contract_base.js","lib/web3js/v2/contract/abis.js","lib/web3js/v2/contract/perpetual_pool.js","lib/web3js/v2/contract/perpetual_pool_router.js","lib/web3js/v2/contract/b_token.js","lib/web3js/v2/contract/l_token.js","lib/web3js/v2/contract/p_token.js","lib/web3js/v2/contract/woo_oracle.js","lib/web3js/v2/factory.js","lib/web3js/v2/utils/oracle.js","lib/web3js/v2/calculation/position.js","lib/web3js/v2/calculation/funding_rate.js","lib/web3js/v2/calculation/liquidity.js","lib/web3js/v2/api/mining_query_api.js","lib/web3js/v2/api/mining_transaction_api.js","lib/web3js/v2/api/api_globals.js","lib/web3js/v2/api/trade_query_api.js","lib/web3js/v2/api/trade_history_api.js","lib/web3js/v2/api/trade_transaction_api.js","lib/web3js/indexV2.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","model/Config.js","lib/web3js/api_wrapper/config_api.js","lib/web3js/api_wrapper/mining_query_api.js","lib/web3js/api_wrapper/mining_transaction_api.js","lib/web3js/api_wrapper/trade_query_api.js","lib/web3js/api_wrapper/trade_transaction_api.js","lib/web3js/api_wrapper/trade_history_api.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/databaseApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/api/apiGlobals.js","utils/utils.js","App.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Trading.js","model/Version.js","index.js","lib/web3js/config/database.js","lib/web3js/api/contractQueryApi.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/config/env.js","lib/web3js/v2/config/chain.js","lib/web3js/v2/config/contract.js","lib/web3js/v2/config/oracle.js"],"names":["metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","Error","Web3","web3Factory","web3InstanceMap","chainId","a","Object","keys","includes","console","log","getChainProviderUrl","providerUrl","providers","HttpProvider","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","ChainProviderUrls","provider_urls","getChainProviderUrlsConfig","res","filter","i","length","getContractAddressConfig","env","pool","bToken","pToken","lToken","dToken","MiningVault","initialBlock","bTokenSymbol","symbol","unit","version","getSlpContractAddressConfig","getClpContractAddressConfig","getClp2ContractAddressConfig","getLpContractAddressConfig","type","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","getDeriContractAddressConfig","Deri","Wormhole","getAnnualBlockNumberConfig","1","56","128","3","97","256","getRestServerConfig","getRedisWorkerQueneConfig","BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","isNaN","checkHttpServerIsAlive","url","fetch","ok","getAliveHttpServer","urls","MAX_VALUE","getNetworkName","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","DeriEnv","get","c","p","bTokenAddress","pTokenAddress","lTokenAddress","dTokenAdress","MinningVaultAddress","getMiningVaultContractAddress","pools","getAnnualBlockNumber","blockNumbers","parseInt","getSlpContractAddress","getClp2ContractAddress","getClpContractAddress","getLpContractAddress","getDeriContractAddress","deriAddress","wormholeAddress","getOracleUrl","addSymbolParam","getOracleInfo","retry","mode","cache","json","getBTCUSDPrice","responseJson","price","format","bigNumber","toFormat","replaceAll","numberToHex","validateArgs","every","parseFloat","getChainProviderUrls","MAX_GAS_AMOUNT","ContractBase","contractAddress","useInfura","this","getOrSet","method","_init","contract","methods","call","accountAddress","gas","estimateGas","from","tx","self","_transactionReceipt","resolve","reject","eth","getTransactionReceipt","error","receipt","setTimeout","status","errorMessage","_estimatedGas","txRaw","to","data","encodeABI","request","params","Promise","_getTransactionReceipt","perpetualPoolAbi","perpetualPoolRouterAbi","bTokenAbi","lTokenAbi","pTokenAbi","wooOracleAbi","PerpetualPool","contractAbi","bTokenLength","symbolLength","routerAddress","protocolFeeCollector","protocolFeeAccrued","Contract","all","getLengths","getAddresses","getParameters","_call","decimals0","minBToken0Ratio","minPoolMarginRatio","minInitialMarginRatio","minMaintenanceMarginRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","protocolFeeCollectRatio","bTokenId","swapperAddress","oracleAddress","decimals","discount","liquidity","pnl","cumulativePnl","symbolId","multiplier","feeRatio","fundingRateCoefficient","cumulativeFundingRate","tradersNetVolume","tradersNetCost","blockNumber","getBlock","volume","abs","eventName","fromBlock","events","amount","getPastEvents","toBlock","es","e","push","PerpetualPoolRouter","_transact","isMaximum","MAX_INT256","priceInfos","BToken","address","_balanceOf","allowance","gt","MAX_UINT256","processAsset","lastCumulativePnl","LToken","Array","isArray","map","processPosition","cost","lastCumulativeFundingRate","PToken","WooOracle","perpetualPoolFactory","instanceMap","key","perpetualPoolRouterFactory","bTokenFactory","lTokenFactory","pTokenFactory","wooOracleFactory","getOraclePrice","getOracleConfig","wooOracle","getPrice","calculateEntryPrice","eq","calculateLiquidationPrice","margin","dynamicCost","tmp","minus","plus","isOrderValid","marginHeld","liquidityUsed","minMargin","success","calculateFundingRate","processFundingRate","fundingRate","annualBlockCount","calculateBTokenDynamicEquities","bTokens","reduce","accum","b","isBToken0RatioValid","bToken0Ratio","totalDynamicEquity","dynamicEquity","lt","isPoolMarginRatioValid","userLiquidity","symbols","poolMarginRatio","totalCost","s","calculateMaxRemovableLiquidity","restLiquidity","getLiquidityInfo","getPoolConfig","perpetualPool","bTokenConfigList","getFilteredPoolConfigList","symbolConfigList","bTokenIdList","symbolIdList","getBToken","getAsset","parameterInfo","bTokenInfo","lTokenAsset","promises","getSymbol","index","poolLiquidity","maxRemovableShares","shares","getPoolLiquidity","db","databaseFactory","getValues","catch","err","addLiquidity","router","perpetualPoolRouter","validation","transaction","removeLiquidity","priceCache","_prices","split","set","val","timestamp","Date","now","fundingRateCache","resourceMap","resource","getSpecification","symbolInfo","bSymbol","getPositionInfo","getPosition","getMargins","getPositions","positionInfo","margins","positions","marginHeldBySymbol","unrealizedPnl","unrealizedPnlList","averageEntryPrice","liquidationPrice","getWalletBalance","balanceOf","balance","isUnlocked","getEstimatedFee","_getFundingRate","getEstimatedMargin","leverage","getFundingRateCache","poolconfigList","promiseList","bTokenInfoList","fundingRatePerBlock","liquidityUsedInAmount","getFundingRate","fundingRate0","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","getPoolBTokensBySymbolId","bTokensConfigList","symbolsConfigList","bTokenList","resultList","walletBalance","availableBalance","fetchJson","resp","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","transactionHash","getTradeHistoryOnline","_getBlockInfo","filters","owner","_getPastEvents","number","result","returnValues","item","unshift","getTradeHistory","tradeHistory","tradeFromBlock","tradeHistoryBlock","trim","tradeHistoryOnline","concat","sort","unlock","depositMargin","addMargin","withdrawMargin","removeMargin","tradeWithMargin","newVolume","orderValidation","trade","closePosition","negated","connectWallet","handleChainChanged","handleAccountChanged","accounts","account","on","location","reload","getUserWalletBalance","walletAddress","getBalance","fromWei","getLpLiquidityInfo","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","Config","makeObservable","observable","setAll","action","current","configs","isV2","total","cur","findIndex","getContractAddressConfig2","require","getPoolConfigListV2","getPoolConfigList","getLiquidityInfo2","getLiquidityInfoV2","getPoolLiquidity2","getPoolLiquidityV2","addLiquidity2","addLiquidityV2","removeLiquidity2","removeLiquidityV2","getSpecification2","getSpecificationV2","getPositionInfo2","getPositionInfoV2","getWalletBalance2","getWalletBalanceV2","isUnlocked2","isUnlockedV2","getEstimatedFee2","getEstimatedFeeV2","getFundingRate2","getFundingRateV2","getEstimatedFundingRate2","getEstimatedFundingRateV2","getLiquidityUsed2","getLiquidityUsedV2","getEstimatedLiquidityUsed2","getEstimatedLiquidityUsedV2","unlock2","unlockV2","depositMargin2","depositMarginV2","withdrawMargin2","withdrawMarginV2","tradeWithMargin2","tradeWithMarginV2","closePosition2","closePositionV2","getTradeHistory2","getTradeHistoryV2","calculateLiquidityUsed","calculateShareValue","lTokenTotalSupply","calculateMaxRemovableShares","lTokenBalance","shareValue","removable","calculateMarginHeld","calculatePnl","calculateMaxWithdrawMargin","held","poolMaxVolume","message","getUserInfo","userAddress","deadline","nonce","v","r","valid","getUserInfoHarvest","harvestLp","harvestTrade","lp","getUserInfoTotal","getUserInfoAll","userInfo","userInfoHarvest","userInfoTotal","assign","getPoolInfoApy","apy","volume1h","volume24h","getLpPoolInfoApy","apy2","getUserInfoInPool","getUserInfoAllForAirDrop","databaseAirdropFactory","v1","r1","s1","v2","r2","s2","baseToken","processLiquidateEvent","national","getLiquidateHistoryOnline","getHttpBase","getFundingRateCache2","liquidateFromBlock","liquidateHistoryBlock","liquidateHistoryOnline","pPool","maxWithdrawMargin","_transactPool","totalSupply","getStateValues","mintDToken","miningVaultAddress","miningVault","miningVaultPoolFactory","wsOnPromise","ws","event","JSON","parse","sendTradeTxToWorkerQuene","methodCall","wsInstance","send","res2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","_accountAddress","_price","_interval","_update","update","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","_ws","io","transports","path","id","versionKey","formatAddress","substr","formatBalance","eqInNumber","str1","str2","isLP","isSushiLP","isCakeLP","sessionStorageKey","storeVersion","sessionStorage","setItem","restoreVersion","getItem","storeConfig","stringify","getConfigFromStore","DesktopApp","MobileApp","App","isBrowser","isMobile","Wallet","detail","isConnected","connect","loadWalletBalance","wallet","chainInfo","supported","setDetail","makeAutoObservable","supportV2","computed","supportChain","Oracle","timeType","kData","paused","listeners","already","setIndex","initWebSocket","WebSocket","withCredentials","emit","obj","toUpperCase","low","Number","high","open","close","time_type","unsubscribeBars","setSymbol","setTimeType","listener","callback","history","el","setPause","Position","spec","mockPositionInfo","position","interval","load","setInfo","History","Trading","slideIncrementMargin","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setHistory","setSlideMargin","fundingRateTip","volumeDisplay","isNegative","isPositive","configInfo","oracle","contractInfo","historyInfo","defaultConfig","getDefaultConfig","find","loadByConfig","changed","isV1","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","pos","setPaused","Math","currentSymbolMarginHeld","otherMarginHeld","incrementMarginHeld","totalMarginHeld","available","exchanged","multipliedBy","dynBalance","totalContractValue","Version","setCurrent","versionFromSession","notSave","trading","ReactDOM","render","StrictMode","document","getElementById","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","parameters","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","clp2Pool","clp2PoolFactory","clpPool","clpPoolFactory","isProvider","POOL_ABI","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","priceDelayAllowance","signed","getGasPrice","gasPrice","args1","args2","CONTRACT_ABI","BTokenContract","_balance","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","keyArray","updateProviderUrl","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriFactory","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","miningVaultRouterFactory","_deriEnv","poolConfigList","check","getOracleConfigList","filteredByChainId"],"mappings":"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","file":"static/js/main.f5e2cecb.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return async(chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    console.log(\n      `==== web3Factory(${chainId}), please caution the access limits ===`\n    );\n    const providerUrl = await getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","export const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '5288684',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool: '0x919F97417857781f754e00CCCD9100f78B759818',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7475766',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11949433',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11860070',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '2557914',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n        version: 'v1',\n      },\n    ];\n  }\n  // develop environment\n  // console.log('-- test ---')\n  return [\n    {\n      pool: '0x372b640A00a0A6B73381e9363A39644a712cCc37',\n      bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n      pToken: '0xB9113758D771750e9E8ECb359A19689eC89AC1a5',\n      lToken: '0xC727a10Be4740441BE74960296097aF39D701980',\n      initialBlock: '9378545',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n      version: 'v1',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [\n    ];\n  }\n};\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n      }\n    ]\n  } else {\n    return []\n  }\n}\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n        type: 'slp',\n      },\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n        type: 'clp',\n      },\n      {\n        pool: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n        type: 'clp2',\n      },\n    ];\n  } else {\n    return [\n    ];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress= (chainId) => {\n  const configs = [\n      {\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n        chainId: '56'\n      }\n    ]\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter\n  } else {\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\n  }\n\n}\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getAnnualBlockNumberConfig = () => ({\n  1: '2367422',\n  56: '10497304',\n  128: '10511369',\n  3: '2367422',\n  97: '10497304',\n  256: '10511369',\n});\n","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    //return 'https://api.deri.finance';\n    return 'https://alphaapi.deri.finance';\n  } else {\n    // for test\n    //return 'https://apitest.deri.finance';\n    //return 'http://localhost:8082';\n    return 'https://alphaapitest.deri.finance';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getClp2ContractAddressConfig,\n  getLpContractAddressConfig,\n  getAnnualBlockNumberConfig,\n  getDeriContractAddressConfig,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n//const np = () => {}\n//const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\n// fetchWithTimeout\n// const fetchWithTimeout = (url, delay=2000, options={}, onTimeout=np) => {\n//   const timer = new Promise((resolve) => {\n//     setTimeout(resolve, delay, {\n//       timeout: true,\n//     });\n//   });\n//   return Promise.race([fetch(url, options), timer]).then((response) => {\n//     if (response.timeout) {\n//       onTimeout();\n//     }\n//     return response;\n//   });\n// };\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    //const response = await fetch(url);\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    default:\n      throw new Error('The networkId is not valid');\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  // console.log(\n  //   `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  // );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    return 'https://oracle2.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  let url = getOracleUrl(chainId, poolAddress);\n  console.log('oracle url', url);\n  let retry = 2;\n  //let timeout = 1000;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    //if (res && !res.timeout) {\n    if (res.ok) {\n      break;\n    }\n    //console.log('get oracle info timeout')\n    retry -= 1;\n    //timeout += 800;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  const responseJson = await getOracleInfo(chainId, poolAddress);\n  let price = responseJson.price;\n  if (!price) {\n    price = '0';\n  }\n  return deriToNatural(responseJson.price).toString();\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getAliveHttpServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256']\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`)\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`)\n  }\n};","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\n// == bg\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const fromWei = (value, unit='ether') => Web3.utils.fromWei(value, unit)\n\nexport const toWei = (value, unit='ether') => Web3.utils.toWei(value, unit)\n\nexport const toNatural = (value, num = 0) => BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\n// == convert\nexport const numberToHex = (value) => Web3.utils.numberToHex(value);","// == func\n// const np = () => {}\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const fetchWithTimeout = (url, options = {}) => {\n  const { timeout = 1200, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((resolve) => {\n      setTimeout(() => {\n        // reject(\n        //   new Error(\n        //     `Request for ${url} timed out after ${timeout} ms`,\n        //   ),\n        // )\n        resolve({timeout:true})\n      }, timeout)\n    }),\n  ])\n}\n\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n  return false;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    //console.log(url)\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n","import Web3 from 'web3';\n\n// validate\nexport const normalizeChainId = (chainId) => {\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256'];\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`);\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`);\n  }\n};\n\nexport const validateArgs = (...args) => args.every((i) => !isNaN(parseFloat(i)));","import {\n  getChainProviderUrls,\n  getAnnualBlockNumberConfig,\n} from '../config';\nimport { normalizeChainId } from './validate';\nimport { getAliveHttpServer } from './network';\n\nexport const getChainProviderUrl = async (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrls(chainId);\n  if (urls.length > 0) {\n    return await getAliveHttpServer(urls);\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  } else {\n    throw new Error(`Invalid annual block number with chainId: ${chainId}`);\n  }\n};\n","import { metaMaskWeb3, web3Factory } from '../factory';\nimport { numberToHex } from '../utils';\n\nconst MAX_GAS_AMOUNT = 832731;\n\nexport class ContractBase {\n  constructor(chainId, contractAddress, useInfura) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.useInfura = useInfura\n  }\n\n  async _init() {\n    if (this.useInfura) {\n      this.web3 = await web3Factory.getOrSet(this.chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while (retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        this.web3 = null\n        console.log(err)\n      }\n    }\n    if (retry === 0 && !res) {\n      console.log(`method call '${method} ${args}' failed with max retry 3.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    await this._init()\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (error) {\n        // ignore the metamask error\n      }\n    }\n    if (gas == 0 || gas > 10000000) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: numberToHex(gas),\n        value: numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n    //return await this.contract.methods[method](...args).send({from: accountAddress})\n  }\n\n}\n","\n/* eslint-disable */\nexport const perpetualPoolAbi = [ { \"inputs\": [ { \"internalType\": \"uint256[9]\", \"name\": \"parameters\", \"type\": \"uint256[9]\" }, { \"internalType\": \"address[4]\", \"name\": \"addresses\", \"type\": \"address[4]\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"reward\", \"type\": \"uint256\" } ], \"name\": \"Liquidate\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"collector\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"ProtocolFeeCollection\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" } ], \"name\": \"Trade\", \"type\": \"event\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"targetPool\", \"type\": \"address\" } ], \"name\": \"approvePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"collectProtocolFee\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourcePool\", \"type\": \"address\" } ], \"name\": \"executePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getAddresses\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"routerAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"protocolFeeCollector\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBToken\", \"outputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBTokenOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengths\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getParameters\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"decimals0\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"minBToken0Ratio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minPoolMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minInitialMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minMaintenanceMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"maxLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidationCutRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"protocolFeeCollectRatio\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getProtocolFeeAccrued\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbol\", \"outputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbolOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const perpetualPoolRouterAbi = [ { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"liquidatorQualifierAddress\", \"type\": \"address\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"ExecuteMigration\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"PrepareMigration\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"multiplier\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"approveMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"claimNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"controller\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourceRouter\", \"type\": \"address\" } ], \"name\": \"executeMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"liquidateWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"liquidatorQualifier\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationDestination\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationTimestamp\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"graceDays\", \"type\": \"uint256\" } ], \"name\": \"prepareMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"qualifierAddress\", \"type\": \"address\" } ], \"name\": \"setLiquidatorQualifier\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newController\", \"type\": \"address\" } ], \"name\": \"setNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"poolAddress\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"tradeWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const bTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" } ], \"stateMutability\": \"pure\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const lTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"name\": \"UpdateAsset\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getAsset\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getAssets\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"asset\", \"type\": \"tuple\" } ], \"name\": \"updateAsset\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const pTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numSymbols_\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"UpdateMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"name\": \"UpdatePosition\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getMargin\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getMargins\", \"outputs\": [ { \"internalType\": \"int256[]\", \"name\": \"\", \"type\": \"int256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getPosition\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getPositions\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numSymbols\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumSymbols\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"updateMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"int256[]\", \"name\": \"margins\", \"type\": \"int256[]\" } ], \"name\": \"updateMargins\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"position\", \"type\": \"tuple\" } ], \"name\": \"updatePosition\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const wooOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-disable */","import { ContractBase } from './contract_base'\nimport { perpetualPoolAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\n\nexport class PerpetualPool extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = perpetualPoolAbi\n\n    this.bTokenLength = 0\n    this.symbolLength = 0\n\n    this.lTokenAddress = ''\n    this.pTokenAddress = ''\n    this.routerAddress = ''\n    this.protocolFeeCollector = ''\n\n    this.protocolFeeAccrued = 0\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  async _update() {\n    await Promise.all([\n      this.getLengths(),\n      this.getAddresses(),\n      this.getParameters(),\n    ]);\n  }\n\n  async getLengths() {\n    try {\n      const res = await this._call('getLengths')\n      //console.log(res[0])\n      if (res[0] && res[1]) {\n        this.bTokenLength = parseInt(res[0])\n        this.symbolLength = parseInt(res[1])\n      }\n    } catch(err) {\n      throw new Error(`PerpetualPool#_getLength error: ${err}`)\n    }\n  }\n  async getAddresses() {\n    try {\n      const res = await this._call('getAddresses')\n      this.lTokenAddress = res.lTokenAddress\n      this.pTokenAddress = res.pTokenAddress\n      this.routerAddress = res.routerAddress\n      this.protocolFeeCollector = res.protocolFeeCollector\n    } catch (err) {\n      throw new Error(`PerpetualPool#_getAddress error: ${err}`)\n    }\n  }\n  async getParameters() {\n    const res = await this._call('getParameters')\n    return {\n      decimals0: res.decimals0,\n      minBToken0Ratio: deriToNatural(res.minBToken0Ratio),\n      minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n      minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n      minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n      minLiquidationReward: deriToNatural(res.minLiquidationReward),\n      maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n      liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n      protocolFeeCollectRatio: deriToNatural(res.protocolFeeCollectRatio),\n    };\n  }\n  async getProtocolFeeAccrued() {\n    const res =  await this._call('getProtocolFeeAccrued')\n    this.protocolFeeAccrued = deriToNatural(res)\n  }\n  async getBToken(bTokenId) {\n    try {\n      //bTokenId = parseInt(bTokenId)\n      const res = await this._call('getBToken', [bTokenId]);\n      return {\n        bTokenAddress: res.bTokenAddress,\n        swapperAddress: res.bTokenAddress,\n        oracleAddress: res.oracleAddress,\n        decimals: res.decimals,\n        discount: deriToNatural(res.discount),\n        price: deriToNatural(res.price),\n        liquidity: deriToNatural(res.liquidity),\n        pnl: deriToNatural(res.pnl),\n        cumulativePnl: deriToNatural(res.cumulativePnl),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getBToken error: ${err}`);\n    }\n  }\n  async getBTokenOracle(bTokenId) {\n    //bTokenId = parseInt(bTokenId)\n    return await this._call('getBTokenOracle', [bTokenId])\n  }\n  async getSymbol(symbolId) {\n    //symbolId = parseInt(symbolId)\n    try {\n      const res =  await this._call('getSymbol', [symbolId])\n      return {\n        symbol: res.symbol,\n        oracleAddress: res.oracleAddress,\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        price: deriToNatural(res.price),\n        cumulativeFundingRate: deriToNatural(res.cumulativeFundingRate),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getSymbol error: ${err}`);\n    }\n  }\n  async getSymbolOracle(symbolId) {\n    //symbolId = parseInt(symbolId)\n    return await this._call('getSymbolOracle', [symbolId])\n  }\n\n  // trade history query methods\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    let amount\n    if (['56', '97'].includes(this.chainId)) {\n      amount = 999\n    } else {\n      amount = 4999\n    }\n    if ((fromBlock + amount) > to) {\n      amount = to - fromBlock\n    }\n    while (fromBlock <= to) {\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock: fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if ((fromBlock + amount) > to) {\n        amount = to - fromBlock\n      }\n    }\n    return events;\n  }\n}","import { ContractBase } from './contract_base'\nimport { perpetualPoolRouterAbi} from './abis';\nimport { naturalToDeri } from '../utils'\nimport { MAX_INT256 } from '../config';\n\nexport class PerpetualPoolRouter extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = perpetualPoolRouterAbi\n    this.poolAddress = ''\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  // === query ===\n  async pool() {\n    this.poolAddress = await this._call('pool');\n    return this.poolAddress\n  }\n\n  // === transaction ===\n  async addLiquidity(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidity',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeLiquidity(accountAddress, bTokenId, amount, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async addMargin(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMargin',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeMargin(accountAddress, bTokenId, amount, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      console.log('->', MAX_INT256)\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async trade(accountAddress, symbolId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'trade',\n      [symbolId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  // with prices\n  async addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidityWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n  async removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMarginWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  async removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async tradeWithPrices(accountAddress, symbolId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'tradeWithPrices',\n      [symbolId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  // async liquidate(acountAddress) {\n  //   if (!this.poolAddress) {\n  //     await this.pool()\n  //   }\n  //   return await this._transact(\n  //     'liquidate',\n  //     [accountAddress],\n  //     accountAddress\n  //   );\n  // }\n\n}","import { ContractBase } from './contract_base'\nimport { bTokenAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\nimport { MAX_UINT256} from '../config'\n\n\nexport class BToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura);\n    this.contractAbi = bTokenAbi;\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init();\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  // === query ===\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balanceOf(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balanceOf(address) {\n    const [res, decimals] = await Promise.all([\n      this._balanceOf(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  async totalSupply() {\n    const res = await this._call('totalSupply');\n    return deriToNatural(res);\n  }\n\n  async isUnlocked(accountAddress, poolAddress) {\n    const allowance = await this._call('allowance', [\n      accountAddress,\n      poolAddress,\n    ]);\n    return bg(allowance).gt(0);\n  }\n\n  // === transaction ===\n  async unlock(accountAddress, poolAddress) {\n    return await this._transact(\n      'approve',\n      [poolAddress, MAX_UINT256],\n      accountAddress\n    );\n  }\n\n  // async transfer() {\n  // call transfer\n  // }\n}","import { ContractBase } from './contract_base'\nimport { lTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processAsset = (res) => {\n  return {\n    liquidity: deriToNatural(res[0]),\n    pnl: deriToNatural(res[1]),\n    lastCumulativePnl: deriToNatural(res[2]),\n  }\n}\nexport class LToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = lTokenAbi\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  // === query ===\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async pool() {\n    return await this._call('pool');\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getAsset(accountAddress, bTokenId) {\n    const res = await this._call('getAsset', [accountAddress, bTokenId]);\n    if (Array.isArray(res)) {\n      return processAsset(res)\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress} ${bTokenId})`)\n    }\n  }\n  async getAssets(accountAddress) {\n    const res = await this._call('getAssets', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map(i => processAsset(i))\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress})`)\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from './contract_base'\nimport { pTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processPosition = (res) => {\n  return {\n    volume: deriToNatural(res.volume),\n    cost: deriToNatural(res.cost),\n    lastCumulativeFundingRate: deriToNatural(res.lastCumulativeFundingRate),\n  }\n}\nexport class PToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = pTokenAbi\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  // === query ===\n  async pool() {\n    return await this._call('pool');\n  }\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getMargin(accountAddress, symbolId) {\n    const res = await this._call('getMargin', [accountAddress, symbolId]);\n    return deriToNatural(res)\n  }\n  async getMargins(accountAddress) {\n    const res = await this._call('getMargins', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => deriToNatural(i))\n    }\n  }\n  async getPosition(accountAddress, symbolId) {\n    const res = await this._call('getPosition', [accountAddress, symbolId]);\n    if (Array.isArray(res)) {\n      return processPosition(res)\n    } else {\n      throw new Error(`PToken#getMargin: invalid result with (${accountAddress})`)\n    }\n  }\n  async getPositions(accountAddress) {\n    const res = await this._call('getPositions', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => processPosition(i))\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from \"./contract_base\";\nimport { wooOracleAbi } from './abis';\n\nexport class WooOracle extends ContractBase {\n  constructor(chainId, address, symbol, useInfura) {\n    super(chainId, address, useInfura)\n    this.contractAbi = wooOracleAbi\n    this.symbol = symbol\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  async getPrice() {\n    return await this._call('_I_');\n  }\n}","import Web3 from 'web3';\nimport {\n  PerpetualPool,\n  PerpetualPoolRouter,\n  BToken,\n  LToken,\n  PToken,\n  WooOracle,\n} from './contract';\nimport { getChainProviderUrl } from './utils/chain';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    if (typeof window.ethereum !== undefined) {\n      web3Instance = new Web3(window.ethereum);\n      return web3Instance;\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return {\n    async getOrSet(chainId) {\n      if (Object.keys(web3InstanceMap).includes(chainId)) {\n        return web3InstanceMap[chainId];\n      }\n      console.log(\n        `==== web3Factory(${chainId}), please caution the access limits ===`\n      );\n      const providerUrl = await getChainProviderUrl(chainId);\n      web3InstanceMap[chainId] = new Web3(\n        new Web3.providers.HttpProvider(providerUrl)\n      );\n      return web3InstanceMap[chainId];\n    },\n  };\n})();\n\nexport const perpetualPoolFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PerpetualPool(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const perpetualPoolRouterFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PerpetualPoolRouter(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new BToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new LToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const wooOracleFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, symbol, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new WooOracle(chainId, address, symbol, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n","import { getPoolConfig, getOracleConfig } from '../config';\nimport { DeriEnv } from '../../config'\nimport { wooOracleFactory } from '../factory'\nimport { deriToNatural } from './convert'\nimport { normalizeChainId } from './validate'\n\nexport const getOracleUrl = (poolAddress, symbolId) => {\n  const env = DeriEnv.get();\n  const { symbol } = getPoolConfig(poolAddress, null, symbolId);\n  const addSymbolParam = (url, symbol = 'BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle4.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (poolAddress, symbolId) => {\n  let url = getOracleUrl(poolAddress, symbolId);\n  //console.log('oracle url', url);\n  let retry = 2;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    if (res.ok) {\n      break;\n    }\n    retry -= 1;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\n// export const getOraclePrice = async (poolAddress, symbolId) => {\n//   const responseJson = await getOracleInfo(poolAddress, symbolId);\n//   let price = responseJson.price;\n//   if (!price) {\n//     price = '0';\n//   }\n//   return deriToNatural(responseJson.price).toString();\n// };\n\nexport const getOraclePrice = async(chainId, symbol, useInfura=false) => {\n  chainId = normalizeChainId(chainId)\n  const config = getOracleConfig(chainId, symbol)\n  if (config && config.address) {\n    const wooOracle = wooOracleFactory(chainId, config.address, symbol, useInfura)\n    return deriToNatural(await wooOracle.getPrice()).toString()\n  }\n}\n","import { bg, max } from '../utils';\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\n// export const calculateMaxWithdrawMargin = (\n//   price,\n//   volume,\n//   margin,\n//   cost,\n//   multiplier,\n//   minInitialMarginRatio\n// ) => {\n//   if (volume.eq(0)) {\n//     return margin;\n//   }\n//   const held = calculateMarginHeld(\n//     price,\n//     volume,\n//     multiplier,\n//     minInitialMarginRatio\n//   );\n//   const pnl = calculatePnl(price, volume, multiplier, cost);\n//   const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n//   return withdrawable;\n// };\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  dynamicCost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier)\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier);\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  //price,\n  margin,\n  marginHeld,\n  liquidity,\n  liquidityUsed,\n  // multiplier,\n  // minPoolMarginRatio,\n  // newVolume,\n) => {\n  const minMargin = marginHeld;\n  // const poolMaxVolume = liquidity.minus(liquidityUsed)\n  //   .div(minPoolMarginRatio)\n  //   .div(price)\n  //   .div(multiplier);\n  if (margin.gte(minMargin)) {\n    // if (\n    //   newVolume.lte(poolMaxVolume) &&\n    //   newVolume.gte(poolMaxVolume.negated())\n    // ) {\n    if (liquidity.minus(liquidityUsed).gte(0)) {\n      return { success: true };\n    }\n    return { success: false, error: 'Pool has insufficient liquidity' };\n  }\n  return { success: false, error: 'Trader has insufficient margin' };\n};\n","import { bg, getAnnualBlockNumber, validateArgs } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(multiplier)\n      .times(poolMarginRatio)\n      .div(liquidity)\n      .abs();\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio,\n    ];\n    throw new Error(`calculateLiquidityUsed: invalid args: ${args}`);\n  }\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(price)\n      .times(multiplier)\n      .times(multiplier)\n      .times(fundingRateCoefficient)\n      .div(liquidity);\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    ];\n    throw new Error(`calculateFundingRate: invalid args: ${args}`);\n  }\n};\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils'\n\nexport const calculateBTokenDynamicEquities = (bTokens) => {\n  //const dynamicEquities = bTokens.map((b) => bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n  //const totalDynamicEquity = dynamicEquities.reduce((accum, d) => accum.plus(d), bg(0))\n  const totalDynamicEquity = bTokens.reduce((accum, b) => accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)), bg(0))\n  return totalDynamicEquity\n}\n\nexport const isBToken0RatioValid = (bTokens, bTokenId, amount, bToken0Ratio) => {\n  bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).plus(amount)\n  const totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  const b = bTokens['0']\n  const dynamicEquity = bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)\n  //console.log('estimatedBToken0Ratio',dynamicEquity.div(totalDynamicEquity).toString())\n  // use 1 as efficient\n  if (\n    !totalDynamicEquity.eq(0) &&\n    dynamicEquity.div(totalDynamicEquity).times('1').lt(bToken0Ratio)\n  ) {\n    return { success: false, error: 'Trader has insufficient bToken0' };\n  } else {\n    return { success: true };\n  }\n}\n\nexport const isPoolMarginRatioValid = (bTokens, bTokenId, amount, userLiquidity, symbols, poolMarginRatio) => {\n  if (bg(amount).gte(userLiquidity)) {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(userLiquidity)\n  } else {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(amount)\n  }\n  let totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  let totalCost = bg(0)\n  for (let i=0; i<symbols.length; i++) {\n    const s = symbols[i]\n    if (!bg(s.tradersNetVolume).eq(0)) {\n      const cost = bg(s.tradersNetVolume).times(s.price).times(s.multiplier)\n      totalDynamicEquity = totalDynamicEquity.plus(s.tradersNetCost).minus(cost)\n      totalCost = totalCost.plus(cost.abs())\n    }\n  }\n  //console.log(totalDynamicEquity.toString(), totalCost.toString())\n  if (\n    !totalCost.eq(0) &&\n    totalDynamicEquity.div(totalCost).times('1').lt(poolMarginRatio)\n  ) {\n    return { success: false, error: 'Trader has insufficient liquidity' };\n  } else {\n    return { success: true };\n  }\n}\n\n\nexport const calculateMaxRemovableLiquidity = (\n  bToken,\n  userLiquidity,\n  cost,\n  pnl,\n  restLiquidity,\n  minPoolMarginRatio,\n) => {\n  if (bg(cost).eq(0)) {\n    return userLiquidity;\n  } else {\n    return max(\n      min(\n        bToken.liquidity.minus(\n          minPoolMarginRatio\n            .times(cost)\n            .plus(pnl)\n            .minus(restLiquidity)\n            .div(bToken.price)\n            .div(bToken.discount)\n        ).times('0.98'),\n        userLiquidity\n      ),\n      bg(0)\n    );\n  }\n};","import { lTokenFactory, perpetualPoolFactory } from '../factory'\nimport { getPoolConfig, getFilteredPoolConfigList} from '../config'\nimport { bg, deriToNatural } from '../utils'\nimport { calculateMaxRemovableLiquidity } from '../calculation'\nimport { databaseFactory } from '../../factory/contracts';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n  useInfura,\n) => {\n  try {\n    const {lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    const lToken = lTokenFactory(chainId, lTokenAddress, useInfura);\n\n    const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n\n    const [parameterInfo, bTokenInfo, lTokenAsset ] = await Promise.all([\n      perpetualPool.getParameters(),\n      perpetualPool.getBToken(bTokenId),\n      lToken.getAsset(accountAddress, bTokenId),\n    ])\n    const { minPoolMarginRatio } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n\n    const cost = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).abs())\n    }, bg(0))\n    const pnl = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).minus(s.tradersNetCost))\n    }, bg(0))\n    const restLiquidity = bTokens.reduce((accum, b, index) => {\n      if (index === parseInt(bTokenId)) {\n        return accum.plus(b.pnl)\n      } else {\n        return accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n      }\n    }, bg(0))\n\n    const { liquidity: poolLiquidity } = bTokenInfo;\n    const { liquidity } = lTokenAsset\n    const maxRemovableShares = calculateMaxRemovableLiquidity(bTokens[bTokenId], liquidity, cost, pnl, restLiquidity, minPoolMarginRatio)\n    return {\n      //totalSupply: lTokenTotalSupply.toString(),\n      poolLiquidity: poolLiquidity.toString(),\n      // shares: liquidity.toString(),\n      // shareValue: '1',\n      // maxRemovableShares: liquidity.toString()\n      shares: liquidity.toString(),\n      maxRemovableShares: maxRemovableShares.toString()\n    };\n  } catch (err) {\n    console.log(err)\n  }\n  return {\n    poolLiquidity: '',\n    shares: '',\n    maxRemovableShares: '',\n  };\n};\n\nexport const getPoolLiquidity = async (chainId, poolAddress, bTokenId) => {\n  // const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n  // const res = await perpetualPool.getBToken(bTokenId)\n  // return res.liquidity.toString()\n\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.${bTokenId}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol:'',\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n  return {\n    liquidity: '',\n    symbol:'',\n  };\n};","import { getFilteredPoolConfigList, getPoolConfig } from '../config'\nimport { perpetualPoolRouterFactory, perpetualPoolFactory, lTokenFactory } from '../factory'\nimport { getOracleInfo } from '../utils'\nimport { isBToken0RatioValid, isPoolMarginRatioValid } from '../calculation'\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const tx = await perpetualPoolRouter.addLiquidity(accountAddress, bTokenId, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n      res = { success: false, error: validation.error};\n   }\n   return res\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum=false,\n) => {\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const {lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n  const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n   let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n   promises = []\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       const tx = await perpetualPoolRouter.removeLiquidity(accountAddress, bTokenId, amount, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const addLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const promises = symbolList.map(async(s) => {\n        return await getOracleInfo(poolAddress, s)\n      })\n      const prices = await Promise.all(promises)\n      const priceInfos = prices.map((p, index) => {\n        return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n      })\n      const tx = await perpetualPoolRouter.addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const removeLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const {router:routerAddress, lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   for (let i=0; i<symbolList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       promises = symbolList.map(async(s) => {\n         return await getOracleInfo(poolAddress, s)\n       })\n       const prices = await Promise.all(promises)\n       const priceInfos = prices.map((p, index) => {\n         return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n       })\n       const tx = await perpetualPoolRouter.removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n","export const priceCache = (function(){\n  let _prices = {}\n  return {\n    get(poolAddress, symbolId) {\n      const key = `${poolAddress}.${symbolId}`\n      if (Object.keys(_prices).includes(key)) {\n        const [price, ] = _prices[key].split('|')\n        //if (parseInt(timestamp) - Date.now() < 10000) {\n          return price\n        //}\n      }\n      console.log('please init priceCache first')\n    },\n    // update(chainId, poolAddress, symbolId) {\n    //   // place holder\n    // },\n    set(poolAddress, symbolId, val) {\n      if (!isNaN(parseFloat(val))) {\n        const timestamp = Date.now().toString()\n        _prices[`${poolAddress}.${symbolId}`] = `${val}|${timestamp}`\n      }\n    }\n  }\n})()\n\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress, symbolId) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`fundingRateCache: key is not in exist: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, symbolId, resource) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();","import { perpetualPoolFactory, bTokenFactory, pTokenFactory } from '../factory';\nimport { getFilteredPoolConfigList, getPoolConfig} from '../config'\nimport {\n  calculateEntryPrice,\n  calculateLiquidationPrice,\n  calculateFundingRate,\n  processFundingRate,\n} from '../calculation';\nimport { getOraclePrice, bg, min, max } from '../utils'\nimport { fundingRateCache, priceCache } from '../api/api_globals';\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    const {symbol, bTokenSymbol } = getPoolConfig(poolAddress, bTokenId, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const [symbolInfo, parameterInfo] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n    ])\n    const { multiplier, feeRatio, fundingRateCoefficient} = symbolInfo\n    const {\n      minPoolMarginRatio,\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n      minLiquidationReward,\n      maxLiquidationReward,\n      liquidationCutRatio,\n      protocolFeeCollectRatio,\n    } = parameterInfo\n    return {\n      symbol: symbol,\n      bSymbol: bTokenSymbol,\n      multiplier: multiplier.toString(),\n      feeRatio: feeRatio.toString(),\n      fundingRateCoefficient: fundingRateCoefficient.toString(),\n      minPoolMarginRatio: minPoolMarginRatio.toString(),\n      minInitialMarginRatio: minInitialMarginRatio.toString(),\n      minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n      //minAddLiquidity: minAddLiquidity.toString(),\n      //redemptionFeeRatio: redemptionFeeRatio.toString(),\n      minLiquidationReward: minLiquidationReward.toString(),\n      maxLiquidationReward: maxLiquidationReward.toString(),\n      liquidationCutRatio: liquidationCutRatio.toString(),\n      protocolFeeCollectRatio: protocolFeeCollectRatio.toString(),\n    }\n  } catch (err) {\n    console.log(err)\n  }\n  return {\n    symbol: '',\n    bSymbol: '',\n    multiplier: '',\n    feeRatio: '',\n    fundingRateCoefficient: '',\n    minPoolMarginRatio: '',\n    minInitialMarginRatio: '',\n    minMaintenanceMarginRatio: '',\n    minLiquidationReward: '',\n    maxLiquidationReward: '',\n    liquidationCutRatio: '',\n    protocolFeeCollectRatio: '',\n  }\n};\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId, useInfura) => {\n  try {\n    const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    //console.log('bTokenList', bTokenList)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const {pToken: pTokenAddress, symbol } = getPoolConfig(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    const [price, symbolInfo, parameterInfo, positionInfo, margins, positions ] = await Promise.all([\n      //getOraclePrice(poolAddress, symbolId),\n      getOraclePrice(chainId, symbol, useInfura),\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n      pToken.getPosition(accountAddress, symbolId),\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      //pToken.getMargin(accountAddress, symbolId),\n    ])\n    priceCache.set(poolAddress, symbolId, price)\n    const { volume, cost } = positionInfo\n    const { multiplier } = symbolInfo\n    const {\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n    } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).times(minInitialMarginRatio).abs())\n    }, bg(0))\n    const marginHeldBySymbol = bg(volume).abs().times(multiplier).times(price).times(minInitialMarginRatio)\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    //\n    //const unrealizedPnl = bg(positions[symbolId].volume).times(price).times(multiplier).minus(positions[symbolId].cost)\n    const unrealizedPnl = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(s.price).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    const unrealizedPnlList = symbols.map((s, index) => {\n      return [s.symbol, bg(s.price).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost).toString()]\n    })\n\n    const totalCost = positions.reduce((accum, a) => {\n      return accum.plus(bg(a.cost))\n    }, bg(0))\n    const dynamicCost = symbols.reduce((accum, a, index) => {\n      if (index !== parseInt(symbolId)) {\n        return accum.plus(bg(positions[index].volume).times(a.price).times(a.multiplier))\n      } else {\n        return accum\n      }\n    }, bg(0))\n    //console.log('cost', costTotal.toString())\n  return {\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n      margin: margin.toString(),\n      marginHeld: marginHeld.toString(),\n      marginHeldBySymbol: marginHeldBySymbol.toString(),\n      unrealizedPnl: unrealizedPnl.toString(),\n      unrealizedPnlList,\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        totalCost,\n        dynamicCost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    volume: '',\n    averageEntryPrice: '',\n    margin: '',\n    marginHeld: '',\n    unrealizedPnl: '',\n    liquidationPrice: '',\n  };\n}\n\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n  useInfura,\n) => {\n  const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\n  const balance = await bTokenFactory(chainId, bTokenAddress, useInfura).balanceOf(accountAddress)\n  return balance.toString()\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId, useInfura) => { \n  const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\n  const bToken = await bTokenFactory(chainId, bTokenAddress, useInfura)\n  return bToken.isUnlocked(accountAddress, poolAddress)\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId, useInfura) => {\n  let price = priceCache.get(poolAddress, symbolId)\n  const {symbol} = getPoolConfig(poolAddress, null, symbolId)\n  if (!price) {\n    //price = await getOraclePrice(poolAddress, symbolId)\n    price = await getOraclePrice(chainId, symbol, useInfura)\n    priceCache.set(poolAddress, symbolId, price)\n  }\n  let cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n  if (!cache || !cache.multiplier) {\n    await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n  }\n  const { multiplier, feeRatio } = cache;\n  //console.log(volume, price, multiplier, feeRatio)\n  return bg(volume).abs().times(price).times(multiplier).times(feeRatio).toString()\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n  useInfura,\n) => {\n  const {symbol} = getPoolConfig(poolAddress, null, symbolId)\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n  const [price, symbolInfo ] = await Promise.all([\n    //getOraclePrice(poolAddress, symbolId),\n    getOraclePrice(chainId, symbol, useInfura),\n    perpetualPool.getSymbol(symbolId),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const {multiplier} = symbolInfo\n  //console.log('m',multiplier.toString())\n  return bg(volume).abs().times(price).times(multiplier).div(bg(leverage)).toString()\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  return fundingRateCache.get(chainId, poolAddress, symbolId)\n}\n\nconst _getFundingRate = async(chainId, poolAddress, symbolId, useInfura) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n  const poolconfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n  const {symbol} = getPoolConfig(poolAddress, null, symbolId)\n  let bTokenIdList = poolconfigList.map((i) => i.bTokenId)\n  let promiseList = []\n  for (let i=0; i<bTokenIdList.length; i++) {\n    promiseList.push(perpetualPool.getBToken(i))\n  }\n  const bTokenInfoList = await Promise.all(promiseList)\n  const liquidity = bTokenInfoList.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n  //const pnl = bTokenInfoList.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n  //console.log('pnl', pnl.toString())\n\n  const [price, symbolInfo, parameterInfo ] = await Promise.all([\n    //getOraclePrice(poolAddress, symbolId),\n    getOraclePrice(chainId, symbol, useInfura),\n    perpetualPool.getSymbol(symbolId),\n    perpetualPool.getParameters(),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const { multiplier, fundingRateCoefficient, tradersNetVolume, feeRatio } = symbolInfo;\n  const { minPoolMarginRatio } = parameterInfo;\n  const fundingRateArgs = [\n    tradersNetVolume,\n    price,\n    multiplier,\n    liquidity,\n    fundingRateCoefficient,\n  ]\n  const fundingRatePerBlock = calculateFundingRate(...fundingRateArgs)\n  const fundingRate = processFundingRate(chainId, fundingRatePerBlock)\n  // const liquidityUsedArgs = [\n  //   tradersNetVolume,\n  //   price,\n  //   multiplier,\n  //   liquidity,\n  //   minPoolMarginRatio,\n  // ]\n  const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n  let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n  let promises = []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  const symbols = await Promise.all(promises)\n  //console.log('margin', margin.toString(), marginHeld.toString())\n  const liquidityUsedInAmount = symbols.reduce((accum, a) => {\n    return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).times(minPoolMarginRatio).abs())\n  }, bg(0))\n\n  //const liquidityUsed = liquidityUsedInAmount.div(liquidity)\n  const res = {\n    price,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    tradersNetVolume: tradersNetVolume.toString(),\n    liquidity: liquidity.toString(),\n    //pnl: pnl.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    fundingRatePerBlock: fundingRatePerBlock,\n    fundingRate: fundingRate,\n    liquidityUsed: liquidityUsedInAmount.div(liquidity)\n  }\n  fundingRateCache.set(chainId, poolAddress, symbolId, res)\n  return res\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId, useInfura) => {\n  try {\n    const res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    const { fundingRate, fundingRatePerBlock, liquidity, tradersNetVolume } = res\n    return {\n      fundingRate0: fundingRate.times(100).toString(),\n      fundingRatePerBlock: fundingRatePerBlock.toString(),\n      liquidity: liquidity.toString(),\n      volume: '-',\n      tradersNetVolume: tradersNetVolume.toString()\n    };\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    fundingRate0: '',\n    fundingRatePerBlock: '',\n    liquidity: '',\n    volume: '',\n    tradersNetVolume: '',\n  };\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    const args = [\n      bg(res.tradersNetVolume).plus(newNetVolume).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ]\n    let fundingRate1 = calculateFundingRate(...args)\n    fundingRate1 = processFundingRate(chainId, fundingRate1)\n    return {\n      fundingRate1: fundingRate1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    fundingRate1: '',\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    return {\n      liquidityUsed0: res.liquidityUsed.times(100).toString(),\n    };\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    liquidityUsed0: '',\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    // const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n    // const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    // const { volume } = pToken.getPosition(accountAddress, symbolId);\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    let promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let liquidityUsed0 = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume.plus(newNetVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume).abs())\n      }\n    }, bg(0))\n    //liquidityUsed0 = liquidityUsed0.times(res.minPoolMarginRatio)\n    //const liquidityUsed = bg(newNetVolume).times(res.price).times(res.multiplier).times(res.minPoolMarginRatio).div(res.liquidity)\n    const liquidityUsed1 = liquidityUsed0.times(res.minPoolMarginRatio).div(res.liquidity)\n    return {\n      liquidityUsed1: liquidityUsed1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    liquidityUsed1: '',\n  }\n}\n\n\nexport const getPoolBTokensBySymbolId = async(chainId, poolAddress, accountAddress, symbolId, useInfura) => {\n  try {\n    const bTokensConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n    const symbolsConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    let bTokenList = bTokensConfigList.map((i) => {\n      return {bTokenId: i.bTokenId, bTokenSymbol: i.bTokenSymbol, bTokenAddress: i.bToken}\n    })\n    let promiseList = []\n    for (let i=0; i<bTokenList.length; i++) {\n      promiseList.push(bTokenFactory(chainId, bTokenList[i].bTokenAddress, useInfura).balanceOf(accountAddress))\n    }\n    const resultList = await Promise.all(promiseList)\n    for (let i=0; i<bTokenList.length; i++) {\n      bTokenList[i].walletBalance = resultList[i].toString()\n    }\n\n    let bTokenIdList = bTokensConfigList.map((i) => i.bTokenId)\n    let symbolIdList = symbolsConfigList.map((i) => i.symbolId)\n    const [margins, positions, parameterInfo] = await Promise.all([\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      perpetualPool.getParameters(),\n    ]);\n    const { minInitialMarginRatio } = parameterInfo;\n\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n    //console.log('margin', margin.toString())\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs().times(minInitialMarginRatio))\n    }, bg(0))\n    //console.log('marginHeld', marginHeld.toString())\n\n    const pnl = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    //console.log('pnl', pnl.toString())\n\n    bTokenList = bTokenList.map((i, index) => {\n      if(!isNaN(parseFloat(bTokens[index].price)) || bTokens[index].price !== '0') {\n        i.availableBalance = max(min(margin.minus(marginHeld).plus(pnl).div(bTokens[index].price).div(bTokens[index].discount), margins[index]), bg(0)).toString()\n      } else {\n        i.availableBalance = '-'\n      }\n      return i\n    })\n    return bTokenList\n  } catch(err) {\n    console.log(err)\n  }\n  return []\n}\n","import { deriToNatural } from '../utils';\nimport { perpetualPoolFactory } from '../factory';\nimport { getFilteredPoolConfigList, getPoolConfig} from '../config'\n\nimport { getRestServerConfig, DeriEnv } from '../../config';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nconst processTradeEvent = async (\n  perpetualPool,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const symbolId = info.symbolId\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier[parseInt(symbolId)],\n    feeRatio[parseInt(symbolId)]\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier[parseInt(symbolId)]);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    //baseToken: bTokenSymbol,\n    symbolId,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  return res;\n};\nconst getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n  fromBlock\n) => {\n\n  const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n  const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n  //console.log('symbolIdList', symbolIdList);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n\n  let promises= []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  let symbols = await Promise.all(promises)\n\n  const multiplier = symbols.map((i) => i.multiplier.toString());\n  const feeRatio = symbols.map((i) => i.feeRatio.toString());\n\n  const filters = { owner: accountAddress };\n  let events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n\n  const result = [];\n  events  = events.filter((i) => i.returnValues.symbolId === symbolId)\n  //console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    const res = await processTradeEvent(\n      perpetualPool,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  try {\n    let tradeFromBlock, tradeHistory = [];\n    const res = await fetchJson(\n      `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}/${symbolId}`\n    );\n    if (res && res.success) {\n      tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n      if (res.data.tradeHistory && Array.isArray(res.data.tradeHistory)) {\n        tradeHistory = res.data.tradeHistory;\n      }\n    }\n    if (tradeHistory.length > 0) {\n      tradeHistory = tradeHistory\n        .filter((i) => i)\n        .map((i) => {\n          return {\n            direction: i.direction.trim(),\n            //baseToken: i.baseToken.trim(),\n            symbolId: i.symbolId,\n            price: deriToNatural(i.price).toString(),\n            notional: deriToNatural(i.notional).toString(),\n            volume: deriToNatural(i.volume).toString(),\n            transactionFee: deriToNatural(i.transactionFee).toString(),\n            transactionHash: i.transactionHash,\n            time: i.time.toString(),\n          };\n        });\n    }\n      //console.log('tradeHistory1',tradeHistory)\n    if (tradeFromBlock !== 0) {\n      // console.log(tradeFromBlock, liquidateFromBlock)\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline.concat(tradeHistory);\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    } else {\n\n      const {initialBlock} = getPoolConfig(poolAddress, null, symbolId)\n      tradeFromBlock = parseInt(initialBlock);\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline;\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    }\n  } catch(err) {\n    console.log(err)\n  }\n  return []\n};\n","import { isOrderValid } from '../calculation';\nimport { getPoolConfig, getFilteredPoolConfigList } from '../config'\nimport {\n  bTokenFactory,\n  perpetualPoolRouterFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n} from '../factory';\nimport { getOracleInfo, bg } from '../utils';\n\nexport const unlock = async (chainId, poolAddress, accountAddress, bTokenId) => {\n   const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\n  const bToken = bTokenFactory(chainId, bTokenAddress);\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress, poolAddress)\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.addMargin(accountAddress, bTokenId, amount);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.removeMargin(accountAddress, bTokenId, amount, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePosition = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}\n\nexport const depositMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   //const [price, symbolInfo, parameterInfo, positions] = await Promise.all([\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    //console.log('liquidity', liquidity.toString())\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n    // const pnl = bTokens.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n    // console.log('pnl', pnl.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n     promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePositionWithPrices = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig(poolAddress);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n     const promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}","export {\n  DeriEnv,\n  //getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\nexport * from './calculation';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  // isUnlocked,\n  // getEstimatedMargin,\n  // getEstimatedFee,\n  // getEstimatedFundingRate,\n  // getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n  // getFundingRate,\n  //getPositionInfo,\n} from './api/contractQueryApi';\nexport {\n  //unlock,\n  //depositMargin,\n  //withdrawMargin,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mint,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport {\n  getUserInfo,\n  getUserInfoHarvest,\n  getUserInfoTotal,\n  getUserInfoAll,\n  getPoolInfoApy,\n  getLpPoolInfoApy,\n  getUserInfoInPool,\n  getUserInfoAllForAirDrop,\n} from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\n//getSpecification2 as getSpecification,\n// getPositionInfo2 as getPositionInfo,\n//getLiquidityInfo2 as getLiquidityInfo,\n//getWalletBalance2 as getWalletBalance,\n//getFundingRate2 as getFundingRate,\n//getLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\ngetDeriBalance2 as getDeriBalance,\n//getTradeHistory2 as getTradeHistory,\n} from './api/restApi';\n\n// export {\n  //tradeWithMargin2 as tradeWithMargin,\n  //closePosition2 as closePosition,\n  //depositMargin2 as depositMargin,\n  //withdrawMargin2 as withdrawMargin,\n  //addLiquidity2 as addLiquidity,\n  //removeLiquidity2 as removeLiquidity,\n// } from './api/contractTransactionApiV2'\n\nexport * from './api/lpPoolApi';\n\nexport * from './api_wrapper';\n\nexport {\n  getPoolConfigList,\n  getFilteredPoolConfigList,\n  getPoolBTokensBySymbolId,\n} from './v2';\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    const chainId = parseInt(\n      await window.ethereum.request({ method: 'net_version' })\n    );\n    // const chainId = hexToNumber(\n    //   await window.ethereum.request({ method: 'eth_chainId' })\n    // );\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import {\n  getSlpLiquidityInfo,\n  getSlpWalletBalance,\n  isSlpUnlocked,\n  unlockSlp,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './slpPoolApi';\nimport {\n  getClp2LiquidityInfo,\n  getClp2WalletBalance,\n  isClp2Unlocked,\n  unlockClp2,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './clp2PoolApi';\nimport {\n  getClpLiquidityInfo,\n  getClpWalletBalance,\n  isClpUnlocked,\n  unlockClp,\n  // addClpLiquidity,\n  // removeClpLiquidity,\n} from './clpPoolApi';\n\nimport {\n  addSlpLiquidity2 as addSlpLiquidity,\n  removeSlpLiquidity2 as removeSlpLiquidity,\n  addClpLiquidity2 as addClpLiquidity,\n  removeClpLiquidity2 as removeClpLiquidity,\n  addClp2Liquidity2 as addClp2Liquidity,\n  removeClp2Liquidity2 as removeClp2Liquidity,\n} from './contractTransactionApiV2'\nimport { getLpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getLpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Add liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp') {\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp2') {\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\n  } else {\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Remove liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await removeSlpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp') {\n    return await removeClpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp2') {\n    return await removeClp2Liquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else {\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Check account is unlocked in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Unlock the account in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await unlockSlp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await unlockClp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await unlockClp2(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`unlockLp(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Get account balance in lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getLpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\n  }\n};\n","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  load(version){\n    const current = version && version.current;\n    let configs = getContractAddressConfig(DeriEnv.get(),current)\n    if(version){\n      configs = configs.filter(c => c.version === version.current)\n      //v2 不需要展示base token,需要合并相同的base token\n      if(version.isV2){\n        configs = configs.reduce((total,cur) => {\n          const pos = total.findIndex(c => c.symbolId === cur.symbolId);\n          if(pos === -1){\n            total.push(cur)\n          }\n          return total;\n        },[])\n      }\n    }\n    this.setAll(configs)\n    return configs;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","const { getContractAddressConfig:getContractAddressConfig2} = require(\"../config\");\nconst { getPoolConfigList:getPoolConfigListV2} = require(\"../v2/config\")\n\nexport const getContractAddressConfig = (env = 'dev', version) => {\n  if (!version || version === '1' || version === 'v1') {\n    return getContractAddressConfig2(env)\n  } else if (version === '2' || version === 'v2') {\n    return getPoolConfigListV2(env).concat(getContractAddressConfig2(env))\n  } else {\n    throw new Error(`getPoolContractAddress: invalid version: ${version}`)\n  }\n}","import { getLiquidityInfo2 } from '../api/restApi';\nimport { getPoolLiquidity as getPoolLiquidity2 } from '../api/databaseApi';\nimport { \n  getLiquidityInfo as getLiquidityInfoV2,\n  getPoolLiquidity as getPoolLiquidityV2,\n } from '../v2';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getLiquidityInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getLiquidityInfoV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const getPoolLiquidity = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getPoolLiquidity2(chainId, poolAddress)\n  } else {\n    return getPoolLiquidityV2(chainId, poolAddress, bTokenId)\n  }\n};","import {addLiquidity2, removeLiquidity2 } from '../api/contractTransactionApiV2';\nimport {\n  addLiquidity as addLiquidityV2,\n  removeLiquidity as removeLiquidityV2\n  // addLiquidityWithPrices as addLiquidityV2,\n  // removeLiquidityWithPrices as removeLiquidityV2,\n} from '../v2';\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return addLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return addLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if (bTokenId === undefined) {\n    return removeLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return removeLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum,\n    );\n  }\n}\n","import {\n  getPositionInfo as getPositionInfo2,\n  isUnlocked as isUnlocked2,\n  getEstimatedMargin as getEstimatedMargin2,\n  getEstimatedFee as getEstimatedFee2,\n  getEstimatedFundingRate as getEstimatedFundingRate2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsed2,\n  getWalletBalance as getWalletBalance2,\n} from '../api/contractQueryApi'\n\nimport {\n  getSpecification2,\n  getFundingRate2,\n  getLiquidityUsed2,\n  getFundingRateCache2,\n} from '../api/restApi'\n//import { bTokenFactory } from '../factory/contracts'\n\nimport {\n  getPositionInfo as getPositionInfoV2,\n  isUnlocked as isUnlockedV2,\n  getEstimatedMargin as getEstimatedMarginV2,\n  getEstimatedFee as getEstimatedFeeV2,\n  getEstimatedFundingRate as getEstimatedFundingRateV2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsedV2,\n  getSpecification as getSpecificationV2,\n  getWalletBalance as getWalletBalanceV2,\n  getFundingRate as getFundingRateV2,\n  getLiquidityUsed as getLiquidityUsedV2,\n  getFundingRateCache as getFundingRateCacheV2,\n} from '../v2'\n\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getSpecification2(chainId, poolAddress)\n  } else {\n    return getSpecificationV2(chainId, poolAddress, bTokenId, symbolId)\n  }\n}\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getPositionInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getPositionInfoV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n}\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getWalletBalance2(chainId, poolAddress, accountAddress)\n  } else {\n    return getWalletBalanceV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => { \n  if (bTokenId === undefined) {\n    return isUnlocked2(chainId, poolAddress, accountAddress)\n  } else {\n    return isUnlockedV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  if (symbolId === undefined) {\n    return getEstimatedFee2(chainId, poolAddress, volume)\n  } else {\n    return getEstimatedFeeV2(chainId, poolAddress, volume, symbolId)\n  }\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedMargin2(chainId, poolAddress, accountAddress, volume, leverage)\n  } else {\n    return getEstimatedMarginV2(chainId, poolAddress, accountAddress, volume, leverage, symbolId)\n  }\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRate2(chainId, poolAddress)\n  } else {\n    return getFundingRateV2(chainId, poolAddress, symbolId)\n  }\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedFundingRate2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedFundingRateV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return getLiquidityUsed2(chainId, poolAddress)\n  } else {\n    return getLiquidityUsedV2(chainId, poolAddress, symbolId)\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedLiquidityUsed2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedLiquidityUsedV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRateCache2(chainId, poolAddress)\n  } else {\n    return getFundingRateCacheV2(chainId, poolAddress, symbolId)\n  }\n}\n","import { unlock as unlock2 } from '../api/contractTransactionApi';\nimport {\n  tradeWithMargin2,\n  closePosition2,\n  depositMargin2,\n  withdrawMargin2,\n} from '../api/contractTransactionApiV2';\nimport {\n  unlock as unlockV2,\n  tradeWithMargin as tradeWithMarginV2,\n  closePosition as closePositionV2,\n  depositMargin as depositMarginV2,\n  withdrawMargin as withdrawMarginV2,\n  // tradeWithMarginWithPrices as tradeWithMarginV2,\n  // depositMarginWithPrices as depositMarginV2,\n  // withdrawMarginWithPrices as withdrawMarginV2,\n  // closePositionWithPrices as closePositionV2,\n} from '../v2';\n\nexport const unlock = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId\n) => {\n  if(bTokenId === undefined) {\n    return unlock2(chainId, poolAddress, accountAddress)\n  } else {\n    return unlockV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if(bTokenId === undefined) {\n    return depositMargin2(chainId, poolAddress, accountAddress, amount)\n  } else {\n    return depositMarginV2(chainId, poolAddress, accountAddress, amount, bTokenId)\n  }\n};\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if(bTokenId === undefined) {\n    return withdrawMargin2(chainId, poolAddress, accountAddress, amount)\n  } else {\n    return withdrawMarginV2(chainId, poolAddress, accountAddress, amount, bTokenId, isMaximum)\n  }\n};\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n  if(symbolId === undefined) {\n    return tradeWithMargin2(chainId, poolAddress, accountAddress, newVolume)\n  } else {\n    return tradeWithMarginV2(chainId, poolAddress, accountAddress, newVolume, symbolId)\n  }\n};\n\nexport const closePosition = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if(symbolId === undefined) {\n    return closePosition2(chainId, poolAddress, accountAddress)\n  } else {\n    return closePositionV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n};\n","\nimport {getTradeHistory2} from '../api/restApi';\nimport { \n  getTradeHistory as getTradeHistoryV2\n } from '../v2';\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getTradeHistory2(chainId, poolAddress, accountAddress);\n  } else {\n    return getTradeHistoryV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      symbolId,\n    );\n  }\n}","import { bg, getAnnualBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  return bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n}\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.apy2`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, apy2, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        apy2: deriToNatural(apy2).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\n//   const db = databaseFactory(true);\n//   try {\n//     const poolNetwork = getNetworkName(chainId);\n//     const res = await db\n//       .getValues([\n//         `${poolNetwork}.${poolAddress}.apy`,\n//         `${poolNetwork}.${poolAddress}.apy2`,\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\n//       ])\n//       .catch((err) => console.log('getPoolInfoApy', err));\n//     if (res) {\n//       const [apy, apy2, volume1h, volume24h] = res;\n//       return {\n//         apy: deriToNatural(apy).toString(),\n//         apy2: deriToNatural(apy2).toString(),\n//         volume1h: deriToNatural(volume1h).toString(),\n//         volume24h: deriToNatural(volume24h).toString(),\n//       };\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseAirdropFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import {\n  getPoolContractAddress,\n  //naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  //const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from './contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from './slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from './clpPoolApi'\nimport {\n  addClp2Liquidity,\n  removeClp2Liquidity,\n} from './clp2PoolApi'\nimport { wsInstance } from './apiGlobals'\nimport { getRestServerConfig, DeriEnv } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 3000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","\n\nimport BigNumber from 'bignumber.js'\nconst versionKey = 'deri-current-version'\n\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}\n\nexport function isLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\nexport function isSushiLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\n}\nexport function isCakeLP(address){\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\n\nexport function sessionStorageKey(version){\n  return `${version}-current-trading-pool`\n}\n\n\nexport function storeVersion(version){\n  sessionStorage.setItem(versionKey,version)\n}\n\nexport function restoreVersion(){\n  return sessionStorage.getItem(versionKey)\n}\n\nexport function storeConfig(version,config){\n  if(config){\n    const key = sessionStorageKey(version);\n    sessionStorage.setItem(key,JSON.stringify(config))\n  }\n}\n\nexport function getConfigFromStore(version){\n  return JSON.parse(sessionStorage.getItem(sessionStorageKey(version)))\n}\n\n","import {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App() {\n  \n  if(isBrowser){\n    return <DesktopApp/>\n  }\n  if(isMobile){\n    return <MobileApp/>\n  }\n}\n\nexport default App;\n","\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance, eqInNumber } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      setDetail : action,\n      supportV2 : computed,\n      supportChain : computed   \n    })\n  }\n\n  isConnected = () => !!this.detail.account;\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);        \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    const env = DeriEnv.get();\n    const {chainInfo} = config[env]\n    \n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n    }\n    this.setDetail(detail)\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  setDetail(detail){\n    this.detail = detail;\n  }\n\n  get supportV2() {\n    return eqInNumber(this.detail.chainId,56) || eqInNumber(this.detail.chainId,97)\n  }\n\n  get supportChain(){\n    return this.detail.supported\n  }\n\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nclass Oracle {\n  symbol = 'BTCUSD'\n  timeType = 'min'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n  listeners = {}\n  already = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n    this.initWebSocket()\n  }\n\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket('wss://oracle2.deri.finance', {        \n        transports: ['websocket'],\n        withCredentials: true\n      })\n      this.ws.on('connect',() => {\n        if(this.already){\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n          console.log('ws is reconnected already')\n        }\n        console.log('ws is already connected');\n      });\n    }    \n  }\n\n\n  load(symbol,timeType = 'min'){\n    // symbol = symbol+'_V2'\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          for(const key of Object.keys(this.listeners)){\n            if(typeof this.listeners[key] === 'function'){\n              this.listeners[key](obj)\n            }\n          }\n        }\n      }\n    })\n    if(symbol !== this.symbol){\n      this.unsubscribeBars(this.symbol);\n    }\n    this.setSymbol(symbol)\n    this.setTimeType(timeType);\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n    this.already = true\n  }\n\n  addListener(id,listener){\n    if(!this.listeners[id]) {\n      this.listeners[id] = listener\n    }    \n  }\n\n\n\n  unsubscribeBars(symbol){\n    this.ws.emit('un_get_kline_update', {\n      symbol : symbol, 'time_type' : 'min'\n    })\n  }\n\n\n  //暂不用\n  loadHistory(symbol,timeType,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        console.log('history ->',history[history.length-1].time)\n        callback(history)\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n    // this.emit(symbol);\n  }\n\n  // start(symbol){\n  //   this.initWebSocket();\n  //   this.loadIndex(symbol);\n  //   this.ws.on('kline_update',data => {\n  //     const obj = {}\n  //     let time = data.time\n  //     if (data.symbol === this.symbol) {\n  //       obj.time = time \n  //       obj.low = Number(data.low)\n  //       obj.high = Number(data.high)\n  //       obj.open = Number(data.open)\n  //       obj.close = Number(data.close)\n  //       obj.volume = Number(data.volume)\n  //       this.setIndex(obj.close)\n  //     }\n  //   })\n  // }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setTimeType(timeType){\n    this.timeType = timeType;\n  }\n\n  setPause(paused){\n    this.paused = paused\n  }\n}\n\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n\n  callback = () => {}\n   wallet = null;\n   spec = null\n \n   mockPositionInfo = {\n    averageEntryPrice: \"\",\n    liquidationPrice: \"\",\n    margin: \"20000\",\n    marginHeld: \"10068.26538\",\n    marginHeldBySymbol : \"293.16152\",\n    unrealizedPnl: \"3.1311\",\n    volume: \"800\",\n   }\n\n   async load(wallet,spec,callback){\n     if(wallet && wallet.isConnected() && wallet.supportChain && spec && spec.pool){\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account,spec.symbolId)\n      if(position){\n        if(callback){\n          callback(position)\n        }\n      }\n      this.start(wallet,spec,callback)\n      return position;\n     }\n   }\n\n   start(wallet,spec,callback){\n     if(!this.interval){\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \n      if(wallet){\n        this.wallet= wallet; \n      }\n      if(spec){\n        this.spec = spec\n      }\n      if(callback){\n        this.callback = callback;\n      }\n     }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(wallet,spec,callback){\n     this.start(wallet,spec,callback || this.callback)\n   }\n\n   \n\n\n \n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n  info = {\n    bSymbol:'BUSD',\n    symbol:'BTCUSD',\n    multiplier:'0.0001',\n    fundingRateCoefficient:'0.0000025',\n    minInitialMarginRatio:0.1,\n    minMaintenanceMarginRatio:0.05,\n    feeRatio:0.0005,\n  }\n\n  async load(wallet,config){\n    if(wallet && wallet.supportChain && config && config.pool !== this.info.pool){\n      const spec = await getSpecification(wallet.detail.chainId,config.pool,config.bTokenId,config.symbolId);\n      this.setInfo(spec)\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info\n  }\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\n\n\nexport default class History {\n\n   async load(wallet,config){\n      if(wallet && wallet.detail.chainId && config && config.pool){\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account,config.symbolId);    \n         return all;\n      } else {\n         return []\n      }\n   }\n}","import { observable, action, computed, makeObservable } from \"mobx\";\nimport Oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport History from './History'\nimport Config from \"./Config\";\nimport { eqInNumber, storeConfig, getConfigFromStore } from \"../utils/utils\";\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\nimport { bg } from \"../lib/web3js/indexV2\";\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  version = null;\n  wallet = null;\n  configs = [] \n  config = null;\n  index = ''\n  volume = ''\n  paused = false\n  slideIncrementMargin = 0\n  position = {}\n  contract = {}\n  fundingRate = {}\n  history = []\n  userSelectedDirection = 'long'\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      slideIncrementMargin : observable,\n      fundingRate : observable,\n      position : observable,\n      history : observable,\n      contract : observable,\n      userSelectedDirection : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setFundingRate : action,\n      setHistory : action,\n      setSlideMargin : action,\n      amount : computed,\n      // amountIncrement : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed,\n      isNegative : computed,\n      isPositive : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = new Oracle();\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n    this.historyInfo = new History()\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet,version){    \n    if(version){\n      this.version = version\n    }\n    const all = await this.configInfo.load(version);\n    //如果连上钱包，有可能当前链不支持\n    if(wallet && wallet.isConnected()){\n      this.setWallet(wallet);\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      let defaultConfig = this.getDefaultConfig(this.configs,wallet);\n      //如果还是为空，则默认用所有config的第一条\n      if(!defaultConfig){\n        defaultConfig = all.length > 0 ? all[0] : {}\n      }\n      this.setConfig(defaultConfig);\n    } \n    //如果没有钱包或者链接的链不一致，设置默认config，BTCUSD\n    if(!wallet.isConnected() && this.configs.length === 0 && all.length > 0){\n      let defaultConfig = all.find(c => c.symbol === 'BTCUSD')\n      defaultConfig = defaultConfig ? defaultConfig : all[0]\n      this.setConfig(defaultConfig)\n    }\n    this.loadByConfig(this.wallet,this.config,true)\n    this.setVolume('')\n  }\n\n  async switch(spec){\n    const cur = this.configs.find(config => config.pool === spec.pool && config.symbolId === spec.symbolId)\n    //v1 只需要比较池子地址，v2 需要比较symbolId\n    let changed = false\n    if(this.version){\n      changed = this.version.isV1 ? spec.pool !== this.config.pool : spec.symbolId !== this.config.symbolId\n    }\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.loadByConfig(this.wallet,cur,changed);  \n      if(changed){\n        this.store(cur)\n      }    \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async loadByConfig(wallet,config,symbolChanged){\n     //position\n     this.positionInfo.load(wallet,config,position => {       \n        this.setPosition(position);\n     })\n\n     //切换指数\n    if(symbolChanged && config){\n      this.oracle.unsubscribeBars();\n      this.oracle.addListener('trading',data => {\n        this.setIndex(data.close)\n      })\n      const symbol = this.version.isV2 ? `${config.symbol}_V2` : config.symbol\n      this.oracle.load(symbol)\n    }\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)    \n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     \n     //history\n     const history = await this.historyInfo.load(wallet,config);\n\n     if(contract){\n      this.setContract(contract)\n     }\n\n     if(fundingRate){\n      this.setFundingRate(fundingRate)\n     }\n\n     if(history){\n      this.setHistory(history);\n     }\n  }\n\n\n    //优先使用session storage 的，如果缓存跟用户当前链一直，则命中缓存，否则取当前配置第一条\n    getDefaultConfig(configs = [],wallet){\n      let defaultConfig = null;\n      if(configs.length > 0){    \n        const fromStore = this.getFromStore();\n        if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\n          defaultConfig = fromStore;\n        }\n        if(defaultConfig){\n          //虽然从缓存获得config ，需要判断池子地址是否一致，否则用可用config的第一条\n          const pos = configs.findIndex(c => c.pool === defaultConfig.pool);\n          if(pos === -1){\n            defaultConfig = configs[0];\n          }\n        } else {\n          defaultConfig = configs[0]\n        }   \n      }\n      return defaultConfig;    \n    }\n\n \n\n  //存起来\n  store(config){\n    storeConfig(this.version.current,config)\n  }\n\n  getFromStore(){\n    return getConfigFromStore(this.version.current)\n  }\n\n  async refresh(){\n    this.pause()\n    const position = await this.positionInfo.load(this.wallet,this.config);\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)   \n    const history = await this.historyInfo.load(this.wallet,this.config)\n\n    if(fundingRate){\n      this.setFundingRate(fundingRate)      \n    }\n    if(position){\n      this.setPosition(position)\n    }\n    if(history){\n      this.setHistory(history)\n    }\n    this.setVolume('')\n    this.resume();\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume(this.wallet,this.config);\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    if(position){\n      this.position = position\n    }\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setHistory(history){\n    this.history = history\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setSlideMargin(slideIncrementMargin){\n    if(slideIncrementMargin !== ''){\n      this.slideIncrementMargin =  slideIncrementMargin\n      const position = this.position;\n      const increment = slideIncrementMargin - position.marginHeld\n      const volume = increment / (this.index * this.contract.multiplier * this.contract.minInitialMarginRatio);\n      console.log('volume ',volume)\n      this.setVolume(volume.toFixed(0))\n    }\n  }\n\n\n  get volumeDisplay(){\n    if(this.volume === 0 || this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\n      return '';\n    } else {\n      return Math.abs(this.volume)\n    }\n  }\n  \n\n  get amount(){\n    const position = this.position\n    const contract = this.contract;\n    const volume = this.volume === '' || isNaN(this.volume) ? 0 : Math.abs(this.volume)\n    let {margin, marginHeldBySymbol:currentSymbolMarginHeld,marginHeld,unrealizedPnl} = position\n    //v2\n    const otherMarginHeld = bg(marginHeld).minus(currentSymbolMarginHeld);\n    const contractValue = volume * this.index * contract.multiplier;\n    const incrementMarginHeld = contractValue * contract.minInitialMarginRatio\n    let totalMarginHeld = bg(marginHeld) ;\n\n    //如果当前仓位为正仓用户做空或者当前仓位为负仓用户做多，总仓位相减,取绝对值\n    if((this.isPositive && this.userSelectedDirection === 'short') || (this.isNegative && this.userSelectedDirection === 'long')){\n      totalMarginHeld = totalMarginHeld.minus(incrementMarginHeld);\n      if(totalMarginHeld.lt(otherMarginHeld)){\n        totalMarginHeld =  otherMarginHeld.plus(otherMarginHeld.minus(totalMarginHeld).abs())        \n      } \n      currentSymbolMarginHeld = bg(currentSymbolMarginHeld).minus(incrementMarginHeld).abs().toString()\n    } else {\n      totalMarginHeld = bg(marginHeld).plus(incrementMarginHeld)\n      if(currentSymbolMarginHeld){\n        currentSymbolMarginHeld = bg(currentSymbolMarginHeld).plus(incrementMarginHeld).toString();\n      }\n    }\n    \n    totalMarginHeld = totalMarginHeld.gt(margin) ? margin : totalMarginHeld.toFixed(2)\n    let available = bg(margin).minus(totalMarginHeld).toFixed(2)\n    const exchanged = bg(volume).multipliedBy(contract.multiplier).toFixed(4)\n    const dynBalance = margin && bg(margin).plus(unrealizedPnl).toFixed(2);\n    const totalVolume = this.userSelectedDirection === 'short' ? (-this.volumeDisplay + (+position.volume)) : ((+this.volumeDisplay) +  (+position.volume))    \n    const totalContractValue = totalVolume * this.index * contract.multiplier\n    const leverage = Math.abs(totalContractValue / (+dynBalance)).toFixed(1);\n\n    return {\n      volume : this.volume,\n      dynBalance : dynBalance,\n      margin : totalMarginHeld,\n      available : available,\n      exchanged : exchanged,\n      currentSymbolMarginHeld : currentSymbolMarginHeld,\n      leverage : leverage\n    }\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //正仓\n  get isPositive(){\n    return bg(this.position.volume).gt(0);\n  }\n\n  //负仓\n  get isNegative(){\n    return bg(this.position.volume).isNegative();\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(config){\n      const chainId = wallet && wallet.isConnected() && wallet.supportChain ? wallet.detail.chainId : config.chainId\n      if(config){    \n        const res = await getFundingRate(chainId,config.pool,config.symbolId)\n        return res;\n      }\n    }\n  }\n\n  get fundingRateTip(){\n    if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n      return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\n      `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \n    }\n    return ''\n  }\n\n\n\n}","import { makeAutoObservable, observable, action, computed } from \"mobx\";\nimport { storeVersion, restoreVersion } from \"../utils/utils\";\n\nexport default class Version {\n  current = null;\n\n  constructor(){\n    makeAutoObservable(this,{\n      current : observable,\n      setCurrent : action,\n      isV1 : computed,\n      isV2 : computed\n    })\n    const versionFromSession = restoreVersion();\n    this.current = versionFromSession ? versionFromSession : null\n  }\n\n\n  setCurrent(version,notSave){\n    this.current = version;\n    if(!notSave){\n      storeVersion(version)\n    }\n  }\n\n  switch(){\n    if(this.current === 'v1'){\n      this.setCurrent('v2')\n    } else {\n      this.setCurrent('v1')\n    }\n  }\n\n  get isV1() {\n    return this.current === 'v1'\n  }\n\n  get isV2(){\n    return this.current === 'v2'\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\n//note dont remove zhe line\n// import NumberPolyfill from './lib/polyfill/numberPolyfill'\nimport Trading from './model/Trading';\nimport { DeriEnv } from './lib/web3js/indexV2';\nimport Version from './model/Version';\n\nconst wallet = new Wallet();\nconst trading = new Trading()\nconst version = new Version();\n\nif(process.env.NODE_ENV === 'production') {\n  DeriEnv.set('prod')\n} \n// DeriEnv.set('dev')\n// DeriEnv.set('prod')\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} version={version}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","export const getDBProviderUrlsConfig = () => [\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  //accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  const symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n\n  return {\n    volume: volume.toString(),\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n    margin: margin.toString(),\n    marginHeld: calculateMarginHeld(\n      price,\n      volume,\n      multiplier,\n      minInitialMarginRatio\n    ).toString(),\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n    liquidationPrice: calculateLiquidationPrice(\n      volume,\n      margin,\n      cost,\n      multiplier,\n      minMaintenanceMarginRatio\n    ).toString(),\n  };\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.isUnlocked(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\nimport { getClp2ContractAddress } from '../utils';\n\nexport const getClp2LiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      clp2Pool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n    };\n  }\n  console.log('no Clp2Pool address, please check');\n  return {};\n};\n\nexport const addClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const removeClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\nexport const getClp2WalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    if (isProvider) {\n      this.web3 = web3Factory(chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    return await this.contract.methods[method](...args).call();\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    const gas = await this._estimatedGas(method, args, accountAddress)\n      //this.web3.eth.getGasPrice(),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (this.chainId === '56') {\n      amount = 1999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  // for slp pool use\n  // async balanceOf(poolAddress) {\n  //   //const res = await this._call('balanceOf', [poolAddress])\n  //   let result\n  //   const [res, decimals] = await Promise.all([\n  //     this._balance(this.poolAddress),\n  //     this.decimals(),\n  //   ])\n  //   result = bg(res, -decimals)\n  //   return result\n  // }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async getPositionInfo(accountAddress) {\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      //console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async balance(accountAddress) {\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      DB_CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async getValues(keyArray) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods.getValues(keyArray).call();\n      } catch (err) {\n        this.providerUrl = null\n      }\n      if (res) {\n        break\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database getValues(): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport Web3 from 'web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async signature(accountAddress) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods['signature'](accountAddress).call();\n      } catch (err) {\n        this.providerUrl = null\n      }\n      if (res) {\n        break\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database getValues(): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport Web3 from 'web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseAirdropContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async getValues(keyArray) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods.getValues(keyArray).call();\n      } catch (err) {\n        this.providerUrl = null\n      }\n      if (res) {\n        break\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database getValues(): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80636b0509b1116100975780639a8a0592116100665780639a8a0592146101c85780639d76ea58146101d0578063b06faf62146101d8578063f77c4791146101e0576100f5565b80636b0509b114610185578063701422691461018d57806379a87b19146101a057806392eefe9b146101b5576100f5565b806351dfdb48116100d357806351dfdb4814610137578063560ebbd11461014a57806358c700a31461016a578063677528cb14610172576100f5565b806306fdde03146100fa57806320606b7014610118578063325564ec1461012d575b600080fd5b6101026101e8565b60405161010f9190610dbf565b60405180910390f35b610120610209565b60405161010f9190610d48565b61013561022d565b005b610135610145366004610bab565b6103a1565b61015d610158366004610ca1565b61066f565b60405161010f9190610d3d565b610120610684565b610135610180366004610bea565b61068a565b6101206107b1565b61013561019b366004610c15565b6107d5565b6101a8610acc565b60405161010f9190610cec565b6101356101c3366004610bab565b610adb565b610120610b77565b6101a8610b7d565b61015d610b8c565b6101a8610b9c565b6040518060400160405280600581526020016415985d5b1d60da1b81525081565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6000546001600160a01b031633146102605760405162461bcd60e51b815260040161025790610f7f565b60405180910390fd5b600254600160a01b900460ff161561028a5760405162461bcd60e51b81526004016102579061106a565b6001541580159061029d57506001544210155b6102b95760405162461bcd60e51b815260040161025790610e12565b60035460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926102f19291169060001990600401610d24565b602060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610c81565b506002805460ff60a01b1916600160a01b17908190556001546040517fce3275b30d22151f82ee29ce7ea685563b66ff98e56afc576a94d8a88c676ec092610397929130916001600160a01b031690611153565b60405180910390a1565b6000546001600160a01b031633146103cb5760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156103f55760405162461bcd60e51b81526004016102579061106a565b6000816001600160a01b03166358c700a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561043057600080fd5b505afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610cb9565b90506000826001600160a01b03166379a87b196040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610bce565b905081158015906104ee5750814210155b61050a5760405162461bcd60e51b815260040161025790610ec5565b6001600160a01b03811630146105325760405162461bcd60e51b815260040161025790610fd5565b6003546040516370a0823160e01b81526001600160a01b03909116906323b872dd908590309084906370a082319061056e908590600401610cec565b60206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610cb9565b6040518463ffffffff1660e01b81526004016105dc93929190610d00565b602060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190610c81565b507f18ce2512842fddee8c808fb717780a66007d1da9a942dd32625813c82d53c34282843060405161066293929190611153565b60405180910390a1505050565b60056020526000908152604090205460ff1681565b60015481565b6000546001600160a01b031633146106b45760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156106de5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b0382166107045760405162461bcd60e51b8152600401610257906110d3565b60038110158015610717575061016d8111155b6107335760405162461bcd60e51b815260040161025790610e68565b61074081620151806111a0565b61074a9042611188565b6001819055600280546001600160a01b0319166001600160a01b0385811691909117918290556040517fe2a3b7ba8269be3ca7ba4627f844bb9abd978e9b05d290dc89d4b107f9e3dda7936107a59390923092911690611153565b60405180910390a15050565b7f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb1281565b600254600160a01b900460ff16156107ff5760405162461bcd60e51b81526004016102579061106a565b8442111561081f5760405162461bcd60e51b815260040161025790610f1b565b604080518082018252600581526415985d5b1d60da1b6020918201526004549151600092610894927f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866927f8d03f8e727eaf836840d08da04cd9ecc9773328dd38f4a6c7b84a9ec2b88b7c79291309101610d7d565b60405160208183030381529060405280519060200120905060007f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb12898989896040516020016108e7959493929190610d51565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff161561092f5760405162461bcd60e51b815260040161025790610f52565b6000818152600560209081526040808320805460ff191660011790555161095a918591859101610cd1565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516109979493929190610da1565b6020604051602081039080840390855afa1580156109b9573d6000803e3d6000fd5b5050604051601f1901516000549092506001600160a01b0380841691161490506109f55760405162461bcd60e51b81526004016102579061111c565b60035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610a27908e908e90600401610d24565b602060405180830381600087803b158015610a4157600080fd5b505af1158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190610c81565b508a6001600160a01b03167f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef18b8b8b604051610ab793929190611172565b60405180910390a25050505050505050505050565b6002546001600160a01b031681565b6000546001600160a01b03163314610b055760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff1615610b2f5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b038116610b555760405162461bcd60e51b815260040161025790611024565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b6003546001600160a01b031681565b600254600160a01b900460ff1681565b6000546001600160a01b031681565b600060208284031215610bbc578081fd5b8135610bc7816111d5565b9392505050565b600060208284031215610bdf578081fd5b8151610bc7816111d5565b60008060408385031215610bfc578081fd5b8235610c07816111d5565b946020939093013593505050565b600080600080600080600060e0888a031215610c2f578283fd5b8735610c3a816111d5565b9650602088013595506040880135945060608801359350608088013560ff81168114610c64578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215610c92578081fd5b81518015158114610bc7578182fd5b600060208284031215610cb2578081fd5b5035919050565b600060208284031215610cca578081fd5b5051919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015610deb57858101830151858201604001528201610dcf565b81811115610dfc5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526036908201527f5661756c742e617070726f76654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b60208082526039908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a2067726160408201527f636544617973206d75737420626520332d333635206461797300000000000000606082015260800190565b60208082526036908201527f5661756c742e657865637574654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b6020808252601e908201527f5661756c742e636c61696d3a207369676e617475726520657870697265640000604082015260600190565b6020808252601390820152725661756c742e636c61696d3a207265706c617960681b604082015260600190565b60208082526036908201527f4d696772617461626c652e5f636f6e74726f6c6c65725f3a2063616e206f6e6c6040820152753c9031b0b63632b210313c9031b7b73a3937b63632b960511b606082015260800190565b6020808252602f908201527f5661756c742e657865637574654d6967726174696f6e3a206e6f74206465737460408201526e696e6174696f6e206164647265737360881b606082015260800190565b60208082526026908201527f4d696772617461626c652e736574436f6e74726f6c6c65723a20746f2030206160408201526564647265737360d01b606082015260800190565b60208082526043908201527f4d696772617461626c652e5f76616c69645f3a2063616e6e6f742070726f636560408201527f65642c207468697320636f6e747261637420686173206265656e206d696772616060820152621d195960ea1b608082015260a00190565b60208082526029908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a20746f2060408201526830206164647265737360b81b606082015260800190565b60208082526019908201527f5661756c742e636c61696d3a20756e617574686f72697a656400000000000000604082015260600190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526020830191909152604082015260600190565b6000821982111561119b5761119b6111bf565b500190565b60008160001904831182151516156111ba576111ba6111bf565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111ea57600080fd5b5056fea2646970667358221220309376e66ca21a54581da8ded1f86303ca0c78bd47254d1bdb5fb101169baa2364736f6c63430008010033\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI['abi'],\n      this.contractAddress\n    );\n  }\n  async mintDToken(accountAddress, ...args) {\n    //return this._transact('claim', args)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async mint(accountAddress, ...args) {\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class Clp2Pool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    //console.log('hit clp2')\n    const res = await this._call('userInfo', [391, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { Clp2Pool } from '../contract/clp2_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\n//import { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseAirdropFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    //console.log('---airdrop key', key)\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseAirdropContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const clp2PoolFactory = (function () {\n  const clp2PoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\n      return clp2PoolInstanceMap[key];\n    }\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\n    clp2PoolInstanceMap[key] = clp2Pool;\n    return clp2Pool;\n  };\n})();\n\n// export const lpPoolFactory = (function () {\n//   const lpPoolInstanceMap = {};\n//   return (chainId, contractAddress, isProvider = false) => {\n//     let key;\n//     if (isProvider) {\n//       key = `${chainId}.${contractAddress}.isProvider`;\n//     } else {\n//       key = `${chainId}.${contractAddress}`;\n//     }\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\n//       return lpPoolInstanceMap[key];\n//     } else {\n//       let lpPool;\n//       const { type } = getLpContractAddress(chainId, contractAddress);\n//       console.log(`lp type: ${type}`);\n//       if (type === 'slp') {\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\n//       } else if (type === 'clp') {\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\n//       }\n//       lpPoolInstanceMap[key] = lpPool;\n//       return lpPool;\n//     }\n//   };\n// })();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n","export const getChainProviderUrls = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        \"https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06\",\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrls: no urls for chainId ${chainId}`)\n  }\n}\n\nexport const getAnnualBlockNumberConfig = () => {\n  return {\n    1: '2367422',\n    56: '10497304',\n    128: '10511369',\n    3: '2367422',\n    97: '10497304',\n    256: '10511369',\n  };\n};\n\nexport const MAX_UINT256 =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const MAX_INT256 =\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n","import { DeriEnv } from \"../../config\";\n\nexport const getPoolConfigList = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x19c2655A0e1639B189FB0CF06e02DC0254419D92',\n        pToken: '0x2AA5865BF556ab3f6Cd9405e565099f70234dF05',\n        lToken: '0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2',\n        router: '0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        bTokenId: '0',\n        initialBlock: '7884650',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v2',\n      },\n      {\n        pool: '0x19c2655A0e1639B189FB0CF06e02DC0254419D92',\n        pToken: '0x2AA5865BF556ab3f6Cd9405e565099f70234dF05',\n        lToken: '0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2',\n        router: '0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        bTokenId: '0',\n        initialBlock: '7884650',\n        bTokenSymbol: 'BUSD',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '56',\n        version: 'v2',\n      }\n    ];\n  } else {\n    return [\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n        bTokenId: '0',\n        initialBlock: '',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n        bTokenId: '0',\n        initialBlock: '',\n        bTokenSymbol: 'BUSD',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x5f59b256e411CB222D1790a08De492f4b6dA6E62',\n        bTokenId: '1',\n        initialBlock: '',\n        bTokenSymbol: 'BETH',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x5f59b256e411CB222D1790a08De492f4b6dA6E62',\n        bTokenId: '1',\n        initialBlock: '',\n        bTokenSymbol: 'BETH',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0xd2F37BADdB702FF778aA038C63b7068054d93508',\n        bTokenId: '2',\n        initialBlock: '',\n        bTokenSymbol: 'AUTO',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0xd2F37BADdB702FF778aA038C63b7068054d93508',\n        bTokenId: '2',\n        initialBlock: '',\n        bTokenSymbol: 'AUTO',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '97',\n        version: 'v2',\n      },\n    ];\n  }\n};\n\nexport const getFilteredPoolConfigList = (poolAddress, bTokenId, symbolId) => {\n  bTokenId = typeof bTokenId === 'number' ? bTokenId.toString() : bTokenId\n  symbolId = typeof symbolId === 'number' ? symbolId.toString() : symbolId\n  const poolConfigList = getPoolConfigList(DeriEnv.get())\n  const check = bTokenId != null\n    ? symbolId != null\n      ? (i) =>\n          i.pool === poolAddress &&\n          i.bTokenId === bTokenId &&\n          i.symbolId === symbolId\n      : (i) => i.pool === poolAddress && i.bTokenId === bTokenId\n    : (symbolId != null ? (i) => i.pool === poolAddress && i.symbolId === symbolId : (i) => i.pool === poolAddress);\n  if (poolConfigList.length > 0) {\n    const res = poolConfigList.filter(check)\n    if (res && res.length > 0) {\n      return res\n    }\n  }\n  throw new Error(`Cannot find the pool config by poolAddress(${poolAddress}) bTokenId(${bTokenId}) and symbolId(${symbolId})`)\n}\n\nexport const getPoolConfig = (poolAddress, bTokenId, symbolId) => {\n  const res =  getFilteredPoolConfigList(poolAddress, bTokenId, symbolId)\n  return res[0]\n}","import { DeriEnv } from \"../../config\"\n\nexport const getOracleConfigList = () => {\n  if (DeriEnv.get() === 'prod') {\n    return [];\n  } else {\n    return [\n      {\n        chainId: '97',\n        symbol: 'BTCUSD',\n        address: '0x72Dba14f90bFF7D74B7556A37205c1291Db7f1E9',\n      },\n      {\n        chainId: '97',\n        symbol: 'ETHUSD',\n        address: '0x36aF683ba23ef721780FCc0e64F25EB72B294020',\n      },\n    ];\n  }\n};\n\nexport const getOracleConfig = (chainId, symbol) => {\n  const filteredByChainId = getOracleConfigList().filter((c) => symbol ? c.chainId === chainId && c.symbol === symbol : c.chainId === chainId)\n  if (filteredByChainId.length > 0) {\n    if (symbol) {\n      return filteredByChainId[0]\n    } else {\n      return filteredByChainId\n    }\n  }\n  throw new Error('getOracleConfig(): invalid chainId or symbol.', chainId, symbol)\n}"],"sourceRoot":""}