{"version":3,"sources":["lib/web3js/factory/web3.js","utils/LoadableComponent.js","lib/web3js/v2/utils/convert.js","lib/web3js/v2/utils/network.js","lib/web3js/v2/utils/validate.js","lib/web3js/v2/utils/chain.js","lib/web3js/v2/utils/oracle.js","lib/web3js/v2/calculation/position.js","lib/web3js/v2/calculation/funding_rate.js","lib/web3js/v2/calculation/liquidity.js","lib/web3js/v2/factory.js","lib/web3js/v2/contract/contract_base.js","lib/web3js/v2/contract/abis.js","lib/web3js/v2/contract/perpetual_pool.js","lib/web3js/v2/contract/perpetual_pool_router.js","lib/web3js/v2/contract/b_token.js","lib/web3js/v2/contract/l_token.js","lib/web3js/v2/contract/p_token.js","lib/web3js/v2/api/mining_query_api.js","lib/web3js/v2/api/mining_transaction_api.js","lib/web3js/v2/api/api_globals.js","lib/web3js/v2/api/trade_query_api.js","lib/web3js/v2/api/trade_history_api.js","lib/web3js/v2/api/trade_transaction_api.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/utils.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","model/Config.js","lib/web3js/api_wrapper/config_api.js","lib/web3js/api_wrapper/mining_query_api.js","lib/web3js/api_wrapper/mining_transaction_api.js","lib/web3js/api_wrapper/trade_query_api.js","lib/web3js/api_wrapper/trade_transaction_api.js","lib/web3js/api_wrapper/trade_history_api.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/databaseApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/indexV2.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/api/apiGlobals.js","lib/polyfill/numberPolyfill.js","App.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Trading.js","model/Version.js","index.js","lib/web3js/config/database.js","lib/web3js/api/contractQueryApi.js","utils/utils.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/config/env.js","lib/web3js/v2/config/chain.js","lib/web3js/v2/config/contract.js"],"names":["metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","Error","Web3","web3Factory","web3InstanceMap","chainId","a","Object","keys","includes","console","log","getChainProviderUrl","providerUrl","providers","HttpProvider","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","deriToNatural","naturalToDeri","toFixed","numberToHex","utils","checkHttpServerIsAlive","url","fetch","ok","getAliveHttpServer","urls","i","length","normalizeChainId","res","toString","validateArgs","args","every","isNaN","parseFloat","getChainProviderUrls","getOracleUrl","poolAddress","symbolId","DeriEnv","get","symbol","getPoolConfig","addSymbolParam","getOracleInfo","retry","mode","json","getOraclePrice","responseJson","price","calculateEntryPrice","volume","cost","multiplier","eq","calculateLiquidationPrice","margin","minMaintenanceMarginRatio","tmp","minus","gt","plus","isOrderValid","marginHeld","liquidity","liquidityUsed","minMargin","success","error","calculateFundingRate","tradersNetVolume","fundingRateCoefficient","processFundingRate","fundingRate","annualBlockCount","blockNumbers","getAnnualBlockNumberConfig","parseInt","getAnnualBlockNumber","calculateBTokenDynamicEquities","bTokens","reduce","accum","b","discount","pnl","isBToken0RatioValid","bTokenId","amount","bToken0Ratio","totalDynamicEquity","dynamicEquity","lt","isPoolMarginRatioValid","userLiquidity","symbols","poolMarginRatio","totalCost","s","tradersNetCost","abs","getOrSet","perpetualPoolFactory","instanceMap","address","useInfura","key","PerpetualPool","perpetualPoolRouterFactory","PerpetualPoolRouter","bTokenFactory","BToken","lTokenFactory","LToken","pTokenFactory","PToken","MAX_GAS_AMOUNT","ContractBase","contractAddress","this","method","_init","contract","methods","call","accountAddress","gas","estimateGas","from","tx","self","_transactionReceipt","resolve","reject","eth","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","txRaw","to","data","encodeABI","request","params","Promise","_getTransactionReceipt","perpetualPoolAbi","perpetualPoolRouterAbi","bTokenAbi","lTokenAbi","pTokenAbi","contractAbi","bTokenLength","symbolLength","lTokenAddress","pTokenAddress","routerAddress","protocolFeeCollector","protocolFeeAccrued","Contract","all","getLengths","getAddresses","getParameters","_call","decimals0","minBToken0Ratio","minPoolMarginRatio","minInitialMarginRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","protocolFeeCollectRatio","bTokenAddress","swapperAddress","oracleAddress","decimals","cumulativePnl","feeRatio","cumulativeFundingRate","blockNumber","getBlock","eventName","filter","fromBlock","events","getPastEvents","toBlock","es","e","push","pool","_transact","isMaximum","MAX_VALUE","priceInfos","_balanceOf","allowance","processAsset","lastCumulativePnl","Array","isArray","map","processPosition","lastCumulativeFundingRate","getLiquidityInfo","lToken","perpetualPool","getBToken","getAsset","bTokenInfo","lTokenAsset","poolLiquidity","shares","maxRemovableShares","hares","getPoolLiquidity","db","databaseFactory","getValues","catch","err","addLiquidityWithPrices","router","symbolList","getFilteredPoolConfigList","c","perpetualPoolRouter","bTokenConfigList","bTokenIdList","promises","validation","prices","p","index","timestamp","v","r","transaction","removeLiquidityWithPrices","getSymbol","priceCache","_prices","split","set","val","Date","now","fundingRateCache","resourceMap","resource","getSpecification","bTokenSymbol","symbolInfo","parameterInfo","bSymbol","getPositionInfo","symbolConfigList","symbolIdList","pToken","getPosition","getMargins","getPositions","positionInfo","margins","positions","marginHeldBySymbol","unrealizedPnl","costTotal","averageEntryPrice","liquidationPrice","getWalletBalance","bToken","balanceOf","balance","isUnlocked","getEstimatedFee","cache","_getFundingRate","getEstimatedMargin","leverage","getFundingRateCache","poolconfigList","promiseList","bTokenInfoList","fundingRatePerBlock","liquidityUsedInAmount","getFundingRate","fundingRate0","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","getPoolBTokensBySymbolId","bTokensConfigList","symbolsConfigList","bTokenList","resultList","walletBalance","availableBalance","lte","fetchJson","resp","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","transactionHash","getTradeHistoryOnline","_getBlockInfo","filters","owner","_getPastEvents","number","result","returnValues","item","unshift","getTradeHistory","tradeHistory","getRestServerConfig","tradeFromBlock","tradeHistoryBlock","trim","tradeHistoryOnline","concat","sort","initialBlock","unlock","depositMarginWithPrices","addMarginWithPrices","withdrawMarginWithPrices","removeMarginWithPrices","tradeWithMarginWithPrices","newVolume","orderValidation","tradeWithPrices","closePositionWithPrices","negated","ChainProviderUrls","provider_urls","getChainProviderUrlsConfig","getContractAddressConfig","env","dToken","MiningVault","unit","version","getSlpContractAddressConfig","getClpContractAddressConfig","getClp2ContractAddressConfig","getLpContractAddressConfig","type","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","getDeriContractAddressConfig","Deri","Wormhole","1","56","128","3","97","256","getRedisWorkerQueneConfig","min","toChecksumAddress","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalWithPercentage","sd","deriToString","deriToBool","toNumber","hasInvalidArgsValue","some","getNetworkName","poolNetwork","getPoolContractAddress","dTokenAdress","MinningVaultAddress","getMiningVaultContractAddress","pools","getSlpContractAddress","getClp2ContractAddress","getClpContractAddress","getLpContractAddress","getDeriContractAddress","deriAddress","wormholeAddress","getBTCUSDPrice","format","bigNumber","toFormat","replaceAll","connectWallet","handleChainChanged","handleAccountChanged","accounts","account","on","location","reload","getUserWalletBalance","walletAddress","getBalance","fromWei","getLpLiquidityInfo","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","Config","makeObservable","observable","setAll","action","current","configs","isV2","total","cur","findIndex","getContractAddressConfig2","require","getPoolConfigListV2","getPoolConfigList","getLiquidityInfo2","getLiquidityInfoV2","getPoolLiquidity2","getPoolLiquidityV2","addLiquidity","addLiquidity2","addLiquidityV2","removeLiquidity","removeLiquidity2","removeLiquidityV2","getSpecification2","getSpecificationV2","getPositionInfo2","getPositionInfoV2","getWalletBalance2","getWalletBalanceV2","isUnlocked2","isUnlockedV2","getEstimatedFee2","getEstimatedFeeV2","getFundingRate2","getFundingRateV2","getEstimatedFundingRate2","getEstimatedFundingRateV2","getLiquidityUsed2","getLiquidityUsedV2","getEstimatedLiquidityUsed2","getEstimatedLiquidityUsedV2","unlock2","unlockV2","depositMargin","depositMargin2","depositMarginV2","withdrawMargin","withdrawMargin2","withdrawMarginV2","tradeWithMargin","tradeWithMargin2","tradeWithMarginV2","closePosition","closePosition2","closePositionV2","getTradeHistory2","getTradeHistoryV2","calculateLiquidityUsed","calculateShareValue","lTokenTotalSupply","calculateMaxRemovableShares","lTokenBalance","shareValue","removable","calculateMarginHeld","calculatePnl","calculateMaxWithdrawMargin","held","poolMaxVolume","message","getUserInfo","userAddress","deadline","nonce","valid","getUserInfoHarvest","harvestLp","harvestTrade","lp","trade","getUserInfoTotal","getUserInfoAll","userInfo","userInfoHarvest","userInfoTotal","assign","getPoolInfoApy","apy","volume1h","volume24h","getLpPoolInfoApy","apy2","getUserInfoInPool","getUserInfoAllForAirDrop","databaseAirdropFactory","v1","r1","s1","v2","r2","s2","baseToken","processLiquidateEvent","national","getLiquidateHistoryOnline","getHttpBase","getFundingRateCache2","liquidateFromBlock","liquidateHistoryBlock","liquidateHistoryOnline","pPool","maxWithdrawMargin","_transactPool","totalSupply","getStateValues","mintDToken","miningVaultAddress","miningVault","miningVaultPoolFactory","wsOnPromise","ws","event","JSON","parse","sendTradeTxToWorkerQuene","methodCall","wsInstance","send","res2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","_accountAddress","_price","_interval","_update","update","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","_ws","io","transports","path","id","Number","prototype","len","RangeError","Math","pow","round","numberArr","padNum","intNum","deciNum","lastNum","substr","changedInt","replace","num","dotPos","indexOf","need","j","DesktopApp","MobileApp","App","isBrowser","isMobile","Wallet","detail","isConnected","connect","loadWalletBalance","wallet","formatBalance","chainInfo","supported","setDetail","makeAutoObservable","supportV2","computed","supportChain","eqInNumber","Oracle","timeType","kData","paused","listeners","already","setIndex","initWebSocket","WebSocket","withCredentials","emit","obj","toUpperCase","low","high","open","close","time_type","unsubscribeBars","setSymbol","setTimeType","listener","callback","history","el","setPause","Position","spec","position","interval","load","setInfo","History","Trading","slideIncrementMargin","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setHistory","setSlideMargin","fundingRateTip","volumeDisplay","isNegative","isPositive","configInfo","oracle","contractInfo","historyInfo","defaultConfig","getDefaultConfig","find","loadByConfig","changed","isV1","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","pos","storeConfig","getConfigFromStore","setPaused","dividedBy","integerValue","currentSymbolMarginHeld","baseLine","incrementMarginHeld","multipliedBy","totalMarginHeld","available","exchanged","dynBalance","curVolume","originVolume","totalMargin","contractValue","versionKey","Version","setCurrent","versionFromSession","sessionStorage","getItem","notSave","setItem","trading","ReactDOM","render","StrictMode","document","getElementById","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","parameters","formatAddress","str1","str2","isLP","isSushiLP","isCakeLP","sessionStorageKey","stringify","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","clp2Pool","clp2PoolFactory","clpPool","clpPoolFactory","isProvider","POOL_ABI","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","priceDelayAllowance","signed","getGasPrice","gasPrice","args1","args2","CONTRACT_ABI","BTokenContract","_balance","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","keyArray","updateProviderUrl","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriFactory","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","miningVaultRouterFactory","_deriEnv","poolConfigList","check"],"mappings":"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","file":"static/js/main.a1ff6393.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return async(chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    console.log(\n      `==== web3Factory(${chainId}), please caution the access limits ===`\n    );\n    const providerUrl = await getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\n// == bg\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const fromWei = (value, unit='ether') => Web3.utils.fromWei(value, unit)\n\nexport const toWei = (value, unit='ether') => Web3.utils.toWei(value, unit)\n\nexport const toNatural = (value, num = 0) => BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\n// == convert\nexport const numberToHex = (value) => Web3.utils.numberToHex(value);","// == func\n// const np = () => {}\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const fetchWithTimeout = (url, options = {}) => {\n  const { timeout = 1200, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((resolve) => {\n      setTimeout(() => {\n        // reject(\n        //   new Error(\n        //     `Request for ${url} timed out after ${timeout} ms`,\n        //   ),\n        // )\n        resolve({timeout:true})\n      }, timeout)\n    }),\n  ])\n}\n\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n  return false;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    //console.log(url)\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n","import Web3 from 'web3';\n\n// validate\nexport const normalizeChainId = (chainId) => {\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256'];\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`);\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`);\n  }\n};\n\nexport const validateArgs = (...args) => args.every((i) => !isNaN(parseFloat(i)));","import {\n  getChainProviderUrls,\n  getAnnualBlockNumberConfig,\n} from '../config';\nimport { normalizeChainId } from './validate';\nimport { getAliveHttpServer } from './network';\n\nexport const getChainProviderUrl = async (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrls(chainId);\n  if (urls.length > 0) {\n    return await getAliveHttpServer(urls);\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  } else {\n    throw new Error(`Invalid annual block number with chainId: ${chainId}`);\n  }\n};\n","import { getPoolConfig } from '../config';\nimport { DeriEnv } from '../../config'\nimport { deriToNatural } from './convert';\n\nexport const getOracleUrl = (poolAddress, symbolId) => {\n  const env = DeriEnv.get();\n  const { symbol } = getPoolConfig(poolAddress, null, symbolId);\n  const addSymbolParam = (url, symbol = 'BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle4.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (poolAddress, symbolId) => {\n  let url = getOracleUrl(poolAddress, symbolId);\n  //console.log('oracle url', url);\n  let retry = 2;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors' });\n    if (res.ok) {\n      break;\n    }\n    retry -= 1;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\nexport const getOraclePrice = async (poolAddress, symbolId) => {\n  const responseJson = await getOracleInfo(poolAddress, symbolId);\n  let price = responseJson.price;\n  if (!price) {\n    price = '0';\n  }\n  return deriToNatural(responseJson.price).toString();\n};\n","import { bg, max } from '../utils';\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\n// export const calculateMaxWithdrawMargin = (\n//   price,\n//   volume,\n//   margin,\n//   cost,\n//   multiplier,\n//   minInitialMarginRatio\n// ) => {\n//   if (volume.eq(0)) {\n//     return margin;\n//   }\n//   const held = calculateMarginHeld(\n//     price,\n//     volume,\n//     multiplier,\n//     minInitialMarginRatio\n//   );\n//   const pnl = calculatePnl(price, volume, multiplier, cost);\n//   const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n//   return withdrawable;\n// };\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  //price,\n  margin,\n  marginHeld,\n  liquidity,\n  liquidityUsed,\n  // multiplier,\n  // minPoolMarginRatio,\n  // newVolume,\n) => {\n  const minMargin = marginHeld;\n  // const poolMaxVolume = liquidity.minus(liquidityUsed)\n  //   .div(minPoolMarginRatio)\n  //   .div(price)\n  //   .div(multiplier);\n  if (margin.gte(minMargin)) {\n    // if (\n    //   newVolume.lte(poolMaxVolume) &&\n    //   newVolume.gte(poolMaxVolume.negated())\n    // ) {\n    if (liquidity.minus(liquidityUsed).gte(0)) {\n      return { success: true };\n    }\n    return { success: false, error: 'Pool has insufficient liquidity' };\n  }\n  return { success: false, error: 'Trader has insufficient margin' };\n};\n","import { bg, getAnnualBlockNumber, validateArgs } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(multiplier)\n      .times(poolMarginRatio)\n      .div(liquidity)\n      .abs();\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio,\n    ];\n    throw new Error(`calculateLiquidityUsed: invalid args: ${args}`);\n  }\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(price)\n      .times(multiplier)\n      .times(multiplier)\n      .times(fundingRateCoefficient)\n      .div(liquidity);\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    ];\n    throw new Error(`calculateFundingRate: invalid args: ${args}`);\n  }\n};\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg } from '../utils'\n\nexport const calculateBTokenDynamicEquities = (bTokens) => {\n  //const dynamicEquities = bTokens.map((b) => bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n  //const totalDynamicEquity = dynamicEquities.reduce((accum, d) => accum.plus(d), bg(0))\n  const totalDynamicEquity = bTokens.reduce((accum, b) => accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)), bg(0))\n  return totalDynamicEquity\n}\n\nexport const isBToken0RatioValid = (bTokens, bTokenId, amount, bToken0Ratio) => {\n  bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).plus(amount)\n  const totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  const b = bTokens['0']\n  const dynamicEquity = bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)\n  //console.log('estimatedBToken0Ratio',dynamicEquity.div(totalDynamicEquity).toString())\n  // use 1 as efficient\n  if (\n    !totalDynamicEquity.eq(0) &&\n    dynamicEquity.div(totalDynamicEquity).times('1').lt(bToken0Ratio)\n  ) {\n    return { success: false, error: 'Trader has insufficient bToken0' };\n  } else {\n    return { success: true };\n  }\n}\n\nexport const isPoolMarginRatioValid = (bTokens, bTokenId, amount, userLiquidity, symbols, poolMarginRatio) => {\n  if (bg(amount).gte(userLiquidity)) {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(userLiquidity)\n  } else {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(amount)\n  }\n  let totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  let totalCost = bg(0)\n  for (let i=0; i<symbols.length; i++) {\n    const s = symbols[i]\n    if (!bg(s.tradersNetVolume).eq(0)) {\n      const cost = bg(s.tradersNetVolume).times(s.price).times(s.multiplier)\n      totalDynamicEquity = totalDynamicEquity.plus(s.tradersNetCost).minus(cost)\n      totalCost = totalCost.plus(cost.abs())\n    }\n  }\n  //console.log(totalDynamicEquity.toString(), totalCost.toString())\n  if (\n    !totalCost.eq(0) &&\n    totalDynamicEquity.div(totalCost).times('1').lt(poolMarginRatio)\n  ) {\n    return { success: false, error: 'Trader has insufficient liquidity' };\n  } else {\n    return { success: true };\n  }\n}\n","import Web3 from 'web3';\nimport {\n  PerpetualPool,\n  PerpetualPoolRouter,\n  BToken,\n  LToken,\n  PToken,\n} from './contract';\nimport { getChainProviderUrl } from './utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    if (typeof window.ethereum !== undefined) {\n      web3Instance = new Web3(window.ethereum);\n      return web3Instance;\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return {\n    async getOrSet(chainId) {\n      if (Object.keys(web3InstanceMap).includes(chainId)) {\n        return web3InstanceMap[chainId];\n      }\n      console.log(\n        `==== web3Factory(${chainId}), please caution the access limits ===`\n      );\n      const providerUrl = await getChainProviderUrl(chainId);\n      web3InstanceMap[chainId] = new Web3(\n        new Web3.providers.HttpProvider(providerUrl)\n      );\n      return web3InstanceMap[chainId];\n    },\n  };\n})();\n\nexport const perpetualPoolFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PerpetualPool(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const perpetualPoolRouterFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PerpetualPoolRouter(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new BToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new LToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\n","import { metaMaskWeb3, web3Factory } from '../factory';\nimport { numberToHex } from '../utils';\n\nconst MAX_GAS_AMOUNT = 832731;\n\nexport class ContractBase {\n  constructor(chainId, contractAddress, useInfura) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.useInfura = useInfura\n  }\n\n  async _init() {\n    if (this.useInfura) {\n      this.web3 = await web3Factory.getOrSet(this.chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while (retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        this.web3 = null\n        console.log(err)\n      }\n    }\n    if (retry === 0 && !res) {\n      console.log(`method call '${method} ${args}' failed with max retry 3.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    await this._init()\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (error) {\n        // ignore the metamask error\n      }\n    }\n    if (gas == 0 || gas > 10000000) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: numberToHex(gas),\n        value: numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n    //return await this.contract.methods[method](...args).send({from: accountAddress})\n  }\n\n}\n","\n/* eslint-disable */\nexport const perpetualPoolAbi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256[9]\",\n          \"name\": \"parameters\",\n          \"type\": \"uint256[9]\"\n        },\n        {\n          \"internalType\": \"address[4]\",\n          \"name\": \"addresses\",\n          \"type\": \"address[4]\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"AddLiquidity\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"AddMargin\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"liquidator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Liquidate\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"collector\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ProtocolFeeCollection\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"RemoveLiquidity\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"RemoveMargin\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"tradeVolume\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"price\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Trade\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"bTokenAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"swapperAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"oracleAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"decimals\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"discount\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"price\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"liquidity\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"pnl\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cumulativePnl\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPool.BTokenInfo\",\n          \"name\": \"info\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"addBToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"blength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"slength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"addLiquidity\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"addMargin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"symbol\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"oracleAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"multiplier\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"feeRatio\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"fundingRateCoefficient\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"price\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cumulativeFundingRate\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"tradersNetVolume\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"tradersNetCost\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPool.SymbolInfo\",\n          \"name\": \"info\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"addSymbol\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"targetPool\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"approvePoolMigration\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"collectProtocolFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sourcePool\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"executePoolMigration\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"getAddresses\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"lTokenAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"pTokenAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"routerAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"protocolFeeCollector\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getBToken\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"bTokenAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"swapperAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"oracleAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"decimals\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"discount\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"price\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"liquidity\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"pnl\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cumulativePnl\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPool.BTokenInfo\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getBTokenOracle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"getLengths\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"getParameters\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"decimals0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"minBToken0Ratio\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"minPoolMarginRatio\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"minInitialMarginRatio\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"minMaintenanceMarginRatio\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"minLiquidationReward\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"maxLiquidationReward\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"liquidationCutRatio\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"protocolFeeCollectRatio\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"getProtocolFeeAccrued\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getSymbol\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"symbol\",\n              \"type\": \"string\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"oracleAddress\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"multiplier\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"feeRatio\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"fundingRateCoefficient\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"price\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cumulativeFundingRate\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"tradersNetVolume\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"tradersNetCost\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPool.SymbolInfo\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getSymbolOracle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"liquidator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"blength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"slength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"liquidate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"blength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"slength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"removeLiquidity\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"blength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"slength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"removeMargin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"swapperAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"oracleAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"discount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setBTokenParameters\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"oracleAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeRatio\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fundingRateCoefficient\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setSymbolParameters\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"tradeVolume\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"blength\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"slength\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"trade\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ]\nexport const perpetualPoolRouterAbi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"lTokenAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"pTokenAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"liquidatorQualifierAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"migrationTimestamp\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"source\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"ExecuteMigration\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"migrationTimestamp\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"source\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"PrepareMigration\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"bTokenAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"swapperAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"oracleAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"discount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"addBToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"addLiquidity\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"symbolId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"timestamp\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"price\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"v\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"r\",\n              \"type\": \"bytes32\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"s\",\n              \"type\": \"bytes32\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\",\n          \"name\": \"infos\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"name\": \"addLiquidityWithPrices\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"addMargin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"symbolId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"timestamp\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"price\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"v\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"r\",\n              \"type\": \"bytes32\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"s\",\n              \"type\": \"bytes32\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\",\n          \"name\": \"infos\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"name\": \"addMarginWithPrices\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"symbol\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"oracleAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"multiplier\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeRatio\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fundingRateCoefficient\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"addSymbol\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"approveMigration\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"claimNewController\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"controller\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sourceRouter\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"executeMigration\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"liquidate\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"symbolId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"timestamp\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"price\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"v\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"r\",\n              \"type\": \"bytes32\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"s\",\n              \"type\": \"bytes32\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\",\n          \"name\": \"infos\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"name\": \"liquidateWithPrices\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"liquidatorQualifier\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"migrationDestination\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"migrationTimestamp\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pool\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"target\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"graceDays\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"prepareMigration\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"removeLiquidity\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"symbolId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"timestamp\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"price\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"v\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"r\",\n              \"type\": \"bytes32\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"s\",\n              \"type\": \"bytes32\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\",\n          \"name\": \"infos\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"name\": \"removeLiquidityWithPrices\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"removeMargin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"symbolId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"timestamp\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"price\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"v\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"r\",\n              \"type\": \"bytes32\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"s\",\n              \"type\": \"bytes32\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\",\n          \"name\": \"infos\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"name\": \"removeMarginWithPrices\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"swapperAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"oracleAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"discount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setBTokenParameters\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"qualifierAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setLiquidatorQualifier\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newController\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setNewController\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"poolAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setPool\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"oracleAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeRatio\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fundingRateCoefficient\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setSymbolParameters\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"tradeVolume\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"trade\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"tradeVolume\",\n          \"type\": \"int256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"symbolId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"timestamp\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"price\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint8\",\n              \"name\": \"v\",\n              \"type\": \"uint8\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"r\",\n              \"type\": \"bytes32\"\n            },\n            {\n              \"internalType\": \"bytes32\",\n              \"name\": \"s\",\n              \"type\": \"bytes32\"\n            }\n          ],\n          \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\",\n          \"name\": \"infos\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"name\": \"tradeWithPrices\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ]\nexport const bTokenAbi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name_\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"symbol_\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ]\nexport const lTokenAbi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name_\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"symbol_\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numBTokens_\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"liquidity\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"pnl\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"lastCumulativePnl\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"UpdateAsset\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"exists\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getAsset\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"liquidity\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"pnl\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"lastCumulativePnl\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct ILToken.Asset\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getAssets\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"liquidity\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"pnl\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"lastCumulativePnl\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct ILToken.Asset[]\",\n          \"name\": \"\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"numBTokens\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pool\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"num\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setNumBTokens\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newPool\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setPool\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalMinted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"liquidity\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"pnl\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"lastCumulativePnl\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct ILToken.Asset\",\n          \"name\": \"asset\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"updateAsset\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ]\nexport const pTokenAbi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name_\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"symbol_\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numSymbols_\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"numBTokens_\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"amount\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"UpdateMargin\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"volume\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"cost\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"lastCumulativeFundingRate\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"UpdatePosition\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"exists\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getMargin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getMargins\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int256[]\",\n          \"name\": \"\",\n          \"type\": \"int256[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getPosition\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"volume\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cost\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"lastCumulativeFundingRate\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPToken.Position\",\n          \"name\": \"\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getPositions\",\n      \"outputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"volume\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cost\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"lastCumulativeFundingRate\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPToken.Position[]\",\n          \"name\": \"\",\n          \"type\": \"tuple[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"numBTokens\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"numSymbols\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pool\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"num\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setNumBTokens\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"num\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setNumSymbols\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"newPool\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setPool\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalMinted\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"bTokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"name\": \"updateMargin\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"int256[]\",\n          \"name\": \"margins\",\n          \"type\": \"int256[]\"\n        }\n      ],\n      \"name\": \"updateMargins\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"symbolId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"components\": [\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"volume\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"cost\",\n              \"type\": \"int256\"\n            },\n            {\n              \"internalType\": \"int256\",\n              \"name\": \"lastCumulativeFundingRate\",\n              \"type\": \"int256\"\n            }\n          ],\n          \"internalType\": \"struct IPToken.Position\",\n          \"name\": \"position\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"updatePosition\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ]\n/* eslint-disable */","import { ContractBase } from './contract_base'\nimport { perpetualPoolAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\n\nexport class PerpetualPool extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = perpetualPoolAbi\n\n    this.bTokenLength = 0\n    this.symbolLength = 0\n\n    this.lTokenAddress = ''\n    this.pTokenAddress = ''\n    this.routerAddress = ''\n    this.protocolFeeCollector = ''\n\n    this.protocolFeeAccrued = 0\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  async _update() {\n    await Promise.all([\n      this.getLengths(),\n      this.getAddresses(),\n      this.getParameters(),\n    ]);\n  }\n\n  async getLengths() {\n    try {\n      const res = await this._call('getLengths')\n      //console.log(res[0])\n      if (res[0] && res[1]) {\n        this.bTokenLength = parseInt(res[0])\n        this.symbolLength = parseInt(res[1])\n      }\n    } catch(err) {\n      throw new Error(`PerpetualPool#_getLength error: ${err}`)\n    }\n  }\n  async getAddresses() {\n    try {\n      const res = await this._call('getAddresses')\n      this.lTokenAddress = res.lTokenAddress\n      this.pTokenAddress = res.pTokenAddress\n      this.routerAddress = res.routerAddress\n      this.protocolFeeCollector = res.protocolFeeCollector\n    } catch (err) {\n      throw new Error(`PerpetualPool#_getAddress error: ${err}`)\n    }\n  }\n  async getParameters() {\n    const res = await this._call('getParameters')\n    return {\n      decimals0: res.decimals0,\n      minBToken0Ratio: deriToNatural(res.minBToken0Ratio),\n      minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n      minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n      minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n      minLiquidationReward: deriToNatural(res.minLiquidationReward),\n      maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n      liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n      protocolFeeCollectRatio: deriToNatural(res.protocolFeeCollectRatio),\n    };\n  }\n  async getProtocolFeeAccrued() {\n    const res =  await this._call('getProtocolFeeAccrued')\n    this.protocolFeeAccrued = deriToNatural(res)\n  }\n  async getBToken(bTokenId) {\n    try {\n      //bTokenId = parseInt(bTokenId)\n      const res = await this._call('getBToken', [bTokenId]);\n      return {\n        bTokenAddress: res.bTokenAddress,\n        swapperAddress: res.bTokenAddress,\n        oracleAddress: res.oracleAddress,\n        decimals: res.decimals,\n        discount: deriToNatural(res.discount),\n        price: deriToNatural(res.price),\n        liquidity: deriToNatural(res.liquidity),\n        pnl: deriToNatural(res.pnl),\n        cumulativePnl: deriToNatural(res.cumulativePnl),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getBToken error: ${err}`);\n    }\n  }\n  async getBTokenOracle(bTokenId) {\n    //bTokenId = parseInt(bTokenId)\n    return await this._call('getBTokenOracle', [bTokenId])\n  }\n  async getSymbol(symbolId) {\n    //symbolId = parseInt(symbolId)\n    try {\n      const res =  await this._call('getSymbol', [symbolId])\n      return {\n        symbol: res.symbol,\n        oracleAddress: res.oracleAddress,\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        price: deriToNatural(res.price),\n        cumulativeFundingRate: deriToNatural(res.cumulativeFundingRate),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getSymbol error: ${err}`);\n    }\n  }\n  async getSymbolOracle(symbolId) {\n    //symbolId = parseInt(symbolId)\n    return await this._call('getSymbolOracle', [symbolId])\n  }\n\n  // trade history query methods\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    let amount\n    if (['56', '97'].includes(this.chainId)) {\n      amount = 999\n    } else {\n      amount = 4999\n    }\n    if ((fromBlock + amount) > to) {\n      amount = to - fromBlock\n    }\n    while (fromBlock <= to) {\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock: fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if ((fromBlock + amount) > to) {\n        amount = to - fromBlock\n      }\n    }\n    return events;\n  }\n}","import { ContractBase } from './contract_base'\nimport { perpetualPoolRouterAbi} from './abis';\nimport { naturalToDeri } from '../utils'\nimport { MAX_VALUE } from '../config';\n\nexport class PerpetualPoolRouter extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = perpetualPoolRouterAbi\n    this.poolAddress = ''\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  // === query ===\n  async pool() {\n    this.poolAddress = await this._call('pool');\n    return this.poolAddress\n  }\n\n  // === transaction ===\n  async addLiquidity(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidity',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeLiquidity(accountAddress, bTokenId, amount, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, MAX_VALUE],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async addMargin(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMargin',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeMargin(accountAddress, bTokenId, amount, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, MAX_VALUE],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async trade(accountAddress, symbolId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'trade',\n      [symbolId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  // with prices\n  async addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidityWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n  async removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, MAX_VALUE, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMarginWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  async removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, MAX_VALUE, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async tradeWithPrices(accountAddress, symbolId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'tradeWithPrices',\n      [symbolId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  // async liquidate(acountAddress) {\n  //   if (!this.poolAddress) {\n  //     await this.pool()\n  //   }\n  //   return await this._transact(\n  //     'liquidate',\n  //     [accountAddress],\n  //     accountAddress\n  //   );\n  // }\n\n}","import { ContractBase } from './contract_base'\nimport { bTokenAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\nimport { MAX_VALUE } from '../config'\n\n\nexport class BToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura);\n    this.contractAbi = bTokenAbi;\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init();\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  // === query ===\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balanceOf(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balanceOf(address) {\n    const [res, decimals] = await Promise.all([\n      this._balanceOf(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  async totalSupply() {\n    const res = await this._call('totalSupply');\n    return deriToNatural(res);\n  }\n\n  async isUnlocked(accountAddress, poolAddress) {\n    const allowance = await this._call('allowance', [\n      accountAddress,\n      poolAddress,\n    ]);\n    return bg(allowance).gt(0);\n  }\n\n  // === transaction ===\n  async unlock(accountAddress, poolAddress) {\n    return await this._transact(\n      'approve',\n      [poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  // async transfer() {\n  // call transfer\n  // }\n}","import { ContractBase } from './contract_base'\nimport { lTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processAsset = (res) => {\n  return {\n    liquidity: deriToNatural(res[0]),\n    pnl: deriToNatural(res[1]),\n    lastCumulativePnl: deriToNatural(res[2]),\n  }\n}\nexport class LToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = lTokenAbi\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  // === query ===\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async pool() {\n    return await this._call('pool');\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getAsset(accountAddress, bTokenId) {\n    const res = await this._call('getAsset', [accountAddress, bTokenId]);\n    if (Array.isArray(res)) {\n      return processAsset(res)\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress} ${bTokenId})`)\n    }\n  }\n  async getAssets(accountAddress) {\n    const res = await this._call('getAssets', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map(i => processAsset(i))\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress})`)\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from './contract_base'\nimport { pTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processPosition = (res) => {\n  return {\n    volume: deriToNatural(res.volume),\n    cost: deriToNatural(res.cost),\n    lastCumulativeFundingRate: deriToNatural(res.lastCumulativeFundingRate),\n  }\n}\nexport class PToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, useInfura)\n    this.contractAbi = pTokenAbi\n  }\n  async _init() {\n    if (!this.web3) {\n      await super._init()\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\n    }\n  }\n\n  // === query ===\n  async pool() {\n    return await this._call('pool');\n  }\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getMargin(accountAddress, symbolId) {\n    const res = await this._call('getMargin', [accountAddress, symbolId]);\n    return deriToNatural(res)\n  }\n  async getMargins(accountAddress) {\n    const res = await this._call('getMargins', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => deriToNatural(i))\n    }\n  }\n  async getPosition(accountAddress, symbolId) {\n    const res = await this._call('getPosition', [accountAddress, symbolId]);\n    if (Array.isArray(res)) {\n      return processPosition(res)\n    } else {\n      throw new Error(`PToken#getMargin: invalid result with (${accountAddress})`)\n    }\n  }\n  async getPositions(accountAddress) {\n    const res = await this._call('getPositions', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => processPosition(i))\n    }\n  }\n\n  // === transaction ===\n}","import { lTokenFactory, perpetualPoolFactory } from '../factory'\nimport { getPoolConfig } from '../config'\nimport { deriToNatural } from '../utils'\nimport { databaseFactory } from '../../factory/contracts';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n  useInfura,\n) => {\n  try {\n    const {lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    const lToken = lTokenFactory(chainId, lTokenAddress, useInfura);\n\n    const [bTokenInfo, lTokenAsset] = await Promise.all([\n      perpetualPool.getBToken(bTokenId),\n      lToken.getAsset(accountAddress, bTokenId),\n    ])\n    const { liquidity: poolLiquidity } = bTokenInfo;\n    const { liquidity } = lTokenAsset\n    return {\n      //totalSupply: lTokenTotalSupply.toString(),\n      poolLiquidity: poolLiquidity.toString(),\n      // shares: liquidity.toString(),\n      // shareValue: '1',\n      // maxRemovableShares: liquidity.toString()\n      shares: liquidity.toString(),\n      maxRemovableShares: liquidity.toString()\n    };\n  } catch (err) {\n    console.log(err)\n  }\n  return {\n    poolLiquidity: '',\n    hares: '',\n    maxRemovableShares: '',\n  };\n};\n\nexport const getPoolLiquidity = async (chainId, poolAddress, bTokenId) => {\n  // const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n  // const res = await perpetualPool.getBToken(bTokenId)\n  // return res.liquidity.toString()\n\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.${bTokenId}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol:'',\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n  return {\n    liquidity: '',\n    symbol:'',\n  };\n};","import { getFilteredPoolConfigList, getPoolConfig } from '../config'\nimport { perpetualPoolRouterFactory, perpetualPoolFactory, lTokenFactory } from '../factory'\nimport { getOracleInfo } from '../utils'\nimport { isBToken0RatioValid, isPoolMarginRatioValid } from '../calculation'\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const tx = await perpetualPoolRouter.addLiquidity(accountAddress, bTokenId, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n      res = { success: false, error: validation.error};\n   }\n   return res\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum=false,\n) => {\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const {lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n  const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n   let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n   promises = []\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       const tx = await perpetualPoolRouter.removeLiquidity(accountAddress, bTokenId, amount, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const addLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const promises = symbolList.map(async(s) => {\n        return await getOracleInfo(poolAddress, s)\n      })\n      const prices = await Promise.all(promises)\n      const priceInfos = prices.map((p, index) => {\n        return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n      })\n      const tx = await perpetualPoolRouter.addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const removeLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const {router:routerAddress, lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0')\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   for (let i=0; i<symbolList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       promises = symbolList.map(async(s) => {\n         return await getOracleInfo(poolAddress, s)\n       })\n       const prices = await Promise.all(promises)\n       const priceInfos = prices.map((p, index) => {\n         return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n       })\n       const tx = await perpetualPoolRouter.removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n","export const priceCache = (function(){\n  let _prices = {}\n  return {\n    get(poolAddress, symbolId) {\n      const key = `${poolAddress}.${symbolId}`\n      if (Object.keys(_prices).includes(key)) {\n        const [price, ] = _prices[key].split('|')\n        //if (parseInt(timestamp) - Date.now() < 10000) {\n          return price\n        //}\n      }\n      console.log('please init priceCache first')\n    },\n    // update(chainId, poolAddress, symbolId) {\n    //   // place holder\n    // },\n    set(poolAddress, symbolId, val) {\n      if (!isNaN(parseFloat(val))) {\n        const timestamp = Date.now().toString()\n        _prices[`${poolAddress}.${symbolId}`] = `${val}|${timestamp}`\n      }\n    }\n  }\n})()\n\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress, symbolId) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`fundingRateCache: key is not in exist: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, symbolId, resource) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();","import { perpetualPoolFactory, bTokenFactory, pTokenFactory } from '../factory';\nimport { getFilteredPoolConfigList, getPoolConfig} from '../config'\nimport {\n  calculateEntryPrice,\n  calculateLiquidationPrice,\n  calculateFundingRate,\n  processFundingRate,\n} from '../calculation';\nimport { getOraclePrice, bg, min, max } from '../utils'\nimport { fundingRateCache, priceCache } from '../api/api_globals';\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    const {symbol, bTokenSymbol } = getPoolConfig(poolAddress, bTokenId, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const [symbolInfo, parameterInfo] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n    ])\n    const { multiplier, feeRatio, fundingRateCoefficient} = symbolInfo\n    const {\n      minPoolMarginRatio,\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n      minLiquidationReward,\n      maxLiquidationReward,\n      liquidationCutRatio,\n      protocolFeeCollectRatio,\n    } = parameterInfo\n    return {\n      symbol: symbol,\n      bSymbol: bTokenSymbol,\n      multiplier: multiplier.toString(),\n      feeRatio: feeRatio.toString(),\n      fundingRateCoefficient: fundingRateCoefficient.toString(),\n      minPoolMarginRatio: minPoolMarginRatio.toString(),\n      minInitialMarginRatio: minInitialMarginRatio.toString(),\n      minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n      //minAddLiquidity: minAddLiquidity.toString(),\n      //redemptionFeeRatio: redemptionFeeRatio.toString(),\n      minLiquidationReward: minLiquidationReward.toString(),\n      maxLiquidationReward: maxLiquidationReward.toString(),\n      liquidationCutRatio: liquidationCutRatio.toString(),\n      protocolFeeCollectRatio: protocolFeeCollectRatio.toString(),\n    }\n  } catch (err) {\n    console.log(err)\n  }\n  return {\n    symbol: '',\n    bSymbol: '',\n    multiplier: '',\n    feeRatio: '',\n    fundingRateCoefficient: '',\n    minPoolMarginRatio: '',\n    minInitialMarginRatio: '',\n    minMaintenanceMarginRatio: '',\n    minLiquidationReward: '',\n    maxLiquidationReward: '',\n    liquidationCutRatio: '',\n    protocolFeeCollectRatio: '',\n  }\n};\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId, useInfura) => {\n  try {\n    const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    //console.log('bTokenList', bTokenList)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    const [price, symbolInfo, parameterInfo, positionInfo, margins, positions ] = await Promise.all([\n      getOraclePrice(poolAddress, symbolId),\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n      pToken.getPosition(accountAddress, symbolId),\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      //pToken.getMargin(accountAddress, symbolId),\n    ])\n    priceCache.set(poolAddress, symbolId, price)\n    const { volume, cost } = positionInfo\n    const { multiplier } = symbolInfo\n    const {\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n    } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).times(minInitialMarginRatio).abs())\n    }, bg(0))\n    const marginHeldBySymbol = bg(volume).abs().times(multiplier).times(price).times(minInitialMarginRatio)\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    //\n    const unrealizedPnl = bg(positions[symbolId].volume).times(price).times(multiplier).minus(positions[symbolId].cost)\n    //const unrealizedPnl = symbols.reduce((accum, a, index) => {\n      //return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    //}, bg(0))\n\n    const costTotal = positions.reduce((accum, a) => {\n      //console.log(index, a.cost.toString())\n      return accum.plus(bg(a.cost))\n    }, bg(0))\n    //console.log('cost', costTotal.toString())\n  return {\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n      margin: margin.toString(),\n      marginHeld: marginHeld.toString(),\n      marginHeldBySymbol: marginHeldBySymbol.toString(),\n      unrealizedPnl: unrealizedPnl.toString(),\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        costTotal,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    volume: '',\n    averageEntryPrice: '',\n    margin: '',\n    marginHeld: '',\n    unrealizedPnl: '',\n    liquidationPrice: '',\n  };\n}\n\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n  useInfura,\n) => {\n  const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\n  const balance = await bTokenFactory(chainId, bTokenAddress, useInfura).balanceOf(accountAddress)\n  return balance.toString()\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId, useInfura) => { \n  const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\n  const bToken = await bTokenFactory(chainId, bTokenAddress, useInfura)\n  return bToken.isUnlocked(accountAddress, poolAddress)\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId, useInfura) => {\n  let price = priceCache.get(poolAddress, symbolId)\n  if (!price) {\n    price = await getOraclePrice(poolAddress, symbolId)\n    priceCache.set(poolAddress, symbolId, price)\n  }\n  let cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n  if (!cache || !cache.multiplier) {\n    await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n  }\n  const { multiplier, feeRatio } = cache;\n  //console.log(volume, price, multiplier, feeRatio)\n  return bg(volume).abs().times(price).times(multiplier).times(feeRatio).toString()\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n  useInfura,\n) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n  const [price, symbolInfo ] = await Promise.all([\n    getOraclePrice(poolAddress, symbolId),\n    perpetualPool.getSymbol(symbolId),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const {multiplier} = symbolInfo\n  //console.log('m',multiplier.toString())\n  return bg(volume).abs().times(price).times(multiplier).div(bg(leverage)).toString()\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  return fundingRateCache.get(chainId, poolAddress, symbolId)\n}\n\nconst _getFundingRate = async(chainId, poolAddress, symbolId, useInfura) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n  const poolconfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n  let bTokenIdList = poolconfigList.map((i) => i.bTokenId)\n  let promiseList = []\n  for (let i=0; i<bTokenIdList.length; i++) {\n    promiseList.push(perpetualPool.getBToken(i))\n  }\n  const bTokenInfoList = await Promise.all(promiseList)\n  const liquidity = bTokenInfoList.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n  //const pnl = bTokenInfoList.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n  //console.log('pnl', pnl.toString())\n\n  const [price, symbolInfo, parameterInfo ] = await Promise.all([\n    getOraclePrice(poolAddress, symbolId),\n    perpetualPool.getSymbol(symbolId),\n    perpetualPool.getParameters(),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const { multiplier, fundingRateCoefficient, tradersNetVolume, feeRatio } = symbolInfo;\n  const { minPoolMarginRatio } = parameterInfo;\n  const fundingRateArgs = [\n    tradersNetVolume,\n    price,\n    multiplier,\n    liquidity,\n    fundingRateCoefficient,\n  ]\n  const fundingRatePerBlock = calculateFundingRate(...fundingRateArgs)\n  const fundingRate = processFundingRate(chainId, fundingRatePerBlock)\n  // const liquidityUsedArgs = [\n  //   tradersNetVolume,\n  //   price,\n  //   multiplier,\n  //   liquidity,\n  //   minPoolMarginRatio,\n  // ]\n  const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n  let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n  let promises = []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  const symbols = await Promise.all(promises)\n  //console.log('margin', margin.toString(), marginHeld.toString())\n  const liquidityUsedInAmount = symbols.reduce((accum, a) => {\n    return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).times(minPoolMarginRatio).abs())\n  }, bg(0))\n\n  //const liquidityUsed = liquidityUsedInAmount.div(liquidity)\n  const res = {\n    price,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    tradersNetVolume: tradersNetVolume.toString(),\n    liquidity: liquidity.toString(),\n    //pnl: pnl.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    fundingRatePerBlock: fundingRatePerBlock,\n    fundingRate: fundingRate,\n    liquidityUsed: liquidityUsedInAmount.div(liquidity)\n  }\n  fundingRateCache.set(chainId, poolAddress, symbolId, res)\n  return res\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId, useInfura) => {\n  try {\n    const res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    const { fundingRate, fundingRatePerBlock, liquidity, tradersNetVolume } = res\n    return {\n      fundingRate0: fundingRate.times(100).toString(),\n      fundingRatePerBlock: fundingRatePerBlock.toString(),\n      liquidity: liquidity.toString(),\n      volume: '-',\n      tradersNetVolume: tradersNetVolume.toString()\n    };\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    fundingRate0: '',\n    fundingRatePerBlock: '',\n    liquidity: '',\n    volume: '',\n    tradersNetVolume: '',\n  };\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    const args = [\n      bg(res.tradersNetVolume).plus(newNetVolume).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ]\n    let fundingRate1 = calculateFundingRate(...args)\n    fundingRate1 = processFundingRate(chainId, fundingRate1)\n    return {\n      fundingRate1: fundingRate1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    fundingRate1: '',\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    return {\n      liquidityUsed0: res.liquidityUsed.times(100).toString(),\n    };\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    liquidityUsed0: '',\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    // const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n    // const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    // const { volume } = pToken.getPosition(accountAddress, symbolId);\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    let promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let liquidityUsed0 = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume.plus(newNetVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume).abs())\n      }\n    }, bg(0))\n    //liquidityUsed0 = liquidityUsed0.times(res.minPoolMarginRatio)\n    //const liquidityUsed = bg(newNetVolume).times(res.price).times(res.multiplier).times(res.minPoolMarginRatio).div(res.liquidity)\n    const liquidityUsed1 = liquidityUsed0.times(res.minPoolMarginRatio).div(res.liquidity)\n    return {\n      liquidityUsed1: liquidityUsed1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(err)\n  }\n  return {\n    liquidityUsed1: '',\n  }\n}\n\n\nexport const getPoolBTokensBySymbolId = async(chainId, poolAddress, accountAddress, symbolId, useInfura) => {\n  try {\n    const bTokensConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n    const symbolsConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    let bTokenList = bTokensConfigList.map((i) => {\n      return {bTokenId: i.bTokenId, bTokenSymbol: i.bTokenSymbol, bTokenAddress: i.bToken}\n    })\n    let promiseList = []\n    for (let i=0; i<bTokenList.length; i++) {\n      promiseList.push(bTokenFactory(chainId, bTokenList[i].bTokenAddress, useInfura).balanceOf(accountAddress))\n    }\n    const resultList = await Promise.all(promiseList)\n    for (let i=0; i<bTokenList.length; i++) {\n      bTokenList[i].walletBalance = resultList[i].toString()\n    }\n\n    let bTokenIdList = bTokensConfigList.map((i) => i.bTokenId)\n    let symbolIdList = symbolsConfigList.map((i) => i.symbolId)\n    const [margins, positions, parameterInfo] = await Promise.all([\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      perpetualPool.getParameters(),\n    ]);\n    const { minInitialMarginRatio } = parameterInfo;\n\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n    //console.log('margin', margin.toString())\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs().times(minInitialMarginRatio))\n    }, bg(0))\n    //console.log('marginHeld', marginHeld.toString())\n\n    const pnl = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    //console.log('pnl', pnl.toString())\n\n    bTokenList = bTokenList.map((i, index) => {\n      if(!isNaN(parseFloat(bTokens[index].price)) || bTokens[index].price !== '0') {\n        i.availableBalance = max(min(margin.minus(marginHeld).plus(pnl).div(bTokens[index].price).div(bTokens[index].discount), margins[index]), bg(0)).toString()\n      } else {\n        i.availableBalance = '-'\n      }\n      return i\n    })\n    return bTokenList\n  } catch(err) {\n    console.log(err)\n  }\n  return []\n}\n","import { deriToNatural } from '../utils';\nimport { perpetualPoolFactory } from '../factory';\nimport { getFilteredPoolConfigList, getPoolConfig} from '../config'\n\nimport { getRestServerConfig, DeriEnv } from '../../config';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nconst processTradeEvent = async (\n  perpetualPool,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const symbolId = info.symbolId\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier[parseInt(symbolId)],\n    feeRatio[parseInt(symbolId)]\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier[parseInt(symbolId)]);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    //baseToken: bTokenSymbol,\n    symbolId,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  return res;\n};\nconst getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n  fromBlock\n) => {\n\n  const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n  const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n  //console.log('symbolIdList', symbolIdList);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n\n  let promises= []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  let symbols = await Promise.all(promises)\n\n  const multiplier = symbols.map((i) => i.multiplier.toString());\n  const feeRatio = symbols.map((i) => i.feeRatio.toString());\n\n  const filters = { owner: accountAddress };\n  let events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n\n  const result = [];\n  events  = events.filter((i) => i.returnValues.symbolId === symbolId)\n  //console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    const res = await processTradeEvent(\n      perpetualPool,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  try {\n    let tradeFromBlock, tradeHistory = [];\n    const res = await fetchJson(\n      `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}/${symbolId}`\n    );\n    if (res && res.success) {\n      tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n      if (res.data.tradeHistory && Array.isArray(res.data.tradeHistory)) {\n        tradeHistory = res.data.tradeHistory;\n      }\n    }\n    if (tradeHistory.length > 0) {\n      tradeHistory = tradeHistory\n        .filter((i) => i)\n        .map((i) => {\n          return {\n            direction: i.direction.trim(),\n            //baseToken: i.baseToken.trim(),\n            symbolId: i.symbolId,\n            price: deriToNatural(i.price).toString(),\n            notional: deriToNatural(i.notional).toString(),\n            volume: deriToNatural(i.volume).toString(),\n            transactionFee: deriToNatural(i.transactionFee).toString(),\n            transactionHash: i.transactionHash,\n            time: i.time.toString(),\n          };\n        });\n    }\n      //console.log('tradeHistory1',tradeHistory)\n    if (tradeFromBlock !== 0) {\n      // console.log(tradeFromBlock, liquidateFromBlock)\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline.concat(tradeHistory);\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    } else {\n\n      const {initialBlock} = getPoolConfig(poolAddress, null, symbolId)\n      tradeFromBlock = parseInt(initialBlock);\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline;\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    }\n  } catch(err) {\n    console.log(err)\n  }\n  return []\n};\n","import { isOrderValid } from '../calculation';\nimport { getPoolConfig, getFilteredPoolConfigList } from '../config'\nimport {\n  bTokenFactory,\n  perpetualPoolRouterFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n} from '../factory';\nimport { getOracleInfo, bg } from '../utils';\n\nexport const unlock = async (chainId, poolAddress, accountAddress, bTokenId) => {\n   const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\n  const bToken = bTokenFactory(chainId, bTokenAddress);\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress, poolAddress)\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.addMargin(accountAddress, bTokenId, amount);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.removeMargin(accountAddress, bTokenId, amount, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePosition = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}\n\nexport const depositMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress } = getPoolConfig(poolAddress);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   //const [price, symbolInfo, parameterInfo, positions] = await Promise.all([\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId)\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    //console.log('liquidity', liquidity.toString())\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0')\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n    // const pnl = bTokens.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n    // console.log('pnl', pnl.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n     promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePositionWithPrices = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig(poolAddress);\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').map(c => c.symbolId)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n     const promises = symbolList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}","export const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '5288684',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool: '0x919F97417857781f754e00CCCD9100f78B759818',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7475766',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11949433',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '11860070',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '2557914',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n        version: 'v1',\n      },\n    ];\n  }\n  // develop environment\n  // console.log('-- test ---')\n  return [\n    {\n      pool: '0x67eE8f0CB17e750219Bd58d433D52ab4B3d8A081',\n      bToken: '0x8F038C454B6E68B2988706a1a5f78dE2C4634097',\n      pToken: '0xad794Adc3Ed6085A79Ba3e2FCD13Df8d33d462Ec',\n      lToken: '0x37732230ac101f59490762Ef73Be43B5E5Ec4949',\n      initialBlock: '9986356',\n      bTokenSymbol: 'USDT',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '3',\n      version: 'v1',\n    },\n    {\n      pool: '0xFFe402106E8F73F0A44C7350C2b734e048f448f2',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x5FeF67FD24f37b90E0c96324380F63413dF22f78',\n      lToken: '0xCdDbf76F76B9F95135F5D531fefc344258ff322a',\n      initialBlock: '7796681',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n      version: 'v1',\n    },\n    {\n      pool: '0x02A614844212f71049c469902F7A20F6540a2792',\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\n      pToken: '0x4396025914025F1C8B74788bF7c64f879064FbA6',\n      lToken: '0x2E80928a9eC105FE79cfC4B54c65d185AC3b7E9C',\n      initialBlock: '8108552',\n      bTokenSymbol: 'BUSD',\n      symbol: 'COIN',\n      unit: 'COIN',\n      chainId: '97',\n      version: 'v1',\n    },\n    {\n      pool: '0xE5a4fCd3CE3a824bF15D5FABd390cF44E83AbE8B',\n      bToken: '0x02c9840fD044abFd58E9674ecc232e8b1F323fE8',\n      pToken: '0xfa803C4528A1b9f91DFc5f8b4ff940f9FE4F4635',\n      lToken: '0xbD57300A178075F774b5F0F9f367B9A2912b7b5e',\n      initialBlock: '3663327',\n      bTokenSymbol: 'HUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '256',\n      version: 'v1',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [\n    ];\n  }\n};\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP ONSEN',\n        symbol: '--',\n      }\n    ]\n  } else {\n    return []\n  }\n}\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n        type: 'slp',\n      },\n      {\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n        type: 'clp',\n      },\n      {\n        pool: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP ONSEN',\n        symbol: '--',\n        type: 'clp2',\n      },\n    ];\n  } else {\n    return [\n    ];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress= (chainId) => {\n  const configs = [\n      {\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n        chainId: '56'\n      }\n    ]\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter\n  } else {\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\n  }\n\n}\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getAnnualBlockNumberConfig = () => ({\n  1: '2367422',\n  56: '10497304',\n  128: '10511369',\n  3: '2367422',\n  97: '10497304',\n  256: '10511369',\n});\n","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    //return 'https://api.deri.finance';\n    return 'https://alphaapi.deri.finance';\n  } else {\n    // for test\n    //return 'https://apitest.deri.finance';\n    //return 'http://localhost:8082';\n    return 'https://alphaapitest.deri.finance';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getClp2ContractAddressConfig,\n  getLpContractAddressConfig,\n  getAnnualBlockNumberConfig,\n  getDeriContractAddressConfig,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n//const np = () => {}\n//const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\n// fetchWithTimeout\n// const fetchWithTimeout = (url, delay=2000, options={}, onTimeout=np) => {\n//   const timer = new Promise((resolve) => {\n//     setTimeout(resolve, delay, {\n//       timeout: true,\n//     });\n//   });\n//   return Promise.race([fetch(url, options), timer]).then((response) => {\n//     if (response.timeout) {\n//       onTimeout();\n//     }\n//     return response;\n//   });\n// };\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    //const response = await fetch(url);\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\nexport const getAliveHttpServer = async (urls = []) => {\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    default:\n      throw new Error('The networkId is not valid');\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  // console.log(\n  //   `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  // );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getAnnualBlockNumber = (chainId) => {\n  const blockNumbers = getAnnualBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle4.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  let url = getOracleUrl(chainId, poolAddress);\n  //console.log('oracle url', url);\n  let retry = 5;\n  //let timeout = 1000;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors' });\n    //if (res && !res.timeout) {\n    if (res.ok) {\n      break;\n    }\n    //console.log('get oracle info timeout')\n    retry -= 1;\n    //timeout += 800;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(5).`);\n  }\n  return await res.json();\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  const responseJson = await getOracleInfo(chainId, poolAddress);\n  let price = responseJson.price;\n  if (!price) {\n    price = '0';\n  }\n  return deriToNatural(responseJson.price).toString();\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getAliveHttpServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256']\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`)\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`)\n  }\n};","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    const chainId = parseInt(\n      await window.ethereum.request({ method: 'net_version' })\n    );\n    // const chainId = hexToNumber(\n    //   await window.ethereum.request({ method: 'eth_chainId' })\n    // );\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import {\n  getSlpLiquidityInfo,\n  getSlpWalletBalance,\n  isSlpUnlocked,\n  unlockSlp,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './slpPoolApi';\nimport {\n  getClp2LiquidityInfo,\n  getClp2WalletBalance,\n  isClp2Unlocked,\n  unlockClp2,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './clp2PoolApi';\nimport {\n  getClpLiquidityInfo,\n  getClpWalletBalance,\n  isClpUnlocked,\n  unlockClp,\n  // addClpLiquidity,\n  // removeClpLiquidity,\n} from './clpPoolApi';\n\nimport {\n  addSlpLiquidity2 as addSlpLiquidity,\n  removeSlpLiquidity2 as removeSlpLiquidity,\n  addClpLiquidity2 as addClpLiquidity,\n  removeClpLiquidity2 as removeClpLiquidity,\n  addClp2Liquidity2 as addClp2Liquidity,\n  removeClp2Liquidity2 as removeClp2Liquidity,\n} from './contractTransactionApiV2'\nimport { getLpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getLpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Add liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp') {\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp2') {\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\n  } else {\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Remove liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await removeSlpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp') {\n    return await removeClpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp2') {\n    return await removeClp2Liquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else {\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Check account is unlocked in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Unlock the account in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await unlockSlp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await unlockClp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await unlockClp2(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`unlockLp(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Get account balance in lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getLpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\n  }\n};\n","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  load(version){\n    const current = version && version.current;\n    let configs = getContractAddressConfig(DeriEnv.get(),current)\n    if(version){\n      configs = configs.filter(c => c.version === version.current)\n      //v2 不需要展示base token,需要合并相同的base token\n      if(version.isV2){\n        configs = configs.reduce((total,cur) => {\n          const pos = total.findIndex(c => c.symbolId === cur.symbolId);\n          if(pos === -1){\n            total.push(cur)\n          }\n          return total;\n        },[])\n      }\n    }\n    this.setAll(configs)\n    return configs;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","const { getContractAddressConfig:getContractAddressConfig2} = require(\"../config\");\nconst { getPoolConfigList:getPoolConfigListV2} = require(\"../v2/config\")\n\nexport const getContractAddressConfig = (env = 'dev', version) => {\n  if (!version || version === '1' || version === 'v1') {\n    return getContractAddressConfig2(env)\n  } else if (version === '2' || version === 'v2') {\n    return getPoolConfigListV2(env).concat(getContractAddressConfig2(env))\n  } else {\n    throw new Error(`getPoolContractAddress: invalid version: ${version}`)\n  }\n}","import { getLiquidityInfo2 } from '../api/restApi';\nimport { getPoolLiquidity as getPoolLiquidity2 } from '../api/databaseApi';\nimport { \n  getLiquidityInfo as getLiquidityInfoV2,\n  getPoolLiquidity as getPoolLiquidityV2,\n } from '../v2';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getLiquidityInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getLiquidityInfoV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const getPoolLiquidity = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getPoolLiquidity2(chainId, poolAddress)\n  } else {\n    return getPoolLiquidityV2(chainId, poolAddress, bTokenId)\n  }\n};","import {addLiquidity2, removeLiquidity2 } from '../api/contractTransactionApiV2';\nimport {\n  // addLiquidity as addLiquidityV2,\n  // removeLiquidity as removeLiquidityV2\n  addLiquidityWithPrices as addLiquidityV2,\n  removeLiquidityWithPrices as removeLiquidityV2,\n} from '../v2';\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return addLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return addLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if (bTokenId === undefined) {\n    return removeLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return removeLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum,\n    );\n  }\n}\n","import {\n  getPositionInfo as getPositionInfo2,\n  isUnlocked as isUnlocked2,\n  getEstimatedMargin as getEstimatedMargin2,\n  getEstimatedFee as getEstimatedFee2,\n  getEstimatedFundingRate as getEstimatedFundingRate2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsed2,\n  getWalletBalance as getWalletBalance2,\n} from '../api/contractQueryApi'\n\nimport {\n  getSpecification2,\n  getFundingRate2,\n  getLiquidityUsed2,\n  getFundingRateCache2,\n} from '../api/restApi'\n//import { bTokenFactory } from '../factory/contracts'\n\nimport {\n  getPositionInfo as getPositionInfoV2,\n  isUnlocked as isUnlockedV2,\n  getEstimatedMargin as getEstimatedMarginV2,\n  getEstimatedFee as getEstimatedFeeV2,\n  getEstimatedFundingRate as getEstimatedFundingRateV2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsedV2,\n  getSpecification as getSpecificationV2,\n  getWalletBalance as getWalletBalanceV2,\n  getFundingRate as getFundingRateV2,\n  getLiquidityUsed as getLiquidityUsedV2,\n  getFundingRateCache as getFundingRateCacheV2,\n} from '../v2'\n\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getSpecification2(chainId, poolAddress)\n  } else {\n    return getSpecificationV2(chainId, poolAddress, bTokenId, symbolId)\n  }\n}\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getPositionInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getPositionInfoV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n}\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getWalletBalance2(chainId, poolAddress, accountAddress)\n  } else {\n    return getWalletBalanceV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => { \n  if (bTokenId === undefined) {\n    return isUnlocked2(chainId, poolAddress, accountAddress)\n  } else {\n    return isUnlockedV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  if (symbolId === undefined) {\n    return getEstimatedFee2(chainId, poolAddress, volume)\n  } else {\n    return getEstimatedFeeV2(chainId, poolAddress, volume, symbolId)\n  }\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedMargin2(chainId, poolAddress, accountAddress, volume, leverage)\n  } else {\n    return getEstimatedMarginV2(chainId, poolAddress, accountAddress, volume, leverage, symbolId)\n  }\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRate2(chainId, poolAddress)\n  } else {\n    return getFundingRateV2(chainId, poolAddress, symbolId)\n  }\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedFundingRate2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedFundingRateV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return getLiquidityUsed2(chainId, poolAddress)\n  } else {\n    return getLiquidityUsedV2(chainId, poolAddress, symbolId)\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedLiquidityUsed2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedLiquidityUsedV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRateCache2(chainId, poolAddress)\n  } else {\n    return getFundingRateCacheV2(chainId, poolAddress, symbolId)\n  }\n}\n","import { unlock as unlock2 } from '../api/contractTransactionApi';\nimport {\n  tradeWithMargin2,\n  closePosition2,\n  depositMargin2,\n  withdrawMargin2,\n} from '../api/contractTransactionApiV2';\nimport {\n  unlock as unlockV2,\n  // tradeWithMargin as tradeWithMarginV2,\n  // closePosition as closePositionV2,\n  // depositMargin as depositMarginV2,\n  // withdrawMargin as withdrawMarginV2,\n  tradeWithMarginWithPrices as tradeWithMarginV2,\n  depositMarginWithPrices as depositMarginV2,\n  withdrawMarginWithPrices as withdrawMarginV2,\n  closePositionWithPrices as closePositionV2,\n} from '../v2';\n\nexport const unlock = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId\n) => {\n  if(bTokenId === undefined) {\n    return unlock2(chainId, poolAddress, accountAddress)\n  } else {\n    return unlockV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if(bTokenId === undefined) {\n    return depositMargin2(chainId, poolAddress, accountAddress, amount)\n  } else {\n    return depositMarginV2(chainId, poolAddress, accountAddress, amount, bTokenId)\n  }\n};\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if(bTokenId === undefined) {\n    return withdrawMargin2(chainId, poolAddress, accountAddress, amount)\n  } else {\n    return withdrawMarginV2(chainId, poolAddress, accountAddress, amount, bTokenId, isMaximum)\n  }\n};\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n  if(symbolId === undefined) {\n    return tradeWithMargin2(chainId, poolAddress, accountAddress, newVolume)\n  } else {\n    return tradeWithMarginV2(chainId, poolAddress, accountAddress, newVolume, symbolId)\n  }\n};\n\nexport const closePosition = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if(symbolId === undefined) {\n    return closePosition2(chainId, poolAddress, accountAddress)\n  } else {\n    return closePositionV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n};\n","\nimport {getTradeHistory2} from '../api/restApi';\nimport { \n  getTradeHistory as getTradeHistoryV2\n } from '../v2';\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getTradeHistory2(chainId, poolAddress, accountAddress);\n  } else {\n    return getTradeHistoryV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      symbolId,\n    );\n  }\n}","import { bg, getAnnualBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  return bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n}\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getAnnualBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.apy2`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, apy2, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        apy2: deriToNatural(apy2).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\n//   const db = databaseFactory(true);\n//   try {\n//     const poolNetwork = getNetworkName(chainId);\n//     const res = await db\n//       .getValues([\n//         `${poolNetwork}.${poolAddress}.apy`,\n//         `${poolNetwork}.${poolAddress}.apy2`,\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\n//       ])\n//       .catch((err) => console.log('getPoolInfoApy', err));\n//     if (res) {\n//       const [apy, apy2, volume1h, volume24h] = res;\n//       return {\n//         apy: deriToNatural(apy).toString(),\n//         apy2: deriToNatural(apy2).toString(),\n//         volume1h: deriToNatural(volume1h).toString(),\n//         volume24h: deriToNatural(volume24h).toString(),\n//       };\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseAirdropFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import {\n  getPoolContractAddress,\n  //naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  console.log('hit');\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  //const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","export {\n  DeriEnv,\n  //getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\nexport * from './calculation';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  // isUnlocked,\n  // getEstimatedMargin,\n  // getEstimatedFee,\n  // getEstimatedFundingRate,\n  // getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n  // getFundingRate,\n  //getPositionInfo,\n} from './api/contractQueryApi';\nexport {\n  //unlock,\n  //depositMargin,\n  //withdrawMargin,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mint,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport {\n  getUserInfo,\n  getUserInfoHarvest,\n  getUserInfoTotal,\n  getUserInfoAll,\n  getPoolInfoApy,\n  getLpPoolInfoApy,\n  getUserInfoInPool,\n  getUserInfoAllForAirDrop,\n} from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\n//getSpecification2 as getSpecification,\n// getPositionInfo2 as getPositionInfo,\n//getLiquidityInfo2 as getLiquidityInfo,\n//getWalletBalance2 as getWalletBalance,\n//getFundingRate2 as getFundingRate,\n//getLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\ngetDeriBalance2 as getDeriBalance,\n//getTradeHistory2 as getTradeHistory,\n} from './api/restApi';\n\n// export {\n  //tradeWithMargin2 as tradeWithMargin,\n  //closePosition2 as closePosition,\n  //depositMargin2 as depositMargin,\n  //withdrawMargin2 as withdrawMargin,\n  //addLiquidity2 as addLiquidity,\n  //removeLiquidity2 as removeLiquidity,\n// } from './api/contractTransactionApiV2'\n\nexport * from './api/lpPoolApi';\n\nexport * from './api_wrapper';\n\nexport {\n  getPoolConfigList,\n  getFilteredPoolConfigList,\n  getPoolBTokensBySymbolId,\n} from './v2';\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from './contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from './slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from './clpPoolApi'\nimport {\n  addClp2Liquidity,\n  removeClp2Liquidity,\n} from './clp2PoolApi'\nimport { wsInstance } from './apiGlobals'\nimport { getRestServerConfig, DeriEnv } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 3000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","// eslint-disable-next-line no-extend-native\nNumber.prototype.toFixed = function(len){\n  if(len>20 || len<0){\n      throw new RangeError('toFixed() digits argument must be between 0 and 20');\n  }\n  // .123转为0.123\n  var number = Number(this);\n  if (isNaN(number) || number >= Math.pow(10, 21)) {\n      return number.toString();\n  }\n  if (typeof (len) == 'undefined' || len == 0) {\n      return (Math.round(number)).toString();\n  }\n  var result = number.toString(),\n      numberArr = result.split('.');\n\n  if(numberArr.length<2){\n      //整数的情况\n      return padNum(result);\n  }\n  var intNum = numberArr[0], //整数部分\n      deciNum = numberArr[1],//小数部分\n      lastNum = deciNum.substr(len, 1);//最后一个数字\n  \n  if(deciNum.length == len){\n      //需要截取的长度等于当前长度\n      return result;\n  }\n  if(deciNum.length < len){\n      //需要截取的长度大于当前长度 1.3.toFixed(2)\n      return padNum(result)\n  }\n  //需要截取的长度小于当前长度，需要判断最后一位数字\n  result = intNum + '.' + deciNum.substr(0, len);\n  if(parseInt(lastNum, 10)>=5){\n      //最后一位数字大于5，要进位\n      var times = Math.pow(10, len); //需要放大的倍数\n      var changedInt = Number(result.replace('.',''));//截取后转为整数\n      changedInt++;//整数进位\n      changedInt /= times;//整数转为小数，注：有可能还是整数\n      result = padNum(changedInt+'');\n  }\n  return result;\n  //对数字末尾加0\n  function padNum(num){\n      var dotPos = num.indexOf('.');\n      if(dotPos === -1){\n          //整数的情况\n          num += '.';\n          for(var i = 0;i<len;i++){\n              num += '0';\n          }\n          return num;\n      } else {\n          //小数的情况\n          var need = len - (num.length - dotPos - 1);\n          for(var j = 0;j<need;j++){\n              num += '0';\n          }\n          return num;\n      }\n  }\n}","import {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App() {\n  \n  if(isBrowser){\n    return <DesktopApp/>\n  }\n  if(isMobile){\n    return <MobileApp/>\n  }\n}\n\nexport default App;\n","\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance, eqInNumber } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      setDetail : action,\n      supportV2 : computed,\n      supportChain : computed   \n    })\n  }\n\n  isConnected = () => !!this.detail.account;\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);        \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    const env = DeriEnv.get();\n    const {chainInfo} = config[env]\n    \n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n    }\n    this.setDetail(detail)\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  setDetail(detail){\n    this.detail = detail;\n  }\n\n  get supportV2() {\n    return eqInNumber(this.detail.chainId,56) || eqInNumber(this.detail.chainId,97)\n  }\n\n  get supportChain(){\n    return this.detail.supported\n  }\n\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nclass Oracle {\n  symbol = 'BTCUSD'\n  timeType = 'min'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n  listeners = {}\n  already = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n    this.initWebSocket()\n  }\n\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket('wss://oracle4.deri.finance', {        \n        transports: ['websocket'],\n        withCredentials: true\n      })\n      this.ws.on('connect',() => {\n        if(this.already){\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n          console.log('ws is reconnected already')\n        }\n        console.log('ws is already connected');\n      });\n    }    \n  }\n\n\n  load(symbol,timeType = 'min'){\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          for(const key of Object.keys(this.listeners)){\n            if(typeof this.listeners[key] === 'function'){\n              this.listeners[key](obj)\n            }\n          }\n        }\n      }\n    })\n    if(symbol !== this.symbol){\n      this.unsubscribeBars(this.symbol);\n    }\n    this.setSymbol(symbol)\n    this.setTimeType(timeType);\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n    this.already = true\n  }\n\n  addListener(id,listener){\n    if(!this.listeners[id]) {\n      this.listeners[id] = listener\n    }    \n  }\n\n\n\n  unsubscribeBars(symbol){\n    this.ws.emit('un_get_kline_update', {\n      symbol : symbol, 'time_type' : 'min'\n    })\n  }\n\n\n  //暂不用\n  loadHistory(symbol,timeType,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        console.log('history ->',history[history.length-1].time)\n        callback(history)\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n    // this.emit(symbol);\n  }\n\n  // start(symbol){\n  //   this.initWebSocket();\n  //   this.loadIndex(symbol);\n  //   this.ws.on('kline_update',data => {\n  //     const obj = {}\n  //     let time = data.time\n  //     if (data.symbol === this.symbol) {\n  //       obj.time = time \n  //       obj.low = Number(data.low)\n  //       obj.high = Number(data.high)\n  //       obj.open = Number(data.open)\n  //       obj.close = Number(data.close)\n  //       obj.volume = Number(data.volume)\n  //       this.setIndex(obj.close)\n  //     }\n  //   })\n  // }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setTimeType(timeType){\n    this.timeType = timeType;\n  }\n\n  setPause(paused){\n    this.paused = paused\n  }\n}\n\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n\n  callback = () => {}\n   wallet = null;\n   spec = null\n \n\n   async load(wallet,spec,callback){\n     if(wallet && wallet.isConnected() && wallet.supportChain && spec && spec.pool){\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account,spec.symbolId)\n      if(position){\n        if(callback){\n          callback(position)\n        }\n      }\n      this.start(wallet,spec,callback)\n      return position;\n     }\n   }\n\n   start(wallet,spec,callback){\n     if(!this.interval){\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \n      if(wallet){\n        this.wallet= wallet; \n      }\n      if(spec){\n        this.spec = spec\n      }\n      if(callback){\n        this.callback = callback;\n      }\n     }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(wallet,spec,callback){\n     this.start(wallet,spec,callback || this.callback)\n   }\n\n   \n\n\n \n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n  info = {\n    bSymbol:'BUSD',\n    symbol:'BTCUSD',\n    multiplier:'0.0001',\n    fundingRateCoefficient:'0.0000025',\n    minInitialMarginRatio:0.1,\n    minMaintenanceMarginRatio:0.05,\n    feeRatio:0.0005,\n  }\n\n  async load(wallet,config){\n    if(wallet && wallet.supportChain && config && config.pool !== this.info.pool){\n      const spec = await getSpecification(wallet.detail.chainId,config.pool,config.bTokenId,config.symbolId);\n      this.setInfo(spec)\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info\n  }\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\n\n\nexport default class History {\n\n   async load(wallet,config){\n      if(wallet && wallet.detail.chainId && config && config.pool){\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account,config.symbolId);    \n         return all;\n      } else {\n         return []\n      }\n   }\n}","import { observable, action, computed, makeObservable } from \"mobx\";\nimport Oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport History from './History'\nimport Config from \"./Config\";\nimport { eqInNumber, storeConfig, getConfigFromStore } from \"../utils/utils\";\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\nimport { bg } from \"../lib/web3js/v2\";\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  version = null;\n  wallet = null;\n  configs = [] \n  config = null;\n  index = ''\n  volume = ''\n  paused = false\n  slideIncrementMargin = 0\n  position = {}\n  contract = {}\n  fundingRate = {}\n  history = []\n  userSelectedDirection = 'long'\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      slideIncrementMargin : observable,\n      fundingRate : observable,\n      position : observable,\n      history : observable,\n      contract : observable,\n      userSelectedDirection : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setFundingRate : action,\n      setHistory : action,\n      setSlideMargin : action,\n      amount : computed,\n      // amountIncrement : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed,\n      isNegative : computed,\n      isPositive : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = new Oracle();\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n    this.historyInfo = new History()\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet,version){    \n    if(version){\n      this.version = version\n    }\n    const all = await this.configInfo.load(version);\n    //如果连上钱包，有可能当前链不支持\n    if(wallet && wallet.isConnected()){\n      this.setWallet(wallet);\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      let defaultConfig = this.getDefaultConfig(this.configs,wallet);\n      //如果还是为空，则默认用所有config的第一条\n      if(!defaultConfig){\n        defaultConfig = all.length > 0 ? all[0] : {}\n      }\n      this.setConfig(defaultConfig);\n    } \n    //如果没有钱包或者链接的链不一致，设置默认config，BTCUSD\n    if(!wallet.isConnected() && this.configs.length === 0 && all.length > 0){\n      let defaultConfig = all.find(c => c.symbol === 'BTCUSD')\n      defaultConfig = defaultConfig ? defaultConfig : all[0]\n      this.setConfig(defaultConfig)\n    }\n    this.loadByConfig(this.wallet,this.config,true)\n    this.setVolume('')\n  }\n\n  async switch(spec){\n    const cur = this.configs.find(config => config.pool === spec.pool && config.symbolId === spec.symbolId)\n    //v1 只需要比较池子地址，v2 需要比较symbolId\n    let changed = false\n    if(this.version){\n      changed = this.version.isV1 ? spec.pool !== this.config.pool : spec.symbolId !== this.config.symbolId\n    }\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.loadByConfig(this.wallet,cur,changed);  \n      if(changed){\n        this.store(cur)\n      }    \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async loadByConfig(wallet,config,symbolChanged){\n     //position\n     this.positionInfo.load(wallet,config,position => {       \n        this.setPosition(position);\n     })\n\n     //切换指数\n    if(symbolChanged && config){\n      this.oracle.unsubscribeBars();\n      this.oracle.addListener('trading',data => {\n        this.setIndex(data.close)\n      })\n      this.oracle.load(config.symbol)\n    }\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)    \n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     \n     //history\n     const history = await this.historyInfo.load(wallet,config);\n\n     if(contract){\n      this.setContract(contract)\n     }\n\n     if(fundingRate){\n      this.setFundingRate(fundingRate)\n     }\n\n     if(history){\n      this.setHistory(history);\n     }\n  }\n\n\n    //优先使用session storage 的，如果缓存跟用户当前链一直，则命中缓存，否则取当前配置第一条\n    getDefaultConfig(configs = [],wallet){\n      let defaultConfig = null;\n      if(configs.length > 0){    \n        const fromStore = this.getFromStore();\n        if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\n          defaultConfig = fromStore;\n        }\n        if(defaultConfig){\n          //虽然从缓存获得config ，需要判断池子地址是否一致，否则用可用config的第一条\n          const pos = configs.findIndex(c => c.pool === defaultConfig.pool);\n          if(pos === -1){\n            defaultConfig = configs[0];\n          }\n        } else {\n          defaultConfig = configs[0]\n        }   \n      }\n      return defaultConfig;    \n    }\n\n \n\n  //存起来\n  store(config){\n    storeConfig(this.version.current,config)\n  }\n\n  getFromStore(){\n    return getConfigFromStore(this.version.current)\n  }\n\n  async refresh(){\n    this.pause()\n    const position = await this.positionInfo.load(this.wallet,this.config);\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)   \n    const history = await this.historyInfo.load(this.wallet,this.config)\n\n    if(fundingRate){\n      this.setFundingRate(fundingRate)      \n    }\n    if(position){\n      this.setPosition(position)\n    }\n    if(history){\n      this.setHistory(history)\n    }\n    this.setVolume('')\n    this.resume();\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume(this.wallet,this.config);\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    if(position){\n      this.position = position\n    }\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setHistory(history){\n    this.history = history\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setSlideMargin(slideIncrementMargin){\n    if(slideIncrementMargin !== ''){\n      this.slideIncrementMargin =  slideIncrementMargin\n      const position = this.position;\n      const increment = bg(slideIncrementMargin).minus(bg(position.marginHeld))\n      // if(this.userSelectedDirection === 'long') {\n      //   increment.gt(0)  ? this.setUserSelectedDirection('long') : this.setUserSelectedDirection('short');\n      // } else {\n      //   increment.gt(0)  ? this.setUserSelectedDirection('short') : this.setUserSelectedDirection('long');\n      // }\n      \n      const volume = increment.abs().dividedBy(this.index * this.contract.multiplier * this.contract.minInitialMarginRatio);\n      this.setVolume(volume.integerValue().toString())\n    }\n  }\n\n\n  get volumeDisplay(){\n    if(this.volume === 0 || this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\n      return '';\n    } else {\n      return this.volume\n    }\n  }\n\n  // get amountIncrement(){\n  //   //根据增量的marginHeld反推volume\n  //   if(this.slideIncrementMargin){\n  //     const incrementVolume = bg(this.slideIncrementMargin).dividedBy((bg(this.index).multipliedBy(bg(this.contract.multiplier)).multipliedBy(bg(this.contract.minInitialMarginRatio))))\n  //     const incrementMargin = bg(this.amount.margin).plus(this.incrementMargin).toString()\n  //     // const incrementAvailable = bg(this.amount.available).plus(this)\n  //     console.log('incrementMargin',incrementMargin)\n  //     let currentSymbolIncrementMargin  = this.position.marginHeldBySymbol || 0 \n  //     currentSymbolIncrementMargin =  bg(currentSymbolIncrementMargin).plus(this.incrementMargin)\n  //     return {\n  //       volume : incrementVolume.integerValue().toString(),\n  //       margin : this.slideIncrementMargin,\n  //       currentSymbolIncrementMargin :  currentSymbolIncrementMargin.toString()\n  //     }\n  //   }\n  //   return {\n  //     volume : 0,\n  //     margin : 0,\n  //     currentSymbolIncrementMargin : 0\n  //   }\n  // }\n\n  \n\n  get amount(){\n    const position = this.position\n    const contract = this.contract;\n    const volume = this.volume === '' || isNaN(this.volume) ? 0 : this.volume\n    //current symbol marginHel --> v2\n    let {margin, marginHeldBySymbol:currentSymbolMarginHeld} = position\n    const baseLine = bg(position.marginHeld).minus(position.marginHeldBySymbol)\n    let incrementMarginHeld = bg(volume).multipliedBy(bg(this.index)).multipliedBy(bg(contract.multiplier))\n                                  .multipliedBy(bg(contract.minInitialMarginRatio));\n    let totalMarginHeld = bg(position.marginHeld) ;\n    //如果当前仓位为正仓用户做空或者当前仓位为负仓用户做多，总仓位相减,取绝对值\n    if((this.isPositive && this.userSelectedDirection === 'short') || \n      (this.isNegative && this.userSelectedDirection === 'long')){\n      totalMarginHeld = totalMarginHeld.minus(incrementMarginHeld);\n      if(totalMarginHeld.lt(baseLine)){\n        totalMarginHeld =  baseLine.plus(baseLine.minus(totalMarginHeld).abs())        \n      } \n      //v2 \n      currentSymbolMarginHeld = bg(currentSymbolMarginHeld).minus(incrementMarginHeld).abs().toString()\n      if(currentSymbolMarginHeld && bg(currentSymbolMarginHeld).lt(baseLine)) {\n        currentSymbolMarginHeld = baseLine.plus(currentSymbolMarginHeld).minus(baseLine).toString()\n      }\n    } else {\n      totalMarginHeld = bg(position.marginHeld).plus(incrementMarginHeld)\n      //v2 \n      if(currentSymbolMarginHeld){\n        currentSymbolMarginHeld = bg(currentSymbolMarginHeld).plus(incrementMarginHeld).toString();\n      }\n    }\n    \n    totalMarginHeld = totalMarginHeld.gt(margin) ? margin : totalMarginHeld.abs().toString()\n    let available = bg(margin).minus(totalMarginHeld).toString()\n    const exchanged = bg(volume).multipliedBy(contract.multiplier).toFixed(4)\n    const contractValue = Math.abs(volume) * this.index * contract.multiplier\n    const dynBalance = (+position.margin) + (+position.unrealizedPnl)\n    const leverage = (+contractValue / +dynBalance).toFixed(1);\n    margin = bg(margin).plus(position.unrealizedPnl).toString()\n\n    return {\n      volume : this.volume,\n      dynBalance : margin,\n      margin : totalMarginHeld,\n      available : available,\n      exchanged : exchanged,\n      currentSymbolMarginHeld : currentSymbolMarginHeld,\n      leverage : leverage\n    }\n  }\n\n  //计算available balance、contract value、\n  get amount_old(){\n    //用户输入的时候\n    if(this.index && this.position && this.contract && this.contract.multiplier && this.volume !== ''){\n      //合同价值\n      let curVolume = Math.abs(this.volume);\n      const originVolume = Math.abs(this.volumeDisplay);\n      //如果不是通过margin 算出来的volume\n      if(this.margin === '') {       \n        if(this.userSelectedDirection === 'long') {\n          if((+this.position.volume) > 0) {\n            curVolume = curVolume + (+this.position.volume)\n          } else {\n            curVolume = Math.abs(this.position.volume) - curVolume\n          }         \n        } else {\n          if((+this.position.volume) > 0){\n            curVolume =  (+this.position.volume) - curVolume\n          } else {\n            curVolume = Math.abs(this.position.volume) + (+curVolume)\n          }\n        }\n      }\n      const contractValue = Math.abs(curVolume) * this.index * this.contract.multiplier\n      const dynBalance = (+this.position.margin) + (+this.position.unrealizedPnl)\n      const margin = contractValue * this.contract.minInitialMarginRatio  \n      let totalMargin =  margin\n      //如果当前symbol 仓位 为0 且总的marginHeld 大于0\n      // if(this.isShareOtherSymbolMargin){\n        totalMargin = bg(margin).plus(this.position.marginHeld).toString() \n      // }\n      // console.log('volume ',curVolume);\n      // console.log('dynBalance ',dynBalance)\n      // console.log('margin ',margin)\n      // console.log('total margin ',totalMargin)\n      const leverage = (+contractValue / +dynBalance).toFixed(1);\n      const balance = ((+dynBalance) - (+totalMargin)).toFixed(2)\n      const available = balance > 0 ? balance : 0\n      const exchanged = (originVolume * (+this.contract.multiplier)).toFixed(4)\n      return {\n        dynBalance, \n        margin : totalMargin, \n        available,      \n        exchanged,      \n        leverage,\n        marginHeldBySymbol : margin\n      }\n    } else if(this.position && this.position.margin){\n      const dynBalance = bg(this.position.margin).plus(this.position.unrealizedPnl).toString()\n      const margin = this.position.marginHeld\n      const available = bg(dynBalance).minus(margin).toString();\n      return {\n        dynBalance,\n        margin,\n        marginHeldBySymbol : this.position.marginHeldBySymbol,\n        available,\n      }\n    }\n    return {}\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //正仓\n  get isPositive(){\n    return bg(this.position.volume).gt(0);\n  }\n\n  //负仓\n  get isNegative(){\n    return bg(this.position.volume).isNegative();\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(config){\n      const chainId = wallet && wallet.isConnected() && wallet.supportChain ? wallet.detail.chainId : config.chainId\n      if(config){    \n        const res = await getFundingRate(chainId,config.pool,config.symbolId)\n        return res;\n      }\n    }\n  }\n\n  get fundingRateTip(){\n    if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n      return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\n      `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \n    }\n    return ''\n  }\n\n\n\n}","import { makeAutoObservable, observable, action, computed } from \"mobx\";\nconst versionKey = 'deri-current-version'\n\nexport default class Version {\n  current = null;\n\n  constructor(){\n    makeAutoObservable(this,{\n      current : observable,\n      setCurrent : action,\n      isV1 : computed,\n      isV2 : computed\n    })\n    const versionFromSession = sessionStorage.getItem(versionKey);\n    this.current = versionFromSession ? versionFromSession : null\n  }\n\n\n  setCurrent(version,notSave){\n    this.current = version;\n    if(!notSave){\n      sessionStorage.setItem(versionKey,version)\n    }\n  }\n\n  switch(){\n    if(this.current === 'v1'){\n      this.setCurrent('v2')\n    } else {\n      this.setCurrent('v1')\n    }\n  }\n\n  get isV1() {\n    return this.current === 'v1'\n  }\n\n  get isV2(){\n    return this.current === 'v2'\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\n//note dont remove zhe line\nimport NumberPolyfill from './lib/polyfill/numberPolyfill'\nimport Trading from './model/Trading';\nimport { DeriEnv } from './lib/web3js/config';\nimport Version from './model/Version';\n\nconst wallet = new Wallet();\nconst trading = new Trading()\nconst version = new Version();\n\nif(process.env.NODE_ENV === 'production') {\n  DeriEnv.set('prod')\n} \n// DeriEnv.set('dev')\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} version={version}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","export const getDBProviderUrlsConfig = () => [\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  //accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  const symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n\n  return {\n    volume: volume.toString(),\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n    margin: margin.toString(),\n    marginHeld: calculateMarginHeld(\n      price,\n      volume,\n      multiplier,\n      minInitialMarginRatio\n    ).toString(),\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n    liquidationPrice: calculateLiquidationPrice(\n      volume,\n      margin,\n      cost,\n      multiplier,\n      minMaintenanceMarginRatio\n    ).toString(),\n  };\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.isUnlocked(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","\n\nimport BigNumber from 'bignumber.js'\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}\n\nexport function isLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\nexport function isSushiLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\n}\nexport function isCakeLP(address){\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\n\nexport function sessionStorageKey(version){\n  return `${version}-current-trading-pool`\n}\n\nexport function storeConfig(version,config){\n  if(config){\n    const key = sessionStorageKey(version);\n    sessionStorage.setItem(key,JSON.stringify(config))\n  }\n}\n\nexport function getConfigFromStore(version){\n  return JSON.parse(sessionStorage.getItem(sessionStorageKey(version)))\n}\n\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\nimport { getClp2ContractAddress } from '../utils';\n\nexport const getClp2LiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      clp2Pool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n    };\n  }\n  console.log('no Clp2Pool address, please check');\n  return {};\n};\n\nexport const addClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const removeClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\nexport const getClp2WalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    if (isProvider) {\n      this.web3 = web3Factory(chainId);\n    } else {\n      this.web3 = metaMaskWeb3();\n    }\n  }\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    return await this.contract.methods[method](...args).call();\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    const gas = await this._estimatedGas(method, args, accountAddress)\n      //this.web3.eth.getGasPrice(),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    const [gas, gasPrice] = await Promise.all([\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\n      this.web3.eth.getGasPrice(),\n    ]);\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (this.chainId === '56') {\n      amount = 1999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  // for slp pool use\n  // async balanceOf(poolAddress) {\n  //   //const res = await this._call('balanceOf', [poolAddress])\n  //   let result\n  //   const [res, decimals] = await Promise.all([\n  //     this._balance(this.poolAddress),\n  //     this.decimals(),\n  //   ])\n  //   result = bg(res, -decimals)\n  //   return result\n  // }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async getPositionInfo(accountAddress) {\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async balance(accountAddress) {\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      DB_CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async getValues(keyArray) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods.getValues(keyArray).call();\n      } catch (err) {\n        this.providerUrl = null\n      }\n      if (res) {\n        break\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database getValues(): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport Web3 from 'web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async signature(accountAddress) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods['signature'](accountAddress).call();\n      } catch (err) {\n        this.providerUrl = null\n      }\n      if (res) {\n        break\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database getValues(): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { getDBProviderUrlsConfig } from '../config/database';\nimport Web3 from 'web3';\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseAirdropContract {\n  constructor(contractAddress, providerUrl) {\n    this.providerUrl = providerUrl;\n    this.contractAddress = contractAddress;\n    if (this.providerUrl) {\n      this._init();\n    }\n  }\n\n  _init() {\n    // only use 'bsc testnet' with chainId 97\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    } else if (\n      this.providerUrl &&\n      !(await checkHttpServerIsAlive(this.providerUrl))\n    ) {\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async getValues(keyArray) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods.getValues(keyArray).call();\n      } catch (err) {\n        this.providerUrl = null\n      }\n      if (res) {\n        break\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database getValues(): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"0x608060405234801561001057600080fd5b506040516112c63803806112c683398101604081905261002f91610066565b60008054336001600160a01b031991821617909155600380549091166001600160a01b039290921691909117905546600455610094565b600060208284031215610077578081fd5b81516001600160a01b038116811461008d578182fd5b9392505050565b611223806100a36000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636b0509b1116100975780639a8a0592116100665780639a8a0592146101c85780639d76ea58146101d0578063b06faf62146101d8578063f77c4791146101e0576100f5565b80636b0509b114610185578063701422691461018d57806379a87b19146101a057806392eefe9b146101b5576100f5565b806351dfdb48116100d357806351dfdb4814610137578063560ebbd11461014a57806358c700a31461016a578063677528cb14610172576100f5565b806306fdde03146100fa57806320606b7014610118578063325564ec1461012d575b600080fd5b6101026101e8565b60405161010f9190610dbf565b60405180910390f35b610120610209565b60405161010f9190610d48565b61013561022d565b005b610135610145366004610bab565b6103a1565b61015d610158366004610ca1565b61066f565b60405161010f9190610d3d565b610120610684565b610135610180366004610bea565b61068a565b6101206107b1565b61013561019b366004610c15565b6107d5565b6101a8610acc565b60405161010f9190610cec565b6101356101c3366004610bab565b610adb565b610120610b77565b6101a8610b7d565b61015d610b8c565b6101a8610b9c565b6040518060400160405280600581526020016415985d5b1d60da1b81525081565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6000546001600160a01b031633146102605760405162461bcd60e51b815260040161025790610f7f565b60405180910390fd5b600254600160a01b900460ff161561028a5760405162461bcd60e51b81526004016102579061106a565b6001541580159061029d57506001544210155b6102b95760405162461bcd60e51b815260040161025790610e12565b60035460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926102f19291169060001990600401610d24565b602060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610c81565b506002805460ff60a01b1916600160a01b17908190556001546040517fce3275b30d22151f82ee29ce7ea685563b66ff98e56afc576a94d8a88c676ec092610397929130916001600160a01b031690611153565b60405180910390a1565b6000546001600160a01b031633146103cb5760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156103f55760405162461bcd60e51b81526004016102579061106a565b6000816001600160a01b03166358c700a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561043057600080fd5b505afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610cb9565b90506000826001600160a01b03166379a87b196040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610bce565b905081158015906104ee5750814210155b61050a5760405162461bcd60e51b815260040161025790610ec5565b6001600160a01b03811630146105325760405162461bcd60e51b815260040161025790610fd5565b6003546040516370a0823160e01b81526001600160a01b03909116906323b872dd908590309084906370a082319061056e908590600401610cec565b60206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610cb9565b6040518463ffffffff1660e01b81526004016105dc93929190610d00565b602060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190610c81565b507f18ce2512842fddee8c808fb717780a66007d1da9a942dd32625813c82d53c34282843060405161066293929190611153565b60405180910390a1505050565b60056020526000908152604090205460ff1681565b60015481565b6000546001600160a01b031633146106b45760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156106de5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b0382166107045760405162461bcd60e51b8152600401610257906110d3565b60038110158015610717575061016d8111155b6107335760405162461bcd60e51b815260040161025790610e68565b61074081620151806111a0565b61074a9042611188565b6001819055600280546001600160a01b0319166001600160a01b0385811691909117918290556040517fe2a3b7ba8269be3ca7ba4627f844bb9abd978e9b05d290dc89d4b107f9e3dda7936107a59390923092911690611153565b60405180910390a15050565b7f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb1281565b600254600160a01b900460ff16156107ff5760405162461bcd60e51b81526004016102579061106a565b8442111561081f5760405162461bcd60e51b815260040161025790610f1b565b604080518082018252600581526415985d5b1d60da1b6020918201526004549151600092610894927f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866927f8d03f8e727eaf836840d08da04cd9ecc9773328dd38f4a6c7b84a9ec2b88b7c79291309101610d7d565b60405160208183030381529060405280519060200120905060007f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb12898989896040516020016108e7959493929190610d51565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff161561092f5760405162461bcd60e51b815260040161025790610f52565b6000818152600560209081526040808320805460ff191660011790555161095a918591859101610cd1565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516109979493929190610da1565b6020604051602081039080840390855afa1580156109b9573d6000803e3d6000fd5b5050604051601f1901516000549092506001600160a01b0380841691161490506109f55760405162461bcd60e51b81526004016102579061111c565b60035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610a27908e908e90600401610d24565b602060405180830381600087803b158015610a4157600080fd5b505af1158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190610c81565b508a6001600160a01b03167f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef18b8b8b604051610ab793929190611172565b60405180910390a25050505050505050505050565b6002546001600160a01b031681565b6000546001600160a01b03163314610b055760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff1615610b2f5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b038116610b555760405162461bcd60e51b815260040161025790611024565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b6003546001600160a01b031681565b600254600160a01b900460ff1681565b6000546001600160a01b031681565b600060208284031215610bbc578081fd5b8135610bc7816111d5565b9392505050565b600060208284031215610bdf578081fd5b8151610bc7816111d5565b60008060408385031215610bfc578081fd5b8235610c07816111d5565b946020939093013593505050565b600080600080600080600060e0888a031215610c2f578283fd5b8735610c3a816111d5565b9650602088013595506040880135945060608801359350608088013560ff81168114610c64578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215610c92578081fd5b81518015158114610bc7578182fd5b600060208284031215610cb2578081fd5b5035919050565b600060208284031215610cca578081fd5b5051919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015610deb57858101830151858201604001528201610dcf565b81811115610dfc5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526036908201527f5661756c742e617070726f76654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b60208082526039908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a2067726160408201527f636544617973206d75737420626520332d333635206461797300000000000000606082015260800190565b60208082526036908201527f5661756c742e657865637574654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b6020808252601e908201527f5661756c742e636c61696d3a207369676e617475726520657870697265640000604082015260600190565b6020808252601390820152725661756c742e636c61696d3a207265706c617960681b604082015260600190565b60208082526036908201527f4d696772617461626c652e5f636f6e74726f6c6c65725f3a2063616e206f6e6c6040820152753c9031b0b63632b210313c9031b7b73a3937b63632b960511b606082015260800190565b6020808252602f908201527f5661756c742e657865637574654d6967726174696f6e3a206e6f74206465737460408201526e696e6174696f6e206164647265737360881b606082015260800190565b60208082526026908201527f4d696772617461626c652e736574436f6e74726f6c6c65723a20746f2030206160408201526564647265737360d01b606082015260800190565b60208082526043908201527f4d696772617461626c652e5f76616c69645f3a2063616e6e6f742070726f636560408201527f65642c207468697320636f6e747261637420686173206265656e206d696772616060820152621d195960ea1b608082015260a00190565b60208082526029908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a20746f2060408201526830206164647265737360b81b606082015260800190565b60208082526019908201527f5661756c742e636c61696d3a20756e617574686f72697a656400000000000000604082015260600190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526020830191909152604082015260600190565b6000821982111561119b5761119b6111bf565b500190565b60008160001904831182151516156111ba576111ba6111bf565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111ea57600080fd5b5056fea2646970667358221220309376e66ca21a54581da8ded1f86303ca0c78bd47254d1bdb5fb101169baa2364736f6c63430008010033\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI['abi'],\n      this.contractAddress\n    );\n  }\n  async mintDToken(accountAddress, ...args) {\n    //return this._transact('claim', args)\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async mint(accountAddress, ...args) {\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class Clp2Pool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, isProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    //console.log('hit clp2')\n    const res = await this._call('userInfo', [391, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.poolAddress = poolAddress;\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, useProvider);\n    this.contract = new this.web3.eth.Contract(\n      CONTRACT_ABI,\n      this.contractAddress\n    );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { Clp2Pool } from '../contract/clp2_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\n//import { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseAirdropFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    //console.log('---airdrop key', key)\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseAirdropContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const clp2PoolFactory = (function () {\n  const clp2PoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\n      return clp2PoolInstanceMap[key];\n    }\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\n    clp2PoolInstanceMap[key] = clp2Pool;\n    return clp2Pool;\n  };\n})();\n\n// export const lpPoolFactory = (function () {\n//   const lpPoolInstanceMap = {};\n//   return (chainId, contractAddress, isProvider = false) => {\n//     let key;\n//     if (isProvider) {\n//       key = `${chainId}.${contractAddress}.isProvider`;\n//     } else {\n//       key = `${chainId}.${contractAddress}`;\n//     }\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\n//       return lpPoolInstanceMap[key];\n//     } else {\n//       let lpPool;\n//       const { type } = getLpContractAddress(chainId, contractAddress);\n//       console.log(`lp type: ${type}`);\n//       if (type === 'slp') {\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\n//       } else if (type === 'clp') {\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\n//       }\n//       lpPoolInstanceMap[key] = lpPool;\n//       return lpPool;\n//     }\n//   };\n// })();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n","export const getChainProviderUrls = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        \"https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06\",\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrls: no urls for chainId ${chainId}`)\n  }\n}\n\nexport const getAnnualBlockNumberConfig = () => {\n  return {\n    1: '2367422',\n    56: '10497304',\n    128: '10511369',\n    3: '2367422',\n    97: '10497304',\n    256: '10511369',\n  };\n};\n\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n","import { DeriEnv } from \"../../config\";\n\nexport const getPoolConfigList = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0x19c2655A0e1639B189FB0CF06e02DC0254419D92',\n        pToken: '0x2AA5865BF556ab3f6Cd9405e565099f70234dF05',\n        lToken: '0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2',\n        router: '0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        bTokenId: '0',\n        initialBlock: '7884650',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v2',\n      },\n      {\n        pool: '0x19c2655A0e1639B189FB0CF06e02DC0254419D92',\n        pToken: '0x2AA5865BF556ab3f6Cd9405e565099f70234dF05',\n        lToken: '0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2',\n        router: '0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        bTokenId: '0',\n        initialBlock: '7884650',\n        bTokenSymbol: 'BUSD',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '56',\n        version: 'v2',\n      }\n    ];\n  } else {\n    return [\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n        bTokenId: '0',\n        initialBlock: '',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n        bTokenId: '0',\n        initialBlock: '',\n        bTokenSymbol: 'BUSD',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x5f59b256e411CB222D1790a08De492f4b6dA6E62',\n        bTokenId: '1',\n        initialBlock: '',\n        bTokenSymbol: 'BETH',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0x5f59b256e411CB222D1790a08De492f4b6dA6E62',\n        bTokenId: '1',\n        initialBlock: '',\n        bTokenSymbol: 'BETH',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0xd2F37BADdB702FF778aA038C63b7068054d93508',\n        bTokenId: '2',\n        initialBlock: '',\n        bTokenSymbol: 'AUTO',\n        symbol: 'BTCUSD',\n        symbolId: '0',\n        unit: 'BTC',\n        chainId: '97',\n        version: 'v2',\n      },\n      {\n        pool: '0x19EC6281749C06Ed9647134c57257AcA1508bFA8',\n        pToken: '0x5a08BB6a3C0a20471def9e79B27117ebBEdAf0a7',\n        lToken: '0x7743d650D312843C5d34cD860001E64b0C114b19',\n        router: '0x1061b8457A036b4A23C8C2346cC62C701e35E2c4',\n        bToken: '0xd2F37BADdB702FF778aA038C63b7068054d93508',\n        bTokenId: '2',\n        initialBlock: '',\n        bTokenSymbol: 'AUTO',\n        symbol: 'ETHUSD',\n        symbolId: '1',\n        unit: 'ETH',\n        chainId: '97',\n        version: 'v2',\n      },\n    ];\n  }\n};\n\nexport const getFilteredPoolConfigList = (poolAddress, bTokenId, symbolId) => {\n  bTokenId = typeof bTokenId === 'number' ? bTokenId.toString() : bTokenId\n  symbolId = typeof symbolId === 'number' ? symbolId.toString() : symbolId\n  const poolConfigList = getPoolConfigList(DeriEnv.get())\n  const check = bTokenId != null\n    ? symbolId != null\n      ? (i) =>\n          i.pool === poolAddress &&\n          i.bTokenId === bTokenId &&\n          i.symbolId === symbolId\n      : (i) => i.pool === poolAddress && i.bTokenId === bTokenId\n    : (symbolId != null ? (i) => i.pool === poolAddress && i.symbolId === symbolId : (i) => i.pool === poolAddress);\n  if (poolConfigList.length > 0) {\n    const res = poolConfigList.filter(check)\n    if (res && res.length > 0) {\n      return res\n    }\n  }\n  throw new Error(`Cannot find the pool config by poolAddress(${poolAddress}) bTokenId(${bTokenId}) and symbolId(${symbolId})`)\n}\n\nexport const getPoolConfig = (poolAddress, bTokenId, symbolId) => {\n  const res =  getFilteredPoolConfigList(poolAddress, bTokenId, symbolId)\n  return res[0]\n}"],"sourceRoot":""}