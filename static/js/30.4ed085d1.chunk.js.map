{"version":3,"sources":["desktop/pages/Info/Detail.js","utils/DeriNumberFormat.js","desktop/pages/Info/Table.js","desktop/pages/Info/Chart.js"],"names":["LIQUIDITY_HEADER","LIQUIDITY_COLUMNS","GET_LIQUIDITY_URL","process","REACT_APP_INFO_HTTP_URL","TRADE_HEADER","TRADE_COLUMNS","columnFormat","account","data","formatAddress","timestamp","moment","Date","utc","format","notional","value","prefix","thousandSeparator","decimalScale","amount","suffix","bToken","price","direction","className","action","Detail","useParams","network","add","catalog","getLiquidityDataUrl","getTradeDataUrl","to","toUpperCase","title","url","seriesType","headers","columns","columnRenders","pagination","DeriNumberFormat","props","useState","renderablity","setRenderablity","useEffect","allowZero","others","undefined","isNaN","Math","abs","displayType","inject","observer","dataSet","loading","onRowClick","setData","page","setPage","count","setCount","pageSize","loadData","a","restUrl","axios","get","res","status","Array","isArray","floor","loaded","map","header","length","d","onClick","style","cursor","col","call","AreaSeries","cycle","defaultCycle","chartRef","useRef","seriesChartRef","series","curValue","setCurValue","curDate","setCurDate","curCycle","setCurCycle","lastDataRef","crosshairMove","param","point","current","seriesPrices","forEach","item","time","year","month","day","addAreaSeries","chart","areaSeries","priceLineVisible","lastValueVisible","topColor","bottomColor","lineColor","priceFormat","precision","minMove","sort","item1","item2","dateFormat","last","timeScale","fitContent","loadHistogramData","histogramSeries","Number","last_24h","addHistogramSeries","color","type","priceFormatter","priceScale","applyOptions","scaleMargins","top","bottom","rect","document","querySelector","getBoundingClientRect","createChart","localization","convertToInternationalCurrencySystem","locale","rightOffset","leftOffset","timeVisible","borderColor","borderVisible","width","height","position","mode","handleScroll","handleScale","crosshair","CrosshairMode","Normal","vertLine","labelVisible","visible","horzLine","grid","vertLines","horzLines","layout","backgroundColor","textColor","fontSize","initChart","subscribeCrosshairMove","unsubscribeCrosshairMove","removeSeries","remove","cycleSelect","ref"],"mappings":"8HACA,wIASMA,EAAmB,CAAC,SAAS,UAAU,YAAY,SAAS,mBAC5DC,EAAoB,CAAC,SAAS,UAAU,WAAW,SAAS,aAC5DC,EAAiB,UAAMC,8RAAYC,yBAEnCC,EAAe,CAAC,YAAY,UAAU,SAAS,QAAQ,SAAS,WAAW,mBAC3EC,EAAgB,CAAC,YAAY,UAAU,SAAS,QAAQ,SAAS,WAAW,aAG5EC,EAAe,CACnBC,QAAU,SAAAC,GAAI,OAAIC,YAAcD,EAAKD,UACrCG,UAAY,SAAAF,GAAI,OAAKG,IAAO,IAAIC,KAAsB,IAAjBJ,EAAKE,YAAmBG,MAAMC,OAAO,wBAC1EC,SAAW,SAAAP,GAAI,OAAI,cAAC,IAAD,CAAkBQ,MAAOR,EAAKO,SAAUE,OAAO,IAAIC,mBAAmB,EAAMC,aAAc,KAC7GC,OAAS,SAAAZ,GAAI,OAAK,cAAC,IAAD,CAAkBQ,MAAOR,EAAKY,OAAQC,OAAM,WAAMb,EAAKc,QAAUJ,mBAAmB,EAAMC,aAAc,KAC1HI,MAAQ,SAAAf,GAAI,OAAK,cAAC,IAAD,CAAkBQ,MAAOR,EAAKe,MAAOL,mBAAmB,EAAOC,aAAc,KAC9FK,UAAY,SAAAhB,GAAI,OAAI,sBAAMiB,UAAS,oBAAejB,EAAKgB,WAAnC,SAAiDhB,EAAKgB,aAC1EE,OAAS,SAAAlB,GAAI,OAAI,sBAAMiB,UAAS,iBAAYjB,EAAKkB,QAAhC,SAA2ClB,EAAKkB,WAIpD,SAASC,IAAS,IAAD,EACQC,sBAA/BC,EADuB,EACvBA,QAAQC,EADe,EACfA,IAAIC,EADW,EACXA,QAAQT,EADG,EACHA,OACrBU,EAAmB,UAAM/B,EAAN,+BAA8C6B,GACjEG,EAAe,UAAMhC,EAAN,2BAA0C6B,GAE/D,OACE,sBAAKL,UAAU,OAAf,UACA,sBAAKA,UAAU,QAAf,UAAuB,cAAC,IAAD,CAAMS,GAAG,QAAT,2BAAvB,gBAAsEL,EAAtE,cAAmFE,EAAQI,cAA3F,cAA8G1B,YAAcqB,GAA5H,aAAqIR,EAArI,QACE,sBAAKG,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UAAuB,cAAC,IAAD,CAAOW,MAAM,MAAMC,IAAG,UAAOnC,8RAAYC,wBAAnB,uCAAyE2B,GAAOQ,WAAW,SAAxI,OACA,sBAAKb,UAAU,QAAf,UAAuB,cAAC,IAAD,CAAOW,MAAM,aAAaC,IAAG,UAAOnC,8RAAYC,wBAAnB,mCAAqE2B,GAAOQ,WAAW,cAA3I,UAEF,sBAAKb,UAAU,mBAAf,UACE,cAAC,IAAD,CAAOW,MAAM,YAAYG,QAASxC,EAAkByC,QAASxC,EAAmByC,cAAenC,EAAc+B,IAAKL,EAAqBU,YAAY,IACnJ,cAAC,IAAD,CAAON,MAAM,QAAQG,QAASnC,EAAcoC,QAASnC,EAAeoC,cAAenC,EAAe+B,IAAKJ,EAAiBS,YAAY,Y,+HCxC7H,SAASC,EAAiBC,GAAO,IAAD,EACLC,mBAAS,sBAAMpB,UAAU,kBADpB,mBACtCqB,EADsC,KACxBC,EADwB,KAW7C,OARAC,qBAAU,WAAO,IACRC,EAAuBL,EAAvBK,UAAaC,EADN,YACgBN,EADhB,eAKd,OAH4B,WAAvB,YAAOA,EAAM5B,aAAsCmC,IAAhBP,EAAM5B,OAAuC,KAAhB4B,EAAM5B,OAAgC,QAAhB4B,EAAM5B,OAAuE,KAAjDoC,MAAMR,EAAM5B,QAAUqC,KAAKC,IAAIV,EAAM5B,UAA+B,IAAdiC,IAC3KF,EAAgB,cAAC,IAAD,2BAAkBG,GAAlB,IAA0BK,YAAc,WAEnD,eACN,CAACX,EAAM5B,QAEH8B,I,kIC0DMU,gBAAO,UAAPA,CAAkBC,aApEjC,YAAqG,IAArFrB,EAAoF,EAApFA,MAAMsB,EAA8E,EAA9EA,QAAQrB,EAAsE,EAAtEA,IAAIE,EAAkE,EAAlEA,QAAQC,EAA0D,EAA1DA,QAA0D,IAAlDC,qBAAkD,MAAlC,GAAkC,EAA/BC,EAA+B,EAA/BA,WAAWiB,EAAoB,EAApBA,QAAQC,EAAY,EAAZA,WAAY,EAC1Ef,mBAAS,IADiE,mBAC3FrC,EAD2F,KACrFqD,EADqF,OAE1EhB,mBAAS,GAFiE,mBAE3FiB,EAF2F,KAErFC,EAFqF,OAGxElB,qBAHwE,mBAG3FmB,EAH2F,KAGpFC,EAHoF,OAIlEpB,mBAAS,IAJyD,mBAI3FqB,EAJ2F,KAM5FC,GAN4F,KAMpF,uCAAG,WAAO9B,EAAIyB,GAAX,iBAAAM,EAAA,6DACXC,EAAUhC,EACXK,IACD2B,EAAO,UAAMA,EAAN,iBAAsBP,EAAtB,wBAA0CI,IAEnDP,EAAQA,UALO,SAMGW,IAAMC,IAAIF,GANb,OAOG,OADZG,EANS,QAORC,QAAkBC,MAAMC,QAAQH,EAAIhE,KAAKA,QAC9CyD,EAASO,EAAIhE,KAAKwD,MAAQE,GACvBM,EAAIhE,KAAKwD,MAAQE,EAAW,GAC7BD,EAASZ,KAAKuB,MAAMJ,EAAIhE,KAAKwD,MAAQE,GAAW,GAElDL,EAAQW,EAAIhE,KAAKA,MACjBuD,EAAQD,GACRH,EAAQkB,UAdK,2CAAH,yDAuCd,OAPA7B,qBAAU,WACLU,EACDG,EAAQH,GAERS,EAAS9B,EAAI,KAEd,CAACA,IAEF,sBAAKZ,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BW,IAC1B,sBAAKX,UAAU,QAAf,UACE,qBAAKA,UAAU,UAAf,SACGc,EAAQuC,KAAI,SAAAC,GAAM,OAAI,qBAAKtD,UAAU,MAAf,SAAsBsD,SAE9CvE,EAAKwE,OAAS,EAAIxE,EAAKsE,KAAI,SAAAG,GAAC,OAC3B,qBAAKxD,UAAU,MAAMyD,QAAS,kBAAMtB,GAAcA,EAAWqB,IAAIE,MAAO,CAACC,OAASxB,EAAa,UAAY,UAA3G,SACGpB,EAAQsC,KAAI,SAAAO,GAAG,OAAI,qBAAK5D,UAAU,MAAf,SAAsBgB,EAAc4C,GAAO5C,EAAc4C,GAAKC,KAAK,KAAKL,GAAIA,EAAEI,aAGpG,qBAAK5D,UAAU,MAAf,SAAqB,qBAAKA,UAAU,cAAf,uBAItBiB,GAAclC,EAAKwE,OAAS,GAAK,sBAAKvD,UAAU,iBAAf,UAChC,sBAAMA,UAAU,QAAQyD,QAtChB,WACF,IAATpB,GAGHK,EAAS9B,EAAIyB,EAAO,IAkCd,iBAAuD,yCAAYA,EAAZ,OAAsBE,KAAa,sBAAMvC,UAAU,QAAQyD,QAhCzG,WACZpB,IAASE,GAIZG,EAAS9B,EAAIyB,EAAM,IA2B6E,+B,yKC5DrF,SAASyB,EAAT,GAA+D,IAA1CnD,EAAyC,EAAzCA,MAAMC,EAAmC,EAAnCA,IAAIC,EAA+B,EAA/BA,WAAWkD,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,aACvDC,EAAWC,iBAAO,MAClBC,EAAiBD,iBAAO,MACxBE,EAASF,iBAAO,MAHqD,EAI3C9C,mBAAS,IAJkC,mBAIpEiD,EAJoE,KAI1DC,EAJ0D,OAK7ClD,mBAAS,IALoC,mBAKpEmD,EALoE,KAK3DC,EAL2D,OAM3CpD,mBAAS4C,GANkC,mBAMpES,EANoE,KAM1DC,EAN0D,KAOrEC,EAAcT,mBA4DdU,EAAgB,SAAAC,GAClB,IAAKA,EAAMC,MAKT,OAJAN,EAAW,SACRG,EAAYI,SACbT,EAAYK,EAAYI,UAI5BF,EAAMG,aAAaC,SAAQ,SAAAC,GACtBA,GACDZ,EAAYY,MAGhBL,EAAMM,MAAQX,EAAW,GAAD,OAAIK,EAAMM,KAAKC,KAAf,YAAuBP,EAAMM,KAAKE,MAAlC,YAA2CR,EAAMM,KAAKG,IAAtD,YAGtBC,EAAa,uCAAG,WAAMC,GAAN,qBAAA7C,EAAA,6DACd8C,EAAaD,EAAMD,cAAc,CACrCG,kBAAmB,EACnBC,kBAAkB,EAClBC,SAAU,qBACVC,YAAa,oBACbC,UAAW,iBACXC,YAAa,CACXC,UAAW,EACXC,QAAU,UATM,SAcFpD,IAAMC,IAAIlC,GAdR,cAeF,OADZmC,EAdc,QAebC,QAAkBC,MAAMC,QAAQH,EAAIhE,KAAKA,QAU9CA,GATIA,EAAOgE,EAAIhE,KAAKA,KAAKmH,MAAK,SAACC,EAAMC,GACnC,OAAGD,EAAMlH,UAAYmH,EAAMnH,UAClB,EACCkH,EAAMlH,UAAYmH,EAAMnH,WACxB,EAED,MAGCoE,KAAI,SAAAG,GAAC,MAAK,CAAC2B,KAAOkB,IAAW,IAAIlH,KAAmB,IAAdqE,EAAEvE,WAAkB,cAAcM,MAAQiE,EAAEjE,UAC9FkG,EAAWrD,QAAQrD,GACbuH,EAAOvH,EAAKA,EAAKwE,OAAQ,GAAGhE,MAClC+E,EAAYgC,GACZ3B,EAAYI,QAAUuB,GAExBlC,EAAOW,QAAUU,EACjBD,EAAMe,YAAYC,aAhCE,kBAiCbf,GAjCa,2CAAH,sDAoCbgB,EAAiB,uCAAG,WAAO7F,EAAI8F,GAAX,mBAAA/D,EAAA,sEACNE,IAAMC,IAAIlC,GADJ,OAEN,OADZmC,EADkB,QAEjBC,QAAkBC,MAAMC,QAAQH,EAAIhE,KAAKA,QACxCA,EAAOgE,EAAIhE,KAAKA,KAAKmH,MAAK,SAACC,EAAMC,GACrC,OAAGD,EAAMlH,UAAYmH,EAAMnH,UAClB,EACCkH,EAAMlH,UAAYmH,EAAMnH,WACxB,EAED,KAERoE,KAAI,SAAAG,GAAC,MAAK,CAAC2B,KAAOkB,IAAW,IAAIlH,KAAmB,IAAdqE,EAAEvE,WAAkB,cAAcM,MAAQoH,OAAOnD,EAAEjE,WACtF+G,EAAOvD,EAAIhE,KAAK6H,SAAW7D,EAAIhE,KAAK6H,SAAW7D,EAAIhE,KAAKA,EAAKwE,OAAQ,GAAGhE,MAC9EmH,EAAgBtE,QAAQrD,GACxBuF,EAAYgC,GACZ3B,EAAYI,QAAUuB,EACtBnC,EAAeY,SAAWZ,EAAeY,QAAQwB,YAAYC,cAhBvC,2CAAH,wDAoBjBK,EAAkB,uCAAG,WAAOrB,GAAP,eAAA7C,EAAA,6DACnB+D,EAAkBlB,EAAMqB,mBAAmB,CAC/CC,MAAO,UACPpB,kBAAmB,EACnBC,kBAAkB,EAClBI,YAAa,CACXgB,KAAM,SACNC,eAAgB,SAAAlH,GAAK,MAAI,KAAOA,OAGpBmH,aAAaC,aAAa,CACxCC,aAAc,CACZC,IAAK,IACLC,OAAQ,KAGZZ,EAAkB7F,EAAI8F,GACtBtC,EAAOW,QAAU2B,EAjBQ,kBAkBlBA,GAlBkB,2CAAH,sDA8CxB,OApBAnF,qBAAU,WACR,IAAMiE,EA5JU,WAChB,IAAM8B,EAAOC,SAASC,cAAc,eAAeC,wBAC7CjC,EAAQkC,YAAYzD,EAASc,QAAS,CAC1C4C,aAAe,CACbX,eAAgB,SAAAlH,GAAK,MAAI,KAAO8H,YAAqC9H,IACrE+H,OAAQ,SAEVtB,UAAW,CACTuB,YAAc,EACdC,WAAa,EACbC,aAAc,EACdC,YAAc,OACdC,eAAiB,GAEnBC,MAAOb,EAAKa,MACZC,OAAQd,EAAKc,OACbnB,WAAY,CACVoB,SAAU,OACVJ,YAAa,OACbC,eAAgB,EAChBI,KAAM,EACNnB,aAAc,CACZC,IAAK,MAITmB,cAAc,EACdC,aAAa,EACbC,UAAW,CACTH,KAAMI,IAAcC,OACpBC,SAAU,CACRC,cAAe,EACfC,SAAU,GAEZC,SAAU,CACRF,cAAe,EACfC,SAAU,IAGdE,KAAM,CACJC,UAAW,CACTH,SAAS,GAEXI,UAAW,CACTJ,SAAS,IAGbK,OAAQ,CACNC,gBAAiB,UACjBC,UAAW,OACXC,SAAU,MAId,OADAnF,EAAeY,QAAUS,EAClBA,EAsGO+D,GAQd,MAPkB,SAAf1I,GACD0E,EAAcC,GAEE,cAAf3E,GACDgG,EAAmBrB,GAErBA,EAAMgE,uBAAuB5E,GACtB,WACFY,IACDA,EAAMiE,yBAAyB7E,GAC5BR,EAAOW,SACRS,EAAMkE,aAAatF,EAAOW,SAE5BS,EAAMmE,aAGT,CAAC/I,EAAIC,IAGN,sBAAKb,UAAU,aAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BW,IAC9B,sBAAKX,UAAU,cAAf,UAA8BqE,EAAQ,WAAOuD,YAAqCvD,IAAc,GAAhG,OACA,sBAAKrE,UAAU,aAAf,UAA6BuE,EAA7B,UAEDR,GAAS,qBAAK/D,UAAU,UAAf,SACP+D,EAAMV,KAAI,SAAA6B,GAAI,OAAI,qBAAKlF,UAAS,qBAAgBkF,IAAST,GAAY,YAAehB,QAAS,kBAjChF,SAAAM,GAClBW,EAAYX,GACZ0C,EAAkB,GAAD,OAAI7F,EAAJ,kBAAiBmD,GAAQK,EAAOW,SA+BuD6E,CAAY1E,IAA7F,SAAqGA,SAE1H,qBAAKlF,UAAU,SAAS6J,IAAK5F","file":"static/js/30.4ed085d1.chunk.js","sourcesContent":["\nimport './info.less'\nimport Table from './Table'\nimport { useParams } from 'react-router-dom'\nimport { formatAddress } from '../../../utils/utils'\nimport DeriNumberFormat from '../../../utils/DeriNumberFormat'\nimport moment from 'moment'\nimport Chart from './Chart'\nimport { Link } from 'react-router-dom'\n\nconst LIQUIDITY_HEADER = ['ACTION','ACCOUNT','LIQUIDITY','AMOUNT','TIMESTAMP (UTC)']\nconst LIQUIDITY_COLUMNS = ['action','account','notional','amount','timestamp']\nconst GET_LIQUIDITY_URL = `${process.env.REACT_APP_INFO_HTTP_URL}`\n\nconst TRADE_HEADER = ['DIRECTION','ACCOUNT','SYMBOL','PRICE','VOLUME','NOTIONAL','TIMESTAMP (UTC)']\nconst TRADE_COLUMNS = ['direction','account','symbol','price','volume','notional','timestamp']\n\n\nconst columnFormat = {\n  account : data => formatAddress(data.account),\n  timestamp : data =>  moment(new Date(data.timestamp * 1000)).utc().format('YYYY-MM-DD HH:mm:ss'),\n  notional : data => <DeriNumberFormat value={data.notional} prefix='$' thousandSeparator={true} decimalScale={5}/>,  \n  amount : data =>  <DeriNumberFormat value={data.amount} suffix={` ${data.bToken}`} thousandSeparator={true} decimalScale={5}/> ,\n  price : data =>  <DeriNumberFormat value={data.price} thousandSeparator={true}  decimalScale={5}/>,\n  direction : data => <span className={`direction ${data.direction}`}>{data.direction}</span>,\n  action : data => <span className={`action ${data.action}`}>{data.action}</span>\n}\n\n\nexport default function Detail(){\n  const {network,add,catalog,bToken} =  useParams();\n  const getLiquidityDataUrl = `${GET_LIQUIDITY_URL}/get_liquidity?pool=${add}`\n  const getTradeDataUrl = `${GET_LIQUIDITY_URL}/get_trade?pool=${add}`\n\n  return(\n    <div className='info'>\n    <div className='title'><Link to='/info'>Deri Overview</Link> &gt; {`${network} - ${catalog.toUpperCase()} - ${formatAddress(add)} (${bToken})`}</div>\n      <div className='chart-box'>\n        <div className='chart'><Chart title='TVL' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_liquidity_history?pool=${add}`} seriesType='area'/> </div>\n        <div className='chart'><Chart title='Volume 24H' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_trade_history?pool=${add}`} seriesType='histogram'/> </div>\n      </div>\n      <div className='table-by-network'>\n        <Table title='LIQUIDITY' headers={LIQUIDITY_HEADER} columns={LIQUIDITY_COLUMNS} columnRenders={columnFormat} url={getLiquidityDataUrl} pagination={true}/>\n        <Table title='TRADE' headers={TRADE_HEADER} columns={TRADE_COLUMNS} columnRenders={columnFormat}  url={getTradeDataUrl} pagination={true}/>\n      </div>\n    </div>\n  )\n}","import React,{useState,useEffect} from 'react'\nimport NumberFormat from 'react-number-format'\n\nexport default function DeriNumberFormat(props){\n  const [renderablity, setRenderablity] = useState(<span className='loading-line'></span>);\n\n  useEffect(() => {\n    const {allowZero,...others} = props \n    if(((typeof props.value !== 'object' && props.value !== undefined && props.value !== '' && props.value !== 'NaN') || ((isNaN(props.value) && Math.abs(props.value)) === 0 && allowZero === true ))) {\n      setRenderablity(<NumberFormat {...others} displayType = 'text' />)\n    } \n    return () => {};\n  }, [props.value]);\n\n  return renderablity;\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { inject, observer } from 'mobx-react'\n\nfunction Table({title,dataSet,url,headers,columns,columnRenders = {},pagination,loading,onRowClick}){\n  const [data, setData] = useState([])\n  const [page, setPage] = useState(1)\n  const [count, setCount] = useState()\n  const [pageSize, setPageSize] = useState(10)\n\n  const loadData = async (url,page) => {\n    let restUrl = url;\n    if(pagination){\n      restUrl = `${restUrl}&page=${page}&page_amount=${pageSize}`\n    }\n    loading.loading()\n    const res = await axios.get(restUrl);\n    if(res.status === 200 && Array.isArray(res.data.data)){\n      setCount(res.data.count / pageSize)\n      if(res.data.count % pageSize > 0 ){\n        setCount(Math.floor(res.data.count / pageSize) +1)\n      }\n      setData(res.data.data)\n      setPage(page)\n      loading.loaded()\n    }\n  }\n\n  const prePage = () => {\n    if(page === 1){\n      return;\n    }\n    loadData(url,page - 1)\n  }\n  const nextPage = () => {\n    if(page === count){\n      return;\n    }\n\n    loadData(url,page +1)\n  }\n\n  useEffect(() => {\n    if(dataSet){\n      setData(dataSet)\n    } else {\n      loadData(url,1);\n    }\n  }, [url])\n  return(\n    <div className='info-table'>\n      <div className='t-title'>{title}</div>\n      <div className='tbody'>\n        <div className='theader'>\n          {headers.map(header => <div className='col'>{header}</div>)}\n        </div>\n        {data.length > 0 ? data.map(d => (\n          <div className='row' onClick={() => onRowClick && onRowClick(d)} style={{cursor : onRowClick ? 'pointer' : 'normal'}}>\n            {columns.map(col => <div className='col'>{columnRenders[col] ? columnRenders[col].call(null,d) :d[col]}</div>)}\n          </div>))\n          :\n          <div className='row'><div className='col no-data'>No Data</div></div>\n          }\n         \n\n        {pagination && data.length > 0 && <div className='pagination row'>\n          <span className='arrow' onClick={prePage}> &lt; </span><span>Page {page} of {count}</span><span className='arrow' onClick={nextPage}> &gt; </span>\n        </div>}\n      </div>\n    </div>\n  )\n}\nexport default inject('loading')(observer(Table))","import { useRef,useEffect,useState } from \"react\"\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport dateFormat from 'dateformat'\nimport { convertToInternationalCurrencySystem } from \"../../../utils/utils\";\n\nexport default function AreaSeries({title,url,seriesType,cycle,defaultCycle}){\n  const chartRef = useRef(null);\n  const seriesChartRef = useRef(null);\n  const series = useRef(null)\n  const [curValue, setCurValue] = useState('')\n  const [curDate, setCurDate] = useState('')\n  const [curCycle, setCurCycle] = useState(defaultCycle)\n  const lastDataRef = useRef()\n\n\n  const initChart = () => {\n    const rect = document.querySelector('.info-chart').getBoundingClientRect()\n    const chart = createChart(chartRef.current, { \n      localization : {\n        priceFormatter: price => '$ ' + convertToInternationalCurrencySystem(price),\n        locale: 'en-US'\n      },\n      timeScale: {\n        rightOffset : 0,\n        leftOffset : 5,\n        timeVisible : true,\n        borderColor : '#fff',\n        borderVisible :  false\n      },\n      width: rect.width,\n      height: rect.height,\n      priceScale: {\n        position: 'none',\n        borderColor: '#fff',\n        borderVisible : false,\n        mode: 0,\n        scaleMargins: {\n          top: 0.35\n        },\n      },\n\n      handleScroll: false,\n      handleScale: false,\n      crosshair: {\n        mode: CrosshairMode.Normal,  \n        vertLine: {\n          labelVisible : false,  \n          visible : false\n        },\n        horzLine: {\n          labelVisible : false,  \n          visible : false\n        },\n      },\n      grid: {\n        vertLines: {\n          visible: false,\n        },\n        horzLines: {\n          visible: false,\n        },\n      },\n      layout: {\n        backgroundColor: '#212327',\n        textColor: '#fff',\n        fontSize: 12\n      },\n    });\n    seriesChartRef.current = chart\n    return chart;\n  }\n\n  const crosshairMove = param => {\n      if (!param.point) {\n        setCurDate('')\n        if(lastDataRef.current){\n          setCurValue(lastDataRef.current)\n        }\n        return;\n      }\n      param.seriesPrices.forEach(item => {\n        if(item){\n          setCurValue(item)\n        }\n      })\n      param.time && setCurDate(`${param.time.year}-${param.time.month}-${param.time.day} (UTC)`)\n  }\n\n  const addAreaSeries = async(chart) => {\n    const areaSeries = chart.addAreaSeries({\n      priceLineVisible : false,\n      lastValueVisible: false,\n      topColor: 'RGBA(0,101,159,.5)',\n      bottomColor: 'RGBA(0,101,159,0)',\n      lineColor: 'RGB(0,101,159)',\n      priceFormat: {        \n        precision: 1,\n        minMove : '1000',\n      }\n    })\n  \n    \n    const res = await axios.get(url)\n    if(res.status === 200 && Array.isArray(res.data.data)){\n      let data = res.data.data.sort((item1,item2) => {\n        if(item1.timestamp > item2.timestamp) {\n          return 1\n        } else if(item1.timestamp < item2.timestamp){\n          return -1\n        } else {\n          return 0\n        }\n      })\n      data = data.map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : d.value}))\n      areaSeries.setData(data)\n      const last = data[data.length -1].value\n      setCurValue(last)\n      lastDataRef.current = last\n    }\n    series.current = areaSeries\n    chart.timeScale().fitContent();\n    return areaSeries;\n  }\n\n  const loadHistogramData = async (url,histogramSeries) => {\n    const res = await axios.get(url)\n    if(res.status === 200 && Array.isArray(res.data.data)){\n      const data = res.data.data.sort((item1,item2) => {\n        if(item1.timestamp > item2.timestamp) {\n          return 1\n        } else if(item1.timestamp < item2.timestamp){\n          return -1\n        } else {\n          return 0\n        }\n      }).map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : Number(d.value)}))\n      const last = res.data.last_24h ? res.data.last_24h : res.data[data.length -1].value\n      histogramSeries.setData(data)\n      setCurValue(last)\n      lastDataRef.current = last\n      seriesChartRef.current && seriesChartRef.current.timeScale().fitContent();\n    }\n  }\n\n  const addHistogramSeries = async (chart) => {\n    const histogramSeries = chart.addHistogramSeries({\n      color: '#00659F',\n      priceLineVisible : false,\n      lastValueVisible: false,\n      priceFormat: {\n        type: \"volume\",\n        priceFormatter: price => '$ ' + price\n      }\n    })\n    histogramSeries.priceScale().applyOptions({\n      scaleMargins: {\n        top: 0.25,\n        bottom: 0,\n      },\n    });    \n    loadHistogramData(url,histogramSeries)\n    series.current = histogramSeries\n    return histogramSeries;\n  }\n\n  const cycleSelect = cycle => {\n    setCurCycle(cycle)\n    loadHistogramData(`${url}?cycle=${cycle}`,series.current)\n  }\n\n  useEffect(() => {\n    const chart = initChart();\n    if(seriesType === 'area'){\n      addAreaSeries(chart)\n    }\n    if(seriesType === 'histogram'){\n      addHistogramSeries(chart)\n    }\n    chart.subscribeCrosshairMove(crosshairMove);\n    return () => {\n      if(chart){\n        chart.unsubscribeCrosshairMove(crosshairMove)\n        if(series.current){\n          chart.removeSeries(series.current);\n        }\n        chart.remove();\n      }\n    }\n  }, [url,seriesType])\n\n  return(\n    <div className='info-chart'>\n      <div className='chart-title'>\n        <div className='title-label'>{title}</div>\n        <div className='title-value'>{curValue ? `$${convertToInternationalCurrencySystem(curValue)}` : ''} </div>\n        <div className='title-date'>{curDate} </div>\n      </div>\n      {cycle && <div className='cycle-c'>\n        {cycle.map(item => <div className={`cycle-item ${item === curCycle && 'selected'}`}  onClick={() => cycleSelect(item)}>{item}</div>)}\n      </div>}\n      <div className='series' ref={chartRef}></div>\n    </div>\n  )\n}\n"],"sourceRoot":""}