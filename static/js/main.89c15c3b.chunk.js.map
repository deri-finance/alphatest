{"version":3,"sources":["lib/web3js/v2/config/oracle.js","lib/web3js/v2/utils/convert.js","lib/web3js/factory/web3.js","lib/web3js/config/database.js","lib/web3js/v2/factory.js","lib/web3js/v2/utils/network.js","lib/web3js/v2/utils/chain.js","utils/LoadableComponent.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/utils.js","lib/web3js/v2/calculation/position.js","lib/web3js/v2/calculation/funding_rate.js","lib/web3js/v2/calculation/liquidity.js","lib/web3js/v2/api/mining_query_api.js","lib/web3js/v2/api/mining_transaction_api.js","lib/web3js/v2/api/api_globals.js","lib/web3js/v2/api/trade_query_api.js","lib/web3js/v2/api/trade_history_api.js","lib/web3js/v2/api/trade_transaction_api.js","lib/web3js/v2/api/broker_api.js","lib/web3js/v2/api/activity_api.js","lib/web3js/indexV2.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","model/Config.js","lib/web3js/api_wrapper/config_api.js","lib/web3js/api_wrapper/mining_query_api.js","lib/web3js/api_wrapper/mining_transaction_api.js","lib/web3js/api_wrapper/trade_query_api.js","lib/web3js/api_wrapper/trade_transaction_api.js","lib/web3js/api_wrapper/trade_history_api.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/v2/utils/oracle.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/databaseApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/api/apiGlobals.js","model/Version.js","utils/utils.js","lib/web3js/api/contractQueryApi.js","lib/web3js/v2/contract/contract_base.js","lib/web3js/v2/contract/abis.js","lib/web3js/v2/contract/perpetual_pool.js","lib/web3js/v2/contract/perpetual_pool_router.js","lib/web3js/v2/contract/b_token.js","lib/web3js/v2/contract/l_token.js","lib/web3js/v2/contract/p_token.js","lib/web3js/v2/contract/woo_oracle.js","lib/web3js/v2/contract/chainlink_oracle.js","lib/web3js/v2/contract/wrapped_oracle.js","lib/web3js/v2/contract/broker_manager.js","lib/web3js/v2/contract/ptoken_airdrop.js","lib/web3js/v2/config/pool.js","../lang).)*/.json$","lib/web3js/v2/config/chain.js","App.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/Intl.js","model/History.js","model/Trading.js","index.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database_base.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/v2/config/config.js","lib/web3js/v2/config/broker.js","lib/web3js/v2/utils/validate.js","lib/web3js/config/env.js"],"names":["getOracleConfigList","getConfig","oracle","getOracleConfig","chainId","symbol","filteredByChainId","filter","c","length","Error","BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","hexToNumber","Web3","utils","deriToNatural","naturalToDeri","toFixed","numberToHex","isBrowser","window","document","isJsDom","navigator","userAgent","includes","metaMaskWeb3","web3Instance","web3","undefined","ethereum","web3Factory","web3InstanceMap","a","Object","keys","console","log","getChainProviderUrl","providerUrl","providers","HttpProvider","getDBProviderUrlsConfig","getDBAddressConfig","env","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","factory","klass","instances","address","key","get","perpetualPoolFactory","PerpetualPool","perpetualPoolRouterFactory","PerpetualPoolRouter","bTokenFactory","BToken","lTokenFactory","LToken","pTokenFactory","PToken","oracleFactory","instanceMap","decimal","ChainlinkOracle","WrappedOracle","WooOracle","brokerManagerFactory","BrokerManager","pTokenAirdropFactory","PTokenAirdrop","shuffleArray","array","i","j","Math","floor","random","temp","getBlockNumber","url","res","blockNumber","duration","Number","MAX_SAFE_INTEGER","startTime","Date","now","eth","getLatestRPCServer","urls","promises","push","Promise","all","blockNumbers","sort","b","latestBlockNumber","reduce","index","findIndex","startsWith","normalizeChainId","getChainProviderUrls","getDailyBlockNumber","getDailyBlockNumberConfig","parseInt","LoadingPage","React","Component","componentWillMount","NProgress","start","componentWillUnmount","done","render","LoadableComponent","component","Loadable","loader","loading","getChainIds","ChainProviderUrls","provider_urls","getChainProviderUrlsConfig","getContractAddressConfig","pool","bToken","pToken","lToken","dToken","MiningVault","initialBlock","bTokenSymbol","unit","version","getSlpContractAddressConfig","getClpContractAddressConfig","getClp2ContractAddressConfig","getLpContractAddressConfig","type","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","getDeriContractAddressConfig","Deri","Wormhole","chainBlockNumberList","accum","getRestServerConfig","process","getRedisWorkerQueneConfig","toChecksumAddress","hexToString","hexToUtf8","hexToNumberString","naturalWithPercentage","sd","toString","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","isNaN","MAX_VALUE","getNetworkName","poolNetwork","getPoolContractAddress","poolAddress","DeriEnv","p","bTokenAddress","pTokenAddress","lTokenAddress","dTokenAdress","MinningVaultAddress","getMiningVaultContractAddress","pools","getSlpContractAddress","getClp2ContractAddress","getClpContractAddress","getLpContractAddress","getDeriContractAddress","deriAddress","wormholeAddress","getOracleUrl","addSymbolParam","getOracleInfo","retry","fetch","mode","cache","ok","json","getBTCUSDPrice","responseJson","price","format","bigNumber","toFormat","replaceAll","chainIds","calculateEntryPrice","volume","cost","multiplier","eq","calculateLiquidationPrice","margin","dynamicCost","minMaintenanceMarginRatio","tmp","minus","gt","plus","isOrderValid","marginHeld","liquidity","liquidityUsed","minMargin","success","error","calculateFundingRate","tradersNetVolume","fundingRateCoefficient","validateArgs","processFundingRate","fundingRate","annualBlockCount","calculateFundingFee","dynamicEquity","cumulativeFundingRate","lastCumulativeFundingRate","lastUpdatedBlockNumber","calculateBTokenDynamicEquities","bTokens","discount","pnl","isBToken0RatioValid","bTokenId","amount","bToken0Ratio","totalDynamicEquity","lt","isPoolMarginRatioValid","userLiquidity","symbols","poolMarginRatio","totalCost","s","tradersNetCost","abs","calculateMaxRemovableLiquidity","restLiquidity","minPoolMarginRatio","getLiquidityInfo","accountAddress","getPoolConfig2","perpetualPool","bTokenIdList","getPoolBTokenIdList","symbolIdList","getPoolSymbolIdList","getParameters","getBToken","getAsset","parameterInfo","bTokenInfo","lTokenAsset","getSymbol","totalPnl","poolLiquidity","lastCumulativePnl","maxRemovableShares","approximatePnl","cumulativePnl","shares","getPoolLiquidity","db","databaseFactory","getValues","catch","err","getPoolInfoApy","apy","volume1h","volume24h","addLiquidity","routerAddress","router","perpetualPoolRouter","minBToken0Ratio","validation","tx","transaction","removeLiquidity","isMaximum","priceCache","_prices","symbolId","split","set","val","parseFloat","timestamp","fundingRateCache","resourceMap","contractAddress","resource","getSpecification","getPoolBTokenList","symbolInfo","feeRatio","minInitialMarginRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","protocolFeeCollectRatio","bSymbol","map","join","getPositionInfo","symbolConfigList","getPoolSymbolList","symbolList","getLastUpdatedBlockNumber","getLatestBlockNumber","getPosition","getMargins","getPositions","getOraclePrice","positionInfo","margins","positions","latestPrice","symbolPrices","marginHeldBySymbol","unrealizedPnl","unrealizedPnlList","fundingFee","averageEntryPrice","liquidationPrice","getWalletBalance","balanceOf","balance","isUnlocked","getEstimatedFee","_getFundingRate","getEstimatedMargin","leverage","getFundingRateCache","promiseList","bTokenInfoList","fundingRatePerBlock","liquidityUsedInAmount","getFundingRate","fundingRate0","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","getPoolBTokensBySymbolId","bTokenList","resultList","walletBalance","availableBalance","fetchJson","resp","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","transactionHash","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","returnValues","item","unshift","getTradeHistory","tradeHistory","tradeFromBlock","data","tradeHistoryBlock","Array","isArray","trim","tradeHistoryOnline","concat","unlock","depositMargin","addMargin","withdrawMargin","removeMargin","tradeWithMargin","newVolume","orderValidation","trade","closePosition","negated","setBroker","brokerAddress","normalizeAddress","getBrokerConfig","brokerManagerAddress","brokerManager","getAirdropPTokenAddress","airdropPToken","getAirdropPTokenWhitelistCount","totalWhitelistCount","isUserPTokenExist","connectWallet","async","handleChainChanged","handleAccountChanged","accounts","request","method","account","on","location","reload","getUserWalletBalance","walletAddress","getBalance","fromWei","getLpLiquidityInfo","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","Config","makeObservable","this","observable","setAll","action","current","configs","isV2","total","cur","getContractAddressConfig2","require","getPoolConfigList","getPoolConfigListV2","getLiquidityInfo2","getLiquidityInfoV2","getPoolLiquidity2","getPoolLiquidityV2","getPoolInfoApy2","getPoolInfoApyV2","addLiquidity2","addLiquidityV2","removeLiquidity2","removeLiquidityV2","getSpecification2","getSpecificationV2","getPositionInfo2","getPositionInfoV2","getWalletBalance2","getWalletBalanceV2","isDeriUnlocked","isUnlocked2","isUnlockedV2","getEstimatedFee2","getEstimatedFeeV2","getFundingRate2","getFundingRateV2","getEstimatedFundingRate2","getEstimatedFundingRateV2","getLiquidityUsed2","getLiquidityUsedV2","getEstimatedLiquidityUsed2","getEstimatedLiquidityUsedV2","unlockDeri","unlock2","unlockV2","depositMargin2","depositMarginV2","withdrawMargin2","withdrawMarginV2","tradeWithMargin2","tradeWithMarginV2","closePosition2","closePositionV2","getTradeHistory2","getTradeHistoryV2","calculateLiquidityUsed","calculateShareValue","lTokenTotalSupply","calculateMaxRemovableShares","lTokenBalance","shareValue","removable","calculateMarginHeld","calculatePnl","calculateMaxWithdrawMargin","held","poolMaxVolume","message","getPrice","pPool","maxWithdrawMargin","_transactPool","totalSupply","getStateValues","mintDToken","userInfo","getUserInfoAll","deadline","nonce","v","r","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","freeze","toChainId","wormhole","wormholeFactory","mintDeri","databaseWormhole","databaseWormholeFactory","signature","fromChainId","fromWormhole","fromNonce","deri","deriFactory","mintAirdrop","getUserInfoAllForAirDrop","v1","r1","s1","v2","r2","s2","miningVaultRouter","miningVaultRouterFactory","mint","userAddress","getUserInfo","userInfoHarvest","harvestLp","harvestTrade","lp","getUserInfoHarvest","userInfoTotal","getUserInfoTotal","assign","getLpPoolInfoApy","apy2","getUserInfoInPool","databaseAirdropFactory","baseToken","processLiquidateEvent","national","getLiquidateHistoryOnline","getHttpBase","opts","fetchRestApi","path","getFundingRateCache2","liquidateFromBlock","liquidateHistoryBlock","liquidateHistoryOnline","sendTradeTxToWorkerQuene","ws","wsInstance","getOrSet","send","methodCall","event","resolve","JSON","parse","wsOnPromise","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","_accountAddress","_price","_interval","_update","update","self","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","_ws","io","transports","id","Version","makeAutoObservable","setCurrent","isV1","computed","formatAddress","substr","formatBalance","eqInNumber","str1","str2","isLP","isSushiLP","isCakeLP","sessionStorageKey","storeConfig","sessionStorage","setItem","stringify","getConfigFromStore","getItem","storeChain","chainInfo","storeLocale","locale","restoreLocale","addParam","param","urlString","href","URL","searchParams","has","append","hasParam","getParam","getFormatSymbol","curChain","code","toUpperCase","parameters","getUserWormholeSignature","getDeriBalance","MAX_GAS_AMOUNT","ContractBase","contractAbi","contract","Contract","_init","methods","call","gas","estimateGas","from","_transactionReceipt","reject","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","txRaw","to","encodeABI","params","_getTransactionReceipt","perpetualPoolAbi","perpetualPoolRouterAbi","bTokenAbi","lTokenAbi","pTokenAbi","wooOracleAbi","chainlinkOracleAbi","wrappedOracleAbi","brokerManagerAbi","pTokenAirdropAbi","bTokenCount","symbolCount","protocolFeeCollector","protocolFeeAccrued","getLengths","getAddresses","_call","decimals0","swapperAddress","oracleAddress","decimals","getBlock","getStorageAt","eventName","getPastEvents","es","e","_transact","MAX_INT256","priceInfos","_balanceOf","allowance","MAX_UINT256","processAsset","processPosition","answer","flat","expendPoolConfig","getFilteredPoolConfigList","poolConfigList","check","getPoolConfig","_getPoolConfig","find","broker","webpackContext","req","webpackContextResolve","__webpack_require__","o","module","exports","DesktopApp","MobileApp","inject","observer","intl","isMobile","Wallet","detail","supportWeb3","isConnected","approve","approved","connect","loadWalletBalance","wallet","supported","setDetail","supportV2","supportV1","supportAllVersion","supportChain","isApproved","Oracle","timeType","kData","paused","listeners","already","setIndex","WebSocket","withCredentials","emit","initWebSocket","obj","low","high","open","close","time_type","unsubscribeBars","setSymbol","setTimeType","listener","callback","history","el","setPause","Position","spec","mockPositionInfo","position","interval","load","setInfo","History","forEach","lang","page","toLowerCase","test","pageName","setLocale","dict","localeLabel","language","prefix","supportedCatalog","label","Trading","slideIncrementMargin","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setSupportChain","setFundingRate","setHistory","setSlideMargin","fundingRateTip","volumeDisplay","isNegative","isPositive","configInfo","contractInfo","historyInfo","defaultConfig","getDefaultConfig","loadByConfig","changed","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","pos","syncFundingRate","setPaused","support","currentSymbolMarginHeld","otherMarginHeld","incrementMarginHeld","totalMarginHeld","dynBalance","available","exchanged","multipliedBy","totalContractValue","Intl","trading","ReactDOM","StrictMode","getElementById","slpPool","slpPoolFactory","bTokenBalance","getLiquidity","clp2Pool","clp2PoolFactory","clpPool","clpPoolFactory","isProvider","POOL_ABI","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","priceDelayAllowance","signed","args1","args2","CONTRACT_ABI","BTokenContract","_balance","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DatabaseBaseContract","updateProviderUrl","DB_CONTRACT_ABI","DatabaseContract","keyArray","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toWormholeAddress","databaseInstanceMap","database","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriInstanceMap","wormholeInstanceMap","processConfig","jsonConfig","validateObjectKeyExist","validateIsArray","prop","getJsonConfig","getBrokerConfigList","every","keyList","valName","_deriEnv"],"mappings":"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","file":"static/js/main.89c15c3b.chunk.js","sourcesContent":["import { getConfig } from './config';\n\nexport const getOracleConfigList = () => {\n  const config = getConfig()\n  return config.oracle\n};\n\nexport const getOracleConfig = (chainId, symbol) => {\n  const filteredByChainId = getOracleConfigList().filter((c) =>\n    symbol\n      ? c.chainId === chainId && c.symbol === symbol\n      : c.chainId === chainId\n  );\n  if (filteredByChainId.length > 0) {\n    if (symbol) {\n      return filteredByChainId[0];\n    } else {\n      return filteredByChainId;\n    }\n  }\n  throw new Error(`getOracleConfig(): invalid chainId(${chainId}) or symbol(${symbol}).`);\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\n// == bg\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const fromWei = (value, unit='ether') => Web3.utils.fromWei(value, unit)\n\nexport const toWei = (value, unit='ether') => Web3.utils.toWei(value, unit)\n\nexport const toNatural = (value, num = 0) => BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\n// == convert\nexport const numberToHex = (value) => Web3.utils.numberToHex(value);\n\n\n// == utils\nexport const isBrowser = () => typeof window !== 'undefined' && typeof window.document !== 'undefined'\nexport const isNodejs = () => typeof process !== 'undefined' && process.versions != null && process.versions.node != null\nexport const isJsDom = () => typeof window !== 'undefined' && navigator.userAgent.includes('jsdom')\n","import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return async(chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    if (['1', '3', '42'].includes(chainId)) {\n      console.log(\n        `==== web3Factory(${chainId}), please caution the access limits ===`\n      );\n    }\n    const providerUrl = await getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","export const getDBProviderUrlsConfig = () => [\n  //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n","import Web3 from 'web3';\nimport {\n  PerpetualPool,\n  PerpetualPoolRouter,\n  BToken,\n  LToken,\n  PToken,\n  WooOracle,\n  ChainlinkOracle,\n  WrappedOracle,\n  BrokerManager,\n  PTokenAirdrop,\n} from './contract';\nimport { getChainProviderUrl } from './utils/chain';\n\nconst factory = (klass) => {\n  let instances = {}\n  return (chainId, address) => {\n    const key = address\n    if (Object.keys(instances).includes(key)) {\n      return instances[key];\n    } else {\n      instances[key] = new klass(chainId, address);\n      return instances[key];\n    }\n  }\n}\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    if (typeof window.ethereum !== undefined) {\n      web3Instance = new Web3(window.ethereum);\n      return web3Instance;\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return {\n    async get(chainId) {\n      if (Object.keys(web3InstanceMap).includes(chainId)) {\n        return web3InstanceMap[chainId];\n      }\n      if (['1', '3', '42'].includes(chainId)) {\n        console.log(\n          `==== web3Factory(${chainId}), please caution the access limits ===`\n        );\n      }\n      const providerUrl = await getChainProviderUrl(chainId);\n      web3InstanceMap[chainId] = new Web3(\n        new Web3.providers.HttpProvider(providerUrl)\n      );\n      return web3InstanceMap[chainId];\n    },\n  };\n})();\n\nexport const perpetualPoolFactory = factory(PerpetualPool)\n\nexport const perpetualPoolRouterFactory = factory(PerpetualPoolRouter)\n\nexport const bTokenFactory = factory(BToken)\n\nexport const lTokenFactory = factory(LToken)\n\nexport const pTokenFactory = factory(PToken)\n\nexport const oracleFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, symbol, decimal) => {\n    const key = address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      if (['80001'].includes(chainId)) {\n        instanceMap[key] = new ChainlinkOracle(\n          chainId,\n          address,\n          symbol,\n          decimal\n        );\n      } else if (['137'].includes(chainId)) {\n        instanceMap[key] = new WrappedOracle(chainId, address, symbol, decimal);\n      } else {\n        instanceMap[key] = new WooOracle(chainId, address, symbol, decimal);\n      }\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const brokerManagerFactory = factory(BrokerManager);\nexport const pTokenAirdropFactory = factory(PTokenAirdrop)","import Web3 from 'web3';\n// == func\n// const np = () => {}\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const fetchWithTimeout = (url, options = {}) => {\n  const { timeout = 1200, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((resolve) => {\n      setTimeout(() => {\n        // reject(\n        //   new Error(\n        //     `Request for ${url} timed out after ${timeout} ms`,\n        //   ),\n        // )\n        resolve({timeout:true})\n      }, timeout)\n    }),\n  ])\n}\n\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    if (!err.toString().includes('FetchError')) {\n      console.log(err);\n    }\n  }\n  return false;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    //console.log(url)\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error(`getAliveHttpServer(): No alive http server in ${urls}`);\n};\n\nconst getBlockNumber = async (url) => {\n  let res = { url: url, blockNumber: -1, duration: Number.MAX_SAFE_INTEGER,};\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(url))\n    const startTime = Date.now()\n    res.blockNumber = await web3.eth.getBlockNumber()\n    res.duration = Date.now() - startTime\n  } catch (err) {\n    console.log(`getBlockNumber(${url}) error: ${err}`)\n  }\n  return res\n};\n\nexport const getLatestRPCServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  let promises = []\n  for (let i = 0; i < urls.length; i++) {\n    promises.push(getBlockNumber(urls[i]));\n  }\n  let blockNumbers = await Promise.all(promises)\n  blockNumbers = blockNumbers.sort((a, b) => a.duration - b.duration)\n  // console.log('blockNumbers',  blockNumbers)\n  const latestBlockNumber = blockNumbers.reduce((a, b) => b.blockNumber !== -1 ? a > b.blockNumber ? a : b.blockNumber : a, 0)\n  const index = blockNumbers.findIndex((b) => b.blockNumber === latestBlockNumber);\n  const res = blockNumbers[index].url\n  // console.log(res)\n  if (res.startsWith('http')) {\n    return res\n  } else {\n    throw new Error(`getLatestRPCServer(): no alive RPC server in ${urls}`)\n  }\n};","import {\n  getChainProviderUrls,\n  getDailyBlockNumberConfig,\n} from '../config/chain';\nimport { normalizeChainId } from './validate';\nimport { getLatestRPCServer } from './network';\n\nexport const getChainProviderUrl = async (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrls(chainId);\n  if (urls.length > 0) {\n   const url =  await getLatestRPCServer(urls);\n   // console.log('url', url)\n   return url\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\nexport const getDailyBlockNumber = (chainId) => {\n  const blockNumbers = getDailyBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  } else {\n    throw new Error(`Invalid annual block number with chainId: ${chainId}`);\n  }\n};\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","export const getChainIds = () => {\n  return ['1', '3', '56', '97', '128', '256', '137', '80001'];\n};\nexport const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","import { getChainIds } from './chain';\n\n/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool:   '0xAf081e1426f64e74117aD5F695D2A80482679DE5',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7906919',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0xD3f5E6D1a25dA1E64EDf7cb571f9fAD17FEb623c',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '8005906',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0x23779AAc1e74a65F27B4840A8E41F767Ce993118',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '12548746',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool:   '0x96a1F15676746b9339DBc185F277618359Ac6346',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '12548827',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool:   '0xBA7e183042c8796E26A5a2375927DE7B1AB99d97',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '5220431',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n        version: 'v1',\n      },\n    ];\n  }\n  // develop environment\n  return [\n    {\n      pool: '0x372b640A00a0A6B73381e9363A39644a712cCc37',\n      bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n      pToken: '0xB9113758D771750e9E8ECb359A19689eC89AC1a5',\n      lToken: '0xC727a10Be4740441BE74960296097aF39D701980',\n      initialBlock: '9378545',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n      version: 'v1',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n        type: 'slp',\n      },\n      {\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n        type: 'clp',\n      },\n      {\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n        type: 'clp2',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress = (chainId) => {\n  const configs = [\n    {\n      MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n      chainId: '56',\n    },\n  ];\n  const filteredConfig = configs.filter((i) => i.chainId === chainId);\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter;\n  } else {\n    throw new Error(\n      `getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`\n    );\n  }\n};\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getDailyBlockNumberConfig = () => {\n  const chainBlockNumberList = [\n    '6486',\n    '6486',\n    '28759',\n    '28759',\n    '28798',\n    '28798',\n    '40405',\n    '40405',\n  ];\n  return getChainIds().reduce((accum, i, index) => {\n    accum[i] = chainBlockNumberList[index];\n    return accum;\n  }, {});\n};\n","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    return (process && process.env && process.env.REACT_APP_REST_SERVER_URL) || 'https://api.deri.finance';\n    // return 'https://alphaapi.deri.finance';\n  } else {\n    // for test\n    return 'https://testnetapi.deri.finance';\n    //return 'http://localhost:8082';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getClp2ContractAddressConfig,\n  getLpContractAddressConfig,\n  getDailyBlockNumberConfig,\n  getDeriContractAddressConfig,\n  getChainIds,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n//const np = () => {}\n//const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    //const response = await fetch(url);\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      //console.log(url)\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\nconst getBlockNumber = async (url) => {\n  let res = { url: url, blockNumber: -1, duration: Number.MAX_SAFE_INTEGER,};\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(url))\n    const startTime = Date.now()\n    res.blockNumber = await web3.eth.getBlockNumber()\n    res.duration = Date.now() - startTime\n  } catch (err) {\n    console.log(`getBlockNumber(${url}) error: ${err}`)\n  }\n  return res\n};\n\nexport const getLatestRPCServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  let promises = []\n  for (let i = 0; i < urls.length; i++) {\n    promises.push(getBlockNumber(urls[i]));\n  }\n  let blockNumbers = await Promise.all(promises)\n  blockNumbers = blockNumbers.sort((a, b) => a.duration - b.duration)\n  //console.log('blockNumbers',  blockNumbers)\n  const latestBlockNumber = blockNumbers.reduce((a, b) => b.blockNumber !== -1 ? a > b.blockNumber ? a : b.blockNumber : a, 0)\n  const index = blockNumbers.findIndex((b) => b.blockNumber === latestBlockNumber);\n  const res = blockNumbers[index].url\n  //console.log(res)\n  if (res.startsWith('http')) {\n    return res\n  } else {\n    throw new Error(`getLatestRPCServer(): cannot find alive RPC server in ${urls}`)\n  }\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    case '137':\n      poolNetwork = 'matic';\n      break;\n    case '80001':\n      poolNetwork = 'mumbai';\n      break;\n    default:\n      throw new Error(`The networkId is not valid for chainId ${chainId}`);\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  // console.log(\n  //   `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  // );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getDailyBlockNumber = (chainId) => {\n  const blockNumbers = getDailyBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  let url = getOracleUrl(chainId, poolAddress);\n  //console.log('oracle url', url);\n  let retry = 2;\n  //let timeout = 1000;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    //if (res && !res.timeout) {\n    if (res.ok) {\n      break;\n    }\n    //console.log('get oracle info timeout')\n    retry -= 1;\n    //timeout += 800;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  const responseJson = await getOracleInfo(chainId, poolAddress);\n  let price = responseJson.price;\n  if (!price) {\n    price = '0';\n  }\n  return deriToNatural(responseJson.price).toString();\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getLatestRPCServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  const chainIds = getChainIds()\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`)\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`)\n  }\n};","import { bg, max } from '../utils';\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\n// export const calculateMaxWithdrawMargin = (\n//   price,\n//   volume,\n//   margin,\n//   cost,\n//   multiplier,\n//   minInitialMarginRatio\n// ) => {\n//   if (volume.eq(0)) {\n//     return margin;\n//   }\n//   const held = calculateMarginHeld(\n//     price,\n//     volume,\n//     multiplier,\n//     minInitialMarginRatio\n//   );\n//   const pnl = calculatePnl(price, volume, multiplier, cost);\n//   const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n//   return withdrawable;\n// };\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  dynamicCost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier)\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier);\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  //price,\n  margin,\n  marginHeld,\n  liquidity,\n  liquidityUsed,\n  // multiplier,\n  // minPoolMarginRatio,\n  // newVolume,\n) => {\n  const minMargin = marginHeld;\n  // const poolMaxVolume = liquidity.minus(liquidityUsed)\n  //   .div(minPoolMarginRatio)\n  //   .div(price)\n  //   .div(multiplier);\n  if (margin.gte(minMargin)) {\n    // if (\n    //   newVolume.lte(poolMaxVolume) &&\n    //   newVolume.gte(poolMaxVolume.negated())\n    // ) {\n    if (liquidity.minus(liquidityUsed).gte(0)) {\n      return { success: true };\n    }\n    return { success: false, error: 'Pool has insufficient liquidity' };\n  }\n  return { success: false, error: 'Trader has insufficient margin' };\n};\n","import { bg, getDailyBlockNumber, validateArgs } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(multiplier)\n      .times(poolMarginRatio)\n      .div(liquidity)\n      .abs();\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio,\n    ];\n    throw new Error(`calculateLiquidityUsed: invalid args: ${args}`);\n  }\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    )\n  ) {\n    return bg(liquidity).eq(0) ? bg(0) : bg(tradersNetVolume)\n      .times(price)\n      // .times(price)\n      // .times(multiplier)\n      .times(multiplier)\n      .times(fundingRateCoefficient)\n      .div(liquidity);\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    ];\n    throw new Error(`calculateFundingRate: invalid args: ${args}`);\n  }\n};\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getDailyBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n\nexport const calculateFundingFee = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  fundingRateCoefficient,\n  dynamicEquity,\n  cumulativeFundingRate,\n  lastCumulativeFundingRate,\n  lastUpdatedBlockNumber,\n  latestBlockNumber,\n  volume,\n) => {\n  if (bg(volume).eq(0)) {\n    return '0'\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      fundingRateCoefficient,\n      dynamicEquity,\n      cumulativeFundingRate,\n      lastCumulativeFundingRate,\n      lastUpdatedBlockNumber,\n      latestBlockNumber,\n      volume,\n    ];\n    if (\n      validateArgs(...args)\n    ) {\n      return bg(dynamicEquity).eq(0) ? bg(0) : bg(tradersNetVolume)\n        .times(price)\n        .times(multiplier)\n        .times(price)\n        .times(multiplier)\n        .times(fundingRateCoefficient)\n        .div(dynamicEquity)\n        .times(bg(latestBlockNumber).minus(lastUpdatedBlockNumber))\n        .plus(cumulativeFundingRate)\n        .minus(lastCumulativeFundingRate)\n        .times(volume)\n    } else {\n      console.log(`calculateFundingFee: invalid args: ${args}`);\n      return 'NaN'\n    }\n  }\n};","import { bg, max, min } from '../utils'\n\nexport const calculateBTokenDynamicEquities = (bTokens) => {\n  //const dynamicEquities = bTokens.map((b) => bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n  //const totalDynamicEquity = dynamicEquities.reduce((accum, d) => accum.plus(d), bg(0))\n  const totalDynamicEquity = bTokens.reduce((accum, b) => accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)), bg(0))\n  return totalDynamicEquity\n}\n\nexport const isBToken0RatioValid = (bTokens, bTokenId, amount, bToken0Ratio) => {\n  bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).plus(amount)\n  const totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  const b = bTokens['0']\n  const dynamicEquity = bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)\n  //console.log('estimatedBToken0Ratio',dynamicEquity.div(totalDynamicEquity).toString())\n  // use 1 as efficient\n  if (\n    !totalDynamicEquity.eq(0) &&\n    dynamicEquity.div(totalDynamicEquity).times('1').lt(bToken0Ratio)\n  ) {\n    return { success: false, error: 'Trader has insufficient bToken0' };\n  } else {\n    return { success: true };\n  }\n}\n\nexport const isPoolMarginRatioValid = (bTokens, bTokenId, amount, userLiquidity, symbols, poolMarginRatio) => {\n  if (bg(amount).gte(userLiquidity)) {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(userLiquidity)\n  } else {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(amount)\n  }\n  let totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  let totalCost = bg(0)\n  for (let i=0; i<symbols.length; i++) {\n    const s = symbols[i]\n    if (!bg(s.tradersNetVolume).eq(0)) {\n      const cost = bg(s.tradersNetVolume).times(s.price).times(s.multiplier)\n      totalDynamicEquity = totalDynamicEquity.plus(s.tradersNetCost).minus(cost)\n      totalCost = totalCost.plus(cost.abs())\n    }\n  }\n  //console.log(totalDynamicEquity.toString(), totalCost.toString())\n  if (\n    !totalCost.eq(0) &&\n    totalDynamicEquity.div(totalCost).times('1').lt(poolMarginRatio)\n  ) {\n    return { success: false, error: 'Trader has insufficient liquidity' };\n  } else {\n    return { success: true };\n  }\n}\n\n\nexport const calculateMaxRemovableLiquidity = (\n  bToken,\n  userLiquidity,\n  cost,\n  pnl,\n  restLiquidity,\n  minPoolMarginRatio,\n) => {\n  if (bg(cost).eq(0)) {\n    return userLiquidity;\n  } else {\n    return max(\n      min(\n        bToken.liquidity.minus(\n          minPoolMarginRatio\n            .times(cost)\n            .plus(pnl)\n            .minus(restLiquidity)\n            .div(bToken.price)\n            .div(bToken.discount)\n        ).times('0.98'),\n        userLiquidity\n      ),\n      bg(0)\n    );\n  }\n};","import { lTokenFactory, perpetualPoolFactory } from '../factory'\nimport { getPoolConfig2, getPoolBTokenIdList, getPoolSymbolIdList} from '../config'\nimport { bg, deriToNatural } from '../utils'\nimport { getNetworkName } from '../../utils'\nimport { calculateMaxRemovableLiquidity } from '../calculation'\nimport { databaseFactory } from '../../factory/contracts';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  try {\n    const {lToken:lTokenAddress} = getPoolConfig2(poolAddress, bTokenId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n    const lToken = lTokenFactory(chainId, lTokenAddress);\n\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    const symbolIdList = getPoolSymbolIdList(poolAddress)\n\n    const [parameterInfo, bTokenInfo, lTokenAsset ] = await Promise.all([\n      perpetualPool.getParameters(),\n      perpetualPool.getBToken(bTokenId),\n      lToken.getAsset(accountAddress, bTokenId),\n    ])\n    const { minPoolMarginRatio } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n\n    const cost = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).abs())\n    }, bg(0))\n    const totalPnl = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).minus(s.tradersNetCost))\n    }, bg(0))\n    const restLiquidity = bTokens.reduce((accum, b, index) => {\n      if (index === parseInt(bTokenId)) {\n        return accum.plus(b.pnl)\n      } else {\n        return accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n      }\n    }, bg(0))\n\n    const { liquidity: poolLiquidity } = bTokenInfo;\n    const { liquidity, pnl, lastCumulativePnl } = lTokenAsset\n    const maxRemovableShares = calculateMaxRemovableLiquidity(bTokens[bTokenId], liquidity, cost, totalPnl, restLiquidity, minPoolMarginRatio)\n    const approximatePnl = pnl.plus(bg(bTokens[bTokenId].cumulativePnl).minus(lastCumulativePnl).times(liquidity))\n    //console.log(\"approximatePnl\", approximatePnl.toString())\n    return {\n      //totalSupply: lTokenTotalSupply.toString(),\n      poolLiquidity: poolLiquidity.toString(),\n      // shares: liquidity.toString(),\n      // shareValue: '1',\n      // maxRemovableShares: liquidity.toString()\n      shares: liquidity.toString(),\n      pnl: approximatePnl.toString(),\n      maxRemovableShares: maxRemovableShares.toString()\n    };\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    poolLiquidity: '',\n    shares: '',\n    pnl: '',\n    maxRemovableShares: '',\n  };\n};\n\nexport const getPoolLiquidity = async (chainId, poolAddress, bTokenId) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity${bTokenId}`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol:'',\n      };\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidity: '',\n    symbol:'',\n  };\n};\n\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy${bTokenId}`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n};","import { getPoolBTokenIdList, getPoolConfig2, getPoolSymbolIdList } from '../config'\nimport { perpetualPoolRouterFactory, perpetualPoolFactory, lTokenFactory } from '../factory'\nimport { getOracleInfo } from '../utils'\nimport { isBToken0RatioValid, isPoolMarginRatioValid } from '../calculation'\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig2(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const tx = await perpetualPoolRouter.addLiquidity(accountAddress, bTokenId, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n      res = { success: false, error: validation.error};\n   }\n   return res\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum=false,\n) => {\n   const { router: routerAddress, lToken: lTokenAddress } = getPoolConfig2(\n     poolAddress,\n   );\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   let symbolIdList = getPoolSymbolIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       const tx = await perpetualPoolRouter.removeLiquidity(accountAddress, bTokenId, amount, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const addLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig2(poolAddress)\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const promises = symbolIdList.map(async(s) => {\n        return await getOracleInfo(poolAddress, s)\n      })\n      const prices = await Promise.all(promises)\n      const priceInfos = prices.map((p, index) => {\n        return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n      })\n      const tx = await perpetualPoolRouter.addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const removeLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const {router:routerAddress, lToken:lTokenAddress} = getPoolConfig2(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       promises = symbolIdList.map(async(s) => {\n         return await getOracleInfo(poolAddress, s)\n       })\n       const prices = await Promise.all(promises)\n       const priceInfos = prices.map((p, index) => {\n         return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n       })\n       const tx = await perpetualPoolRouter.removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n","export const priceCache = (function(){\n  let _prices = {}\n  return {\n    get(poolAddress, symbolId) {\n      const key = `${poolAddress}.${symbolId}`\n      if (Object.keys(_prices).includes(key)) {\n        const [price, ] = _prices[key].split('|')\n        //if (parseInt(timestamp) - Date.now() < 10000) {\n          return price\n        //}\n      }\n      console.log('please init priceCache first')\n    },\n    // update(chainId, poolAddress, symbolId) {\n    //   // place holder\n    // },\n    set(poolAddress, symbolId, val) {\n      if (!isNaN(parseFloat(val))) {\n        const timestamp = Date.now().toString()\n        _prices[`${poolAddress}.${symbolId}`] = `${val}|${timestamp}`\n      }\n    }\n  }\n})()\n\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress, symbolId) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`fundingRateCache: key is not in exist: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, symbolId, resource) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();","import { perpetualPoolFactory, bTokenFactory, pTokenFactory } from '../factory';\nimport { getPoolBTokenIdList, getPoolBTokenList, getPoolConfig2, getPoolSymbolIdList, getPoolSymbolList} from '../config'\nimport {\n  calculateEntryPrice,\n  calculateLiquidationPrice,\n  calculateFundingRate,\n  calculateFundingFee,\n  processFundingRate,\n} from '../calculation';\nimport { getOraclePrice, bg, min, max } from '../utils'\nimport { fundingRateCache, priceCache } from '../api/api_globals';\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  try {\n    const {symbol, bTokenSymbol } = getPoolConfig2(poolAddress, bTokenId, symbolId)\n    const bTokens = getPoolBTokenList(poolAddress)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const [symbolInfo, parameterInfo] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n    ])\n    const { multiplier, feeRatio, fundingRateCoefficient} = symbolInfo\n    const {\n      minPoolMarginRatio,\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n      minLiquidationReward,\n      maxLiquidationReward,\n      liquidationCutRatio,\n      protocolFeeCollectRatio,\n    } = parameterInfo\n    return {\n      symbol: symbol,\n      bSymbol: bTokens.map((b) => b.bTokenSymbol).join(','),\n      multiplier: multiplier.toString(),\n      feeRatio: feeRatio.toString(),\n      fundingRateCoefficient: fundingRateCoefficient.toString(),\n      minPoolMarginRatio: minPoolMarginRatio.toString(),\n      minInitialMarginRatio: minInitialMarginRatio.toString(),\n      minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n      //minAddLiquidity: minAddLiquidity.toString(),\n      //redemptionFeeRatio: redemptionFeeRatio.toString(),\n      minLiquidationReward: minLiquidationReward.toString(),\n      maxLiquidationReward: maxLiquidationReward.toString(),\n      liquidationCutRatio: liquidationCutRatio.toString(),\n      protocolFeeCollectRatio: protocolFeeCollectRatio.toString(),\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    symbol: '',\n    bSymbol: '',\n    multiplier: '',\n    feeRatio: '',\n    fundingRateCoefficient: '',\n    minPoolMarginRatio: '',\n    minInitialMarginRatio: '',\n    minMaintenanceMarginRatio: '',\n    minLiquidationReward: '',\n    maxLiquidationReward: '',\n    liquidationCutRatio: '',\n    protocolFeeCollectRatio: '',\n  }\n};\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  try {\n    const symbolConfigList = getPoolSymbolList(poolAddress)\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    const symbolList = symbolConfigList.map((i) => i.symbol)\n    //console.log('bTokenList', bTokenList)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress);\n    const [symbolInfo, parameterInfo, lastUpdatedBlockNumber, latestBlockNumber, positionInfo, margins, positions, latestPrice] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n      perpetualPool.getLastUpdatedBlockNumber(),\n      perpetualPool.getLatestBlockNumber(),\n      pToken.getPosition(accountAddress, symbolId),\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      getOraclePrice(chainId, symbolList[parseInt(symbolId)])\n    ])\n    const { volume, cost, lastCumulativeFundingRate } = positionInfo\n    const { multiplier, fundingRateCoefficient, tradersNetVolume, cumulativeFundingRate } = symbolInfo\n    const {\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n    } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    promises = []\n    for (let i=0; i<symbolList.length; i++) {\n      promises.push(getOraclePrice(chainId, symbolList[i]))\n    }\n    const symbolPrices = await Promise.all(promises)\n    const price = symbolPrices[symbolId]\n    priceCache.set(poolAddress, symbolId, price)\n    const marginHeld = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).times(minInitialMarginRatio).abs())\n    }, bg(0))\n    const marginHeldBySymbol = bg(volume).abs().times(multiplier).times(symbolPrices[symbolId]).times(minInitialMarginRatio)\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    //\n    //const unrealizedPnl = bg(positions[symbolId].volume).times(price).times(multiplier).minus(positions[symbolId].cost)\n    const unrealizedPnl = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    const unrealizedPnlList = symbols.map((s, index) => {\n      return [s.symbol, bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost).toString()]\n    })\n\n    const totalCost = positions.reduce((accum, a) => {\n      return accum.plus(bg(a.cost))\n    }, bg(0))\n    const dynamicCost = symbols.reduce((accum, s, index) => {\n      if (index !== parseInt(symbolId)) {\n        return accum.plus(bg(positions[index].volume).times(symbolPrices[index]).times(s.multiplier))\n      } else {\n        return accum\n      }\n    }, bg(0))\n    //console.log('cost', costTotal.toString())\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    const fundingFee = calculateFundingFee(\n      tradersNetVolume,\n      latestPrice,\n      multiplier,\n      fundingRateCoefficient,\n      liquidity,\n      cumulativeFundingRate,\n      lastCumulativeFundingRate,\n      lastUpdatedBlockNumber,\n      latestBlockNumber,\n      volume,\n    );\n  return {\n      price: price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n      margin: margin.toString(),\n      marginHeld: marginHeld.toString(),\n      marginHeldBySymbol: marginHeldBySymbol.toString(),\n      unrealizedPnl: unrealizedPnl.toString(),\n      unrealizedPnlList,\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        totalCost,\n        dynamicCost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n      fundingFee: fundingFee.toString()\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    volume: '',\n    averageEntryPrice: '',\n    margin: '',\n    marginHeld: '',\n    unrealizedPnl: '',\n    liquidationPrice: '',\n  };\n}\n\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  try {\n    const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n    const balance = await bTokenFactory(chainId, bTokenAddress).balanceOf(accountAddress)\n    return balance.toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return '';\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => {\n  try {\n    const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n    const bToken = await bTokenFactory(chainId, bTokenAddress)\n    return bToken.isUnlocked(accountAddress, poolAddress)\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return false\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  try {\n    let price = priceCache.get(poolAddress, symbolId)\n    const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n    if (!price) {\n      //price = await getOraclePrice(poolAddress, symbolId)\n      price = await getOraclePrice(chainId, symbol)\n      priceCache.set(poolAddress, symbolId, price)\n    }\n    let cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!cache || !cache.multiplier) {\n      await _getFundingRate(chainId, poolAddress, symbolId)\n      cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n    }\n    const { multiplier, feeRatio } = cache;\n    //console.log(volume, price, multiplier, feeRatio)\n    return bg(volume).abs().times(price).times(multiplier).times(feeRatio).toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return ''\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  try {\n    const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const [price, symbolInfo ] = await Promise.all([\n      //getOraclePrice(poolAddress, symbolId),\n      getOraclePrice(chainId, symbol),\n      perpetualPool.getSymbol(symbolId),\n    ])\n    priceCache.set(poolAddress, symbolId, price)\n    const {multiplier} = symbolInfo\n    //console.log('m',multiplier.toString())\n    return bg(volume).abs().times(price).times(multiplier).div(bg(leverage)).toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return ''\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  return fundingRateCache.get(chainId, poolAddress, symbolId)\n}\n\nconst _getFundingRate = async(chainId, poolAddress, symbolId) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n  const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n  let bTokenIdList = getPoolBTokenIdList(poolAddress)\n  let promiseList = []\n  for (let i=0; i<bTokenIdList.length; i++) {\n    promiseList.push(perpetualPool.getBToken(i))\n  }\n  const bTokenInfoList = await Promise.all(promiseList)\n  const liquidity = bTokenInfoList.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n  //const pnl = bTokenInfoList.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n  //console.log('pnl', pnl.toString())\n\n  const [price, symbolInfo, parameterInfo ] = await Promise.all([\n    //getOraclePrice(poolAddress, symbolId),\n    getOraclePrice(chainId, symbol),\n    perpetualPool.getSymbol(symbolId),\n    perpetualPool.getParameters(),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const { multiplier, fundingRateCoefficient, tradersNetVolume, feeRatio } = symbolInfo;\n  const { minPoolMarginRatio } = parameterInfo;\n  const fundingRateArgs = [\n    tradersNetVolume,\n    price,\n    multiplier,\n    liquidity,\n    fundingRateCoefficient,\n  ]\n  const fundingRatePerBlock = calculateFundingRate(...fundingRateArgs)\n  const fundingRate = processFundingRate(chainId, fundingRatePerBlock)\n  // const liquidityUsedArgs = [\n  //   tradersNetVolume,\n  //   price,\n  //   multiplier,\n  //   liquidity,\n  //   minPoolMarginRatio,\n  // ]\n  let symbolIdList = getPoolSymbolIdList(poolAddress)\n  let promises = []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  const symbols = await Promise.all(promises)\n  //console.log('margin', margin.toString(), marginHeld.toString())\n  const liquidityUsedInAmount = symbols.reduce((accum, a) => {\n    return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).times(minPoolMarginRatio).abs())\n  }, bg(0))\n\n  //const liquidityUsed = liquidityUsedInAmount.div(liquidity)\n  const res = {\n    price,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    tradersNetVolume: tradersNetVolume.toString(),\n    liquidity: liquidity.toString(),\n    //pnl: pnl.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    fundingRatePerBlock: fundingRatePerBlock,\n    fundingRate: fundingRate,\n    liquidityUsed: liquidityUsedInAmount.div(liquidity)\n  }\n  fundingRateCache.set(chainId, poolAddress, symbolId, res)\n  return res\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  try {\n    const res = await _getFundingRate(chainId, poolAddress, symbolId)\n    const { fundingRate, fundingRatePerBlock, liquidity, tradersNetVolume } = res\n    return {\n      fundingRate0: fundingRate.times(100).toString(),\n      fundingRatePerBlock: fundingRatePerBlock.toString(),\n      liquidity: liquidity.toString(),\n      volume: '-',\n      tradersNetVolume: tradersNetVolume.toString()\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    fundingRate0: '',\n    fundingRatePerBlock: '',\n    liquidity: '',\n    volume: '',\n    tradersNetVolume: '',\n  };\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId)\n    }\n    const args = [\n      bg(res.tradersNetVolume).plus(newNetVolume).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ]\n    let fundingRate1 = calculateFundingRate(...args)\n    fundingRate1 = processFundingRate(chainId, fundingRate1)\n    return {\n      fundingRate1: fundingRate1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    fundingRate1: '',\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId)\n    }\n    return {\n      liquidityUsed0: res.liquidityUsed.times(100).toString(),\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidityUsed0: '',\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId)\n    }\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n    // const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    // const pToken = pTokenFactory(chainId, pTokenAddress);\n    // const { volume } = pToken.getPosition(accountAddress, symbolId);\n    let symbolIdList = getPoolSymbolIdList(poolAddress)\n    let promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let liquidityUsed0 = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume.plus(newNetVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume).abs())\n      }\n    }, bg(0))\n    //liquidityUsed0 = liquidityUsed0.times(res.minPoolMarginRatio)\n    //const liquidityUsed = bg(newNetVolume).times(res.price).times(res.multiplier).times(res.minPoolMarginRatio).div(res.liquidity)\n    const liquidityUsed1 = liquidityUsed0.times(res.minPoolMarginRatio).div(res.liquidity)\n    return {\n      liquidityUsed1: liquidityUsed1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidityUsed1: '',\n  }\n}\n\n\nexport const getPoolBTokensBySymbolId = async(chainId, poolAddress, accountAddress, symbolId) => {\n  try {\n    let bTokenList = getPoolBTokenList(poolAddress)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress);\n    // let bTokenList = bTokensConfigList.map((i) => {\n    //   return {bTokenId: i.bTokenId, bTokenSymbol: i.bTokenSymbol, bTokenAddress: i.bToken}\n    // })\n    let promiseList = []\n    for (let i=0; i<bTokenList.length; i++) {\n      promiseList.push(bTokenFactory(chainId, bTokenList[i].bTokenAddress).balanceOf(accountAddress))\n    }\n    const resultList = await Promise.all(promiseList)\n    for (let i=0; i<bTokenList.length; i++) {\n      bTokenList[i].walletBalance = resultList[i].toString()\n    }\n\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    const symbolIdList = getPoolSymbolIdList(poolAddress)\n    const [margins, positions, parameterInfo] = await Promise.all([\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      perpetualPool.getParameters(),\n    ]);\n    const { minInitialMarginRatio } = parameterInfo;\n\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n    //console.log('margin', margin.toString())\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs().times(minInitialMarginRatio))\n    }, bg(0))\n    //console.log('marginHeld', marginHeld.toString())\n\n    const pnl = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    //console.log('pnl', pnl.toString())\n\n    bTokenList = bTokenList.map((i, index) => {\n      if(!isNaN(parseFloat(bTokens[index].price)) || bTokens[index].price !== '0') {\n        i.availableBalance = max(min(margin.minus(marginHeld).plus(pnl).div(bTokens[index].price).div(bTokens[index].discount), margins[index]), bg(0)).toString()\n      } else {\n        i.availableBalance = '-'\n      }\n      return i\n    })\n    return bTokenList\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return []\n}\n\nexport const getFundingFee = async(chainId, poolAddress, accountAddress, symbolId) => {\n    const symbolConfigList = getPoolSymbolList(poolAddress)\n    const symbolList = symbolConfigList.map((i) => i.symbol)\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const pToken = pTokenFactory(chainId, pTokenAddress);\n    const [symbolInfo, positionInfo, price, lastUpdatedBlockNumber, latestBlockNumber] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      pToken.getPosition(accountAddress, symbolId),\n      getOraclePrice(chainId, symbolList[parseInt(symbolId)]),\n      perpetualPool.getLastUpdatedBlockNumber(),\n      perpetualPool.getLatestBlockNumber(),\n    ])\n    const { volume, lastCumulativeFundingRate } = positionInfo\n    const { multiplier, fundingRateCoefficient, tradersNetVolume, cumulativeFundingRate, } = symbolInfo;\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    const fundingFee = calculateFundingFee(\n      tradersNetVolume,\n      price,\n      multiplier,\n      fundingRateCoefficient,\n      liquidity,\n      cumulativeFundingRate,\n      lastCumulativeFundingRate,\n      lastUpdatedBlockNumber,\n      latestBlockNumber,\n      volume,\n    );\n  return fundingFee.toString()\n}\n","import { deriToNatural } from '../utils';\nimport { perpetualPoolFactory } from '../factory';\nimport { getPoolConfig2, getPoolSymbolIdList} from '../config'\n\nimport { getRestServerConfig, DeriEnv } from '../../config';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nconst processTradeEvent = async (\n  perpetualPool,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const symbolId = info.symbolId\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier[parseInt(symbolId)],\n    feeRatio[parseInt(symbolId)]\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier[parseInt(symbolId)]);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    //baseToken: bTokenSymbol,\n    symbolId,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  return res;\n};\nconst getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n  fromBlock\n) => {\n\n  const symbolIdList = getPoolSymbolIdList(poolAddress)\n  //console.log('symbolIdList', symbolIdList);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n\n  let promises= []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  let symbols = await Promise.all(promises)\n\n  const multiplier = symbols.map((i) => i.multiplier.toString());\n  const feeRatio = symbols.map((i) => i.feeRatio.toString());\n\n  const filters = { owner: accountAddress };\n  let events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n\n  const result = [];\n  events  = events.filter((i) => i.returnValues.symbolId === symbolId)\n  //console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    const res = await processTradeEvent(\n      perpetualPool,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  try {\n    let tradeFromBlock, tradeHistory = [];\n    const res = await fetchJson(\n      `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}/${symbolId}`\n    );\n    if (res && res.success) {\n      tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n      if (res.data.tradeHistory && Array.isArray(res.data.tradeHistory)) {\n        tradeHistory = res.data.tradeHistory;\n      }\n    }\n    if (tradeHistory.length > 0) {\n      tradeHistory = tradeHistory\n        .filter((i) => i)\n        .map((i) => {\n          return {\n            direction: i.direction.trim(),\n            //baseToken: i.baseToken.trim(),\n            symbolId: i.symbolId,\n            price: deriToNatural(i.price).toString(),\n            notional: deriToNatural(i.notional).toString(),\n            volume: deriToNatural(i.volume).toString(),\n            transactionFee: deriToNatural(i.transactionFee).toString(),\n            transactionHash: i.transactionHash,\n            time: i.time.toString(),\n          };\n        });\n    }\n      //console.log('tradeHistory1',tradeHistory)\n    if (tradeFromBlock !== 0) {\n      // console.log(tradeFromBlock, liquidateFromBlock)\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline.concat(tradeHistory);\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    } else {\n\n      const {initialBlock} = getPoolConfig2(poolAddress)\n      tradeFromBlock = parseInt(initialBlock);\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline;\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    }\n  } catch(err) {\n    console.log(`getTradeHistory(${chainId}, ${poolAddress}, ${accountAddress}, ${symbolId}): ${err}`)\n  }\n  return []\n};\n","import { isOrderValid } from '../calculation';\nimport { getPoolConfig2, getPoolSymbolIdList, getPoolBTokenIdList } from '../config'\nimport {\n  bTokenFactory,\n  perpetualPoolRouterFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n} from '../factory';\nimport { getOracleInfo, bg } from '../utils';\n\nexport const unlock = async (chainId, poolAddress, accountAddress, bTokenId) => {\n   const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n  const bToken = bTokenFactory(chainId, bTokenAddress);\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress, poolAddress)\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.addMargin(accountAddress, bTokenId, amount);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.removeMargin(accountAddress, bTokenId, amount, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    let symbolIdList = getPoolSymbolIdList(poolAddress)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePosition = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}\n\nexport const depositMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   //const [price, symbolInfo, parameterInfo, positions] = await Promise.all([\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    //console.log('liquidity', liquidity.toString())\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n    // const pnl = bTokens.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n    // console.log('pnl', pnl.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n     promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePositionWithPrices = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}","import { brokerManagerFactory } from \"../factory\"\nimport { normalizeAddress, normalizeChainId } from \"../utils\"\nimport { getBrokerConfig } from \"../config\"\n\nexport const getBroker = async(chainId, accountAddress) => {\n  chainId = normalizeChainId(chainId)\n  accountAddress = normalizeAddress(accountAddress)\n  const {address: brokerAddress} = getBrokerConfig(chainId)\n  let res = ''\n  try {\n    const brokerManager = brokerManagerFactory(chainId, brokerAddress)\n    res = await brokerManager.getBroker(accountAddress)\n  } catch (err) {\n    console.log(err)\n  }\n  return res\n}\n\nexport const setBroker = async(chainId, accountAddress, brokerAddress) => {\n  chainId = normalizeChainId(chainId)\n  accountAddress = normalizeAddress(accountAddress)\n  brokerAddress = normalizeAddress(brokerAddress);\n  const {address: brokerManagerAddress} = getBrokerConfig(chainId)\n  let res\n  try {\n    const brokerManager = brokerManagerFactory(chainId, brokerManagerAddress)\n    const tx = await brokerManager.setBroker(accountAddress, brokerAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res\n}","import { pTokenAirdropFactory, pTokenFactory } from \"../factory\"\nimport { getPoolConfig2 } from '../config'\nimport { DeriEnv } from \"../../config\"\n\nconst AIRDROP_PTOKEN_ADDRESS_BSC = '0x94e7f76eb542657Bc8d2a9aA321D79F66F7C8FfA'\nconst AIRDROP_PTOKEN_ADDRESS_BSCTESTNET = '0x3b88a9B5896a49AEb23Ca2Ee9892d28d3B8De5f6'\n\nconst getAirdropPTokenAddress = () => {\n  const env = DeriEnv.get()\n  if (env === 'prod') {\n    return AIRDROP_PTOKEN_ADDRESS_BSC\n  } else {\n    return AIRDROP_PTOKEN_ADDRESS_BSCTESTNET\n  }\n}\n\nexport const airdropPToken = async (chainId, accountAddress) => {\n  let res\n  let contractAddress = getAirdropPTokenAddress()\n  try {\n    const tx = await pTokenAirdropFactory(chainId, contractAddress).airdropPToken(accountAddress)\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res\n}\n\nexport const getAirdropPTokenWhitelistCount = async (chainId) => {\n  let res\n  let contractAddress = getAirdropPTokenAddress()\n  try {\n    res = await pTokenAirdropFactory(chainId, contractAddress).totalWhitelistCount()\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return res\n}\n\nexport const isUserPTokenExist = async (chainId, poolAddress, accountAddress) => {\n  let res = ''\n  try {\n    const {lToken:lTokenAddress} = getPoolConfig2(poolAddress)\n    const pToken = pTokenFactory(chainId, lTokenAddress)\n    const result = await pToken.balanceOf(accountAddress)\n    if (result === '1') {\n      res = true\n    } else if (result === '0') {\n      res = false\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return res\n}","export {\n  DeriEnv,\n  //getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\nexport * from './calculation';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  // isUnlocked,\n  // getEstimatedMargin,\n  // getEstimatedFee,\n  // getEstimatedFundingRate,\n  // getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n  // getFundingRate,\n  //getPositionInfo,\n  getDeriBalance,\n} from './api/contractQueryApi';\nexport {\n  //unlock,\n  //depositMargin,\n  //withdrawMargin,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mint,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport {\n  getUserInfo,\n  getUserInfoHarvest,\n  getUserInfoTotal,\n  getUserInfoAll,\n  //getPoolInfoApy,\n  getLpPoolInfoApy,\n  getUserInfoInPool,\n  getUserInfoAllForAirDrop,\n} from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\n//getSpecification2 as getSpecification,\n// getPositionInfo2 as getPositionInfo,\n//getLiquidityInfo2 as getLiquidityInfo,\n//getWalletBalance2 as getWalletBalance,\n//getFundingRate2 as getFundingRate,\n//getLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\n//getDeriBalance2 as getDeriBalance,\n//getTradeHistory2 as getTradeHistory,\nfetchRestApi,\n} from './api/restApi';\n\n// export {\n  //tradeWithMargin2 as tradeWithMargin,\n  //closePosition2 as closePosition,\n  //depositMargin2 as depositMargin,\n  //withdrawMargin2 as withdrawMargin,\n  //addLiquidity2 as addLiquidity,\n  //removeLiquidity2 as removeLiquidity,\n// } from './api/contractTransactionApiV2'\n\nexport * from './api/lpPoolApi';\n\nexport * from './api_wrapper';\n\nexport {\n  getPoolConfigList,\n  getFilteredPoolConfigList,\n  getPoolBTokensBySymbolId,\n  setBroker,\n  airdropPToken,\n  isUserPTokenExist,\n  getAirdropPTokenWhitelistCount,\n} from './v2';\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    const chainId = parseInt(\n      await window.ethereum.request({ method: 'net_version' })\n    );\n    // const chainId = hexToNumber(\n    //   await window.ethereum.request({ method: 'eth_chainId' })\n    // );\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import {\n  getSlpLiquidityInfo,\n  getSlpWalletBalance,\n  isSlpUnlocked,\n  unlockSlp,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './slpPoolApi';\nimport {\n  getClp2LiquidityInfo,\n  getClp2WalletBalance,\n  isClp2Unlocked,\n  unlockClp2,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './clp2PoolApi';\nimport {\n  getClpLiquidityInfo,\n  getClpWalletBalance,\n  isClpUnlocked,\n  unlockClp,\n  // addClpLiquidity,\n  // removeClpLiquidity,\n} from './clpPoolApi';\n\nimport {\n  addSlpLiquidity2 as addSlpLiquidity,\n  removeSlpLiquidity2 as removeSlpLiquidity,\n  addClpLiquidity2 as addClpLiquidity,\n  removeClpLiquidity2 as removeClpLiquidity,\n  addClp2Liquidity2 as addClp2Liquidity,\n  removeClp2Liquidity2 as removeClp2Liquidity,\n} from './contractTransactionApiV2'\nimport { getLpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getLpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Add liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp') {\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp2') {\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\n  } else {\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Remove liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await removeSlpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp') {\n    return await removeClpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp2') {\n    return await removeClp2Liquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else {\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Check account is unlocked in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Unlock the account in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await unlockSlp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await unlockClp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await unlockClp2(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`unlockLp(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Get account balance in lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getLpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\n  }\n};\n","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  load(version){\n    const current = version && version.current;\n    let configs = getContractAddressConfig(DeriEnv.get(),current)\n    if(version){\n      configs = configs.filter(c => c.version === version.current)\n      //v2 不需要展示base token,需要合并相同的base token\n      if(version.isV2){\n        configs = configs.reduce((total,cur) => {\n          const pos = total.findIndex(c => c.symbol === cur.symbol && c.pool === cur.pool);\n          if(pos === -1 ){\n            total.push(cur)\n          }\n          return total;\n        },[])\n      }\n    }\n    this.setAll(configs)\n    return this.all;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","const { getContractAddressConfig:getContractAddressConfig2} = require(\"../config\");\nconst { getPoolConfigList:getPoolConfigListV2} = require(\"../v2/config\")\n\nexport const getContractAddressConfig = (env = 'dev', version) => {\n  if (!version || version === '1' || version === 'v1') {\n    return getContractAddressConfig2(env)\n  } else if (version === '2' || version === 'v2') {\n    return getPoolConfigListV2(env).concat(getContractAddressConfig2(env))\n  } else {\n    throw new Error(`getPoolContractAddress: invalid version: ${version}`)\n  }\n}","import { getLiquidityInfo2 } from '../api/restApi';\nimport { getPoolLiquidity as getPoolLiquidity2, getPoolInfoApy as getPoolInfoApy2 } from '../api/databaseApi';\nimport { \n  getLiquidityInfo as getLiquidityInfoV2,\n  getPoolLiquidity as getPoolLiquidityV2,\n  getPoolInfoApy as getPoolInfoApyV2,\n } from '../v2';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getLiquidityInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getLiquidityInfoV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const getPoolLiquidity = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getPoolLiquidity2(chainId, poolAddress)\n  } else {\n    return getPoolLiquidityV2(chainId, poolAddress, bTokenId)\n  }\n};\n\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\n  if (bTokenId === undefined) {\n    return getPoolInfoApy2(chainId, poolAddress)\n  } else {\n    return getPoolInfoApyV2(chainId, poolAddress, bTokenId)\n  }\n};","import {addLiquidity2, removeLiquidity2 } from '../api/contractTransactionApiV2';\nimport {\n  addLiquidity as addLiquidityV2,\n  removeLiquidity as removeLiquidityV2\n  // addLiquidityWithPrices as addLiquidityV2,\n  // removeLiquidityWithPrices as removeLiquidityV2,\n} from '../v2';\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return addLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return addLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if (bTokenId === undefined) {\n    return removeLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return removeLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum,\n    );\n  }\n}\n","import {\n  getPositionInfo as getPositionInfo2,\n  isUnlocked as isUnlocked2,\n  isDeriUnlocked,\n  getEstimatedMargin as getEstimatedMargin2,\n  getEstimatedFee as getEstimatedFee2,\n  getEstimatedFundingRate as getEstimatedFundingRate2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsed2,\n  getWalletBalance as getWalletBalance2,\n} from '../api/contractQueryApi'\n\nimport {\n  getSpecification2,\n  getFundingRate2,\n  getLiquidityUsed2,\n  getFundingRateCache2,\n} from '../api/restApi'\n//import { bTokenFactory } from '../factory/contracts'\n\nimport {\n  getPositionInfo as getPositionInfoV2,\n  isUnlocked as isUnlockedV2,\n  getEstimatedMargin as getEstimatedMarginV2,\n  getEstimatedFee as getEstimatedFeeV2,\n  getEstimatedFundingRate as getEstimatedFundingRateV2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsedV2,\n  getSpecification as getSpecificationV2,\n  getWalletBalance as getWalletBalanceV2,\n  getFundingRate as getFundingRateV2,\n  getLiquidityUsed as getLiquidityUsedV2,\n  getFundingRateCache as getFundingRateCacheV2,\n} from '../v2'\n\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getSpecification2(chainId, poolAddress)\n  } else {\n    return getSpecificationV2(chainId, poolAddress, bTokenId, symbolId)\n  }\n}\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getPositionInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getPositionInfoV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n}\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getWalletBalance2(chainId, poolAddress, accountAddress)\n  } else {\n    return getWalletBalanceV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => { \n  if (accountAddress === undefined) {\n    return isDeriUnlocked(chainId, poolAddress)\n  } else if (bTokenId === undefined) {\n    return isUnlocked2(chainId, poolAddress, accountAddress)\n  } else {\n    return isUnlockedV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  if (symbolId === undefined) {\n    return getEstimatedFee2(chainId, poolAddress, volume)\n  } else {\n    return getEstimatedFeeV2(chainId, poolAddress, volume, symbolId)\n  }\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedMargin2(chainId, poolAddress, accountAddress, volume, leverage)\n  } else {\n    return getEstimatedMarginV2(chainId, poolAddress, accountAddress, volume, leverage, symbolId)\n  }\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRate2(chainId, poolAddress)\n  } else {\n    return getFundingRateV2(chainId, poolAddress, symbolId)\n  }\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedFundingRate2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedFundingRateV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return getLiquidityUsed2(chainId, poolAddress)\n  } else {\n    return getLiquidityUsedV2(chainId, poolAddress, symbolId)\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedLiquidityUsed2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedLiquidityUsedV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRateCache2(chainId, poolAddress)\n  } else {\n    return getFundingRateCacheV2(chainId, poolAddress, symbolId)\n  }\n}\n","import { unlock as unlock2, unlockDeri } from '../api/contractTransactionApi';\nimport {\n  tradeWithMargin2,\n  closePosition2,\n  depositMargin2,\n  withdrawMargin2,\n} from '../api/contractTransactionApiV2';\nimport {\n  unlock as unlockV2,\n  tradeWithMargin as tradeWithMarginV2,\n  closePosition as closePositionV2,\n  depositMargin as depositMarginV2,\n  withdrawMargin as withdrawMarginV2,\n  // tradeWithMarginWithPrices as tradeWithMarginV2,\n  // depositMarginWithPrices as depositMarginV2,\n  // withdrawMarginWithPrices as withdrawMarginV2,\n  // closePositionWithPrices as closePositionV2,\n} from '../v2';\n\nexport const unlock = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId\n) => {\n  if (accountAddress === undefined) {\n    return unlockDeri(chainId, poolAddress);\n  } else if (bTokenId === undefined) {\n    return unlock2(chainId, poolAddress, accountAddress);\n  } else {\n    return unlockV2(chainId, poolAddress, accountAddress, bTokenId);\n  }\n};\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId\n) => {\n  if (bTokenId === undefined) {\n    return depositMargin2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return depositMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n};\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum\n) => {\n  if (bTokenId === undefined) {\n    return withdrawMargin2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return withdrawMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum\n    );\n  }\n};\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return tradeWithMargin2(chainId, poolAddress, accountAddress, newVolume);\n  } else {\n    return tradeWithMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      newVolume,\n      symbolId\n    );\n  }\n};\n\nexport const closePosition = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return closePosition2(chainId, poolAddress, accountAddress);\n  } else {\n    return closePositionV2(chainId, poolAddress, accountAddress, symbolId);\n  }\n};\n","\nimport {getTradeHistory2} from '../api/restApi';\nimport { \n  getTradeHistory as getTradeHistoryV2\n } from '../v2';\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getTradeHistory2(chainId, poolAddress, accountAddress);\n  } else {\n    return getTradeHistoryV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      symbolId,\n    );\n  }\n}","import { bg, getDailyBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  return bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n}\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getDailyBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import { getOracleConfig } from '../config/oracle';\nimport { getPoolConfig2 } from '../config/pool';\nimport { oracleFactory } from '../factory';\nimport { normalizeChainId } from './validate';\nimport { DeriEnv } from '../../config';\n\nexport const getOracleUrl = (poolAddress, symbolId) => {\n  const env = DeriEnv.get();\n  const { symbol } = getPoolConfig2(poolAddress, null, symbolId);\n  const addSymbolParam = (url, symbol = 'BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle4.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (poolAddress, symbolId) => {\n  let url = getOracleUrl(poolAddress, symbolId);\n  //console.log('oracle url', url);\n  let retry = 2;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    if (res.ok) {\n      break;\n    }\n    retry -= 1;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\n// export const getOraclePrice = async (poolAddress, symbolId) => {\n//   const responseJson = await getOracleInfo(poolAddress, symbolId);\n//   let price = responseJson.price;\n//   if (!price) {\n//     price = '0';\n//   }\n//   return deriToNatural(responseJson.price).toString();\n// };\n\nexport const getOraclePrice = async (chainId, symbol) => {\n  chainId = normalizeChainId(chainId);\n  const config = getOracleConfig(chainId, symbol);\n  if (config && config.address) {\n    if (!config.decimal) {\n      throw new Error('getOraclePrice: decimal is empty', config.decimal);\n    }\n    const oracle = oracleFactory(\n      chainId,\n      config.address,\n      symbol,\n      config.decimal,\n    );\n    return await oracle.getPrice();\n  }\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  //const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.apy2`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, apy2, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        apy2: deriToNatural(apy2).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\n//   const db = databaseFactory(true);\n//   try {\n//     const poolNetwork = getNetworkName(chainId);\n//     const res = await db\n//       .getValues([\n//         `${poolNetwork}.${poolAddress}.apy`,\n//         `${poolNetwork}.${poolAddress}.apy2`,\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\n//       ])\n//       .catch((err) => console.log('getPoolInfoApy', err));\n//     if (res) {\n//       const [apy, apy2, volume1h, volume24h] = res;\n//       return {\n//         apy: deriToNatural(apy).toString(),\n//         apy2: deriToNatural(apy2).toString(),\n//         volume1h: deriToNatural(volume1h).toString(),\n//         volume24h: deriToNatural(volume24h).toString(),\n//       };\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseAirdropFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import {\n  getPoolContractAddress,\n  //naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url, opts) => {\n  const resp = await fetch(url, opts);\n  return await resp.json();\n};\n\nexport const fetchRestApi = async (path, opts = { method: 'GET' }) => {\n  return await fetchJson(`${getHttpBase()}${path}`, opts);\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from './contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from './slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from './clpPoolApi'\nimport {\n  addClp2Liquidity,\n  removeClp2Liquidity,\n} from './clp2PoolApi'\nimport { wsInstance } from './apiGlobals'\nimport { getRestServerConfig, DeriEnv } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resourceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 3000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","import { makeAutoObservable, observable, action, computed } from \"mobx\";\nimport { storeVersion, restoreVersion } from \"../utils/utils\";\n\nclass Version {\n  current = null;\n\n  constructor(){\n    makeAutoObservable(this,{\n      current : observable,\n      setCurrent : action,\n      isV1 : computed,\n      isV2 : computed\n    })\n  }\n\n\n  setCurrent(version){\n    this.current = version;\n  }\n\n  switch(){\n    if(this.current === 'v1'){\n      this.setCurrent('v2')\n    } else {\n      this.setCurrent('v1')\n    }\n  }\n\n  get isV1() {\n    return this.current === 'v1'\n  }\n\n  get isV2(){\n    return this.current === 'v2'\n  }\n}\nexport default new Version()","\n\nimport BigNumber from 'bignumber.js'\nimport version from '../model/Version';\nconst versionKey = 'deri-current-version'\n\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}\n\nexport function isLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\nexport function isSushiLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\n}\nexport function isCakeLP(address){\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\n\nexport function sessionStorageKey(version){\n  return `${version}-current-trading-pool`\n}\n\n\n// export function storeVersion(version){\n//   sessionStorage.setItem(versionKey,version)\n// }\n\n// export function restoreVersion(){\n//   return sessionStorage.getItem(versionKey)\n// }\n\nexport function storeConfig(version,config){\n  if(config){\n    const key = sessionStorageKey(version);\n    sessionStorage.setItem(key,JSON.stringify(config))\n  }\n}\n\nexport function getConfigFromStore(version){\n  return JSON.parse(sessionStorage.getItem(sessionStorageKey(version)))\n}\n\nexport function storeChain(chainInfo){\n  sessionStorage.setItem('current-chain',JSON.stringify(chainInfo))\n}\nexport function restoreChain(){\n  return JSON.parse(sessionStorage.getItem('current-chain')) || {code : ''};\n}\n\nexport function storeLocale(locale){\n  sessionStorage.setItem('current-locale',locale)\n}\n\nexport function restoreLocale(){\n  return sessionStorage.getItem('current-locale')\n}\n\nexport function addParam(param,value,urlString = window.location.href){\n  const url = new URL(urlString);\n  if(url.searchParams.has(param)){\n    url.searchParams.set(param,value);\n  } else {\n    url.searchParams.append(param,value);\n  }\n  return  url.toString();\n}\n\nexport function hasParam(param,urlString = window.location.href){\n  const url = new URL(urlString);\n  return url.searchParams.has(param);\n}\n\nexport function getParam(param,urlString = window.location.href){\n  const url = new URL(urlString);\n  return url.searchParams.get(param);\n}\n\nexport function getFormatSymbol(symbol){\n  const curChain = restoreChain();\n  return version.current === 'v2' ? `${symbol}_V2_${curChain ? curChain.code.toUpperCase() : 'BSC'}` : symbol\n}\n\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  //accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  let symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  // fix symbol BTCUSD issue, will remove later\n  // if (poolAddress === '0xA2D7316Bc60AA9463DfB78379d25E77371990507') {\n  //   symbol = 'iMEME'\n  // }\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  let price = ''\n  try {\n    price = await getBTCUSDPrice(chainId, poolAddress);\n  } catch (err) {\n    console.log(err)\n  }\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  if (price === '') {\n    return {\n      price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(\n        volume,\n        cost,\n        multiplier\n      ).toString(),\n      margin: margin.toString(),\n      marginHeld: '',\n      unrealizedPnl: '',\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        cost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  } else {\n    return {\n      price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(\n        volume,\n        cost,\n        multiplier\n      ).toString(),\n      margin: margin.toString(),\n      marginHeld: calculateMarginHeld(\n        price,\n        volume,\n        multiplier,\n        minInitialMarginRatio\n      ).toString(),\n      unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        cost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  }\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  return await deri.isUnlocked(accountAddress);\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","import { metaMaskWeb3, web3Factory } from '../factory';\nimport { numberToHex } from '../utils';\nimport { isBrowser, isJsDom } from '../utils/convert';\n\nconst MAX_GAS_AMOUNT = 832731;\n\nexport class ContractBase {\n  constructor(chainId, contractAddress, contractAbi) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n  }\n\n  async _init() {\n    // re-init web3 and contract when web3 instance is null\n    if (!this.web3) {\n      if (isBrowser() && !isJsDom()) {\n        this.web3 = metaMaskWeb3();\n      } else {\n        this.web3 = await web3Factory.get(this.chainId);\n      }\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while (retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        // remove web3 instance to re-init\n        this.web3 = null\n        if (err.toString().includes('Invalid JSON RPC response')) {\n          console.log(`Invalid JSON RPC response with chainId(${this.chainId})`);\n        } else if (err.toString().includes(\"Returned values aren't valid,\")) {\n          console.log(`Invalid contract address(${this.contractAddress}) and chainId(${this.chainId})`);\n        }\n      }\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`The contract(${this.contractAddress}) '${method}(${args})' failed with max retry 2.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    await this._init()\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (error) {\n        // ignore the metamask error\n      }\n    }\n    if (gas == 0 || gas > 10000000) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: numberToHex(gas),\n        value: numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n    //return await this.contract.methods[method](...args).send({from: accountAddress})\n  }\n\n}\n","\n/* eslint-disable */\nexport const perpetualPoolAbi = [ { \"inputs\": [ { \"internalType\": \"uint256[9]\", \"name\": \"parameters\", \"type\": \"uint256[9]\" }, { \"internalType\": \"address[4]\", \"name\": \"addresses\", \"type\": \"address[4]\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"reward\", \"type\": \"uint256\" } ], \"name\": \"Liquidate\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"collector\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"ProtocolFeeCollection\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" } ], \"name\": \"Trade\", \"type\": \"event\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"targetPool\", \"type\": \"address\" } ], \"name\": \"approvePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"collectProtocolFee\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourcePool\", \"type\": \"address\" } ], \"name\": \"executePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getAddresses\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"routerAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"protocolFeeCollector\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBToken\", \"outputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBTokenOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengths\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getParameters\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"decimals0\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"minBToken0Ratio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minPoolMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minInitialMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minMaintenanceMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"maxLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidationCutRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"protocolFeeCollectRatio\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getProtocolFeeAccrued\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbol\", \"outputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbolOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const perpetualPoolRouterAbi = [ { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"liquidatorQualifierAddress\", \"type\": \"address\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"ExecuteMigration\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"PrepareMigration\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"multiplier\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"approveMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"claimNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"controller\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourceRouter\", \"type\": \"address\" } ], \"name\": \"executeMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"liquidateWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"liquidatorQualifier\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationDestination\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationTimestamp\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"graceDays\", \"type\": \"uint256\" } ], \"name\": \"prepareMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"qualifierAddress\", \"type\": \"address\" } ], \"name\": \"setLiquidatorQualifier\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newController\", \"type\": \"address\" } ], \"name\": \"setNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"poolAddress\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"tradeWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const bTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" } ], \"stateMutability\": \"pure\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const lTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"name\": \"UpdateAsset\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getAsset\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getAssets\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"asset\", \"type\": \"tuple\" } ], \"name\": \"updateAsset\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const pTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numSymbols_\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"UpdateMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"name\": \"UpdatePosition\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getMargin\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getMargins\", \"outputs\": [ { \"internalType\": \"int256[]\", \"name\": \"\", \"type\": \"int256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getPosition\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getPositions\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numSymbols\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumSymbols\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"updateMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"int256[]\", \"name\": \"margins\", \"type\": \"int256[]\" } ], \"name\": \"updateMargins\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"position\", \"type\": \"tuple\" } ], \"name\": \"updatePosition\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\n\nexport const wooOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\nexport const chainlinkOracleAbi = [{\"type\":\"constructor\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"_accessController\",\"internalType\":\"address\"}]},{\"type\":\"event\",\"name\":\"AnswerUpdated\",\"inputs\":[{\"type\":\"int256\",\"name\":\"current\",\"internalType\":\"int256\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"roundId\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewRound\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"roundId\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"address\",\"name\":\"startedBy\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferRequested\",\"inputs\":[{\"type\":\"address\",\"name\":\"from\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"to\",\"internalType\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"type\":\"address\",\"name\":\"from\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"to\",\"internalType\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"acceptOwnership\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AccessControllerInterface\"}],\"name\":\"accessController\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"aggregator\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"confirmAggregator\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint8\",\"name\":\"\",\"internalType\":\"uint8\"}],\"name\":\"decimals\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"name\":\"description\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"int256\",\"name\":\"\",\"internalType\":\"int256\"}],\"name\":\"getAnswer\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_roundId\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"getRoundData\",\"inputs\":[{\"type\":\"uint80\",\"name\":\"_roundId\",\"internalType\":\"uint80\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getTimestamp\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_roundId\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"int256\",\"name\":\"\",\"internalType\":\"int256\"}],\"name\":\"latestAnswer\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"latestRound\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"latestRoundData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"latestTimestamp\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address payable\"}],\"name\":\"owner\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AggregatorV2V3Interface\"}],\"name\":\"phaseAggregators\",\"inputs\":[{\"type\":\"uint16\",\"name\":\"\",\"internalType\":\"uint16\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint16\",\"name\":\"\",\"internalType\":\"uint16\"}],\"name\":\"phaseId\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"proposeAggregator\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AggregatorV2V3Interface\"}],\"name\":\"proposedAggregator\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"inputs\":[{\"type\":\"uint80\",\"name\":\"_roundId\",\"internalType\":\"uint80\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"proposedLatestRoundData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setController\",\"inputs\":[{\"type\":\"address\",\"name\":\"_accessController\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"transferOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"version\",\"inputs\":[]}]\nexport const wrappedOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n\nexport const brokerManagerAbi = [{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"SetBroker\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBroker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"setBroker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\nexport const pTokenAirdropAbi = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"poolRouterAddress\", \"type\": \"address\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" } ], \"name\": \"AddWhitelist\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" } ], \"name\": \"AirdropPToken\", \"type\": \"event\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"userAddress\", \"type\": \"address\" } ], \"name\": \"addWhitelist\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"airdropPToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getBTokenBalance\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"isStartAirdrop\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"ownerAddress\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"startAirdrop\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"stopAirdrop\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalAirdropCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalWhitelistCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"withdrawBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\n/* eslint-disable */","import { ContractBase } from './contract_base'\nimport { perpetualPoolAbi } from './abis';\nimport { deriToNatural, hexToNumber, bg } from '../utils'\n\nexport class PerpetualPool extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, perpetualPoolAbi)\n\n    this.bTokenCount= 0\n    this.symbolCount= 0\n\n    this.lTokenAddress = ''\n    this.pTokenAddress = ''\n    this.routerAddress = ''\n    this.protocolFeeCollector = ''\n\n    this.protocolFeeAccrued = 0\n  }\n\n  async _update() {\n    await Promise.all([\n      this.getLengths(),\n      this.getAddresses(),\n      this.getParameters(),\n    ]);\n  }\n\n  async getLengths() {\n    try {\n      const res = await this._call('getLengths')\n      //console.log(res[0])\n      if (res[0] && res[1]) {\n        this.bTokenCount= parseInt(res[0])\n        this.symbolCount= parseInt(res[1])\n      }\n    } catch(err) {\n      throw new Error(`PerpetualPool#_getLength error: ${err}`)\n    }\n  }\n  async getAddresses() {\n    try {\n      const res = await this._call('getAddresses')\n      this.lTokenAddress = res.lTokenAddress\n      this.pTokenAddress = res.pTokenAddress\n      this.routerAddress = res.routerAddress\n      this.protocolFeeCollector = res.protocolFeeCollector\n    } catch (err) {\n      throw new Error(`PerpetualPool#_getAddress error: ${err}`)\n    }\n  }\n  async getParameters() {\n    const res = await this._call('getParameters')\n    return {\n      decimals0: res.decimals0,\n      minBToken0Ratio: deriToNatural(res.minBToken0Ratio),\n      minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n      minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n      minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n      minLiquidationReward: deriToNatural(res.minLiquidationReward),\n      maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n      liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n      protocolFeeCollectRatio: deriToNatural(res.protocolFeeCollectRatio),\n    };\n  }\n  async getProtocolFeeAccrued() {\n    const res =  await this._call('getProtocolFeeAccrued')\n    this.protocolFeeAccrued = deriToNatural(res)\n  }\n  async getBToken(bTokenId) {\n    try {\n      //bTokenId = parseInt(bTokenId)\n      const res = await this._call('getBToken', [bTokenId]);\n      return {\n        bTokenAddress: res.bTokenAddress,\n        swapperAddress: res.bTokenAddress,\n        oracleAddress: res.oracleAddress,\n        decimals: res.decimals,\n        discount: deriToNatural(res.discount),\n        price: deriToNatural(res.price),\n        liquidity: deriToNatural(res.liquidity),\n        pnl: deriToNatural(res.pnl),\n        cumulativePnl: deriToNatural(res.cumulativePnl),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getBToken error: ${err}`);\n    }\n  }\n  async getBTokenOracle(bTokenId) {\n    //bTokenId = parseInt(bTokenId)\n    return await this._call('getBTokenOracle', [bTokenId])\n  }\n  async getSymbol(symbolId) {\n    //symbolId = parseInt(symbolId)\n    try {\n      const res =  await this._call('getSymbol', [symbolId])\n      return {\n        symbol: res.symbol,\n        oracleAddress: res.oracleAddress,\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        price: deriToNatural(res.price),\n        cumulativeFundingRate: deriToNatural(res.cumulativeFundingRate),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getSymbol error: ${err}`);\n    }\n  }\n  async getSymbolOracle(symbolId) {\n    //symbolId = parseInt(symbolId)\n    return await this._call('getSymbolOracle', [symbolId])\n  }\n\n  // trade history query methods\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  // get block number when last updated\n  async getLastUpdatedBlockNumber() {\n    await this._init()\n    const res = await this.web3.eth.getStorageAt(this.contractAddress, 0)\n    //console.log('res', hexToNumber(res))\n    return hexToNumber(res)\n  }\n\n  // get block number when last updated\n  async getLatestBlockNumber() {\n    await this._init()\n    const res = await this.web3.eth.getBlockNumber()\n    //console.log('res', res)\n    return res\n  }\n\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    let amount\n    if (['56', '97','127', '80001'].includes(this.chainId)) {\n      amount = 999\n    } else {\n      amount = 4999\n    }\n    if ((fromBlock + amount) > to) {\n      amount = to - fromBlock\n    }\n    while (fromBlock <= to) {\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock: fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if ((fromBlock + amount) > to) {\n        amount = to - fromBlock\n      }\n    }\n    return events;\n  }\n}","import { ContractBase } from './contract_base'\nimport { perpetualPoolRouterAbi} from './abis';\nimport { naturalToDeri } from '../utils'\nimport { MAX_INT256 } from '../config';\n\nexport class PerpetualPoolRouter extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, perpetualPoolRouterAbi)\n    this.poolAddress = ''\n  }\n\n  // === query ===\n  async pool() {\n    this.poolAddress = await this._call('pool');\n    return this.poolAddress\n  }\n\n  // === transaction ===\n  async addLiquidity(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidity',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeLiquidity(accountAddress, bTokenId, amount, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async addMargin(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMargin',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeMargin(accountAddress, bTokenId, amount, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      //console.log('->', MAX_INT256)\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async trade(accountAddress, symbolId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'trade',\n      [symbolId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  // with prices\n  async addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidityWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n  async removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMarginWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  async removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async tradeWithPrices(accountAddress, symbolId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'tradeWithPrices',\n      [symbolId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  // async liquidate(acountAddress) {\n  //   if (!this.poolAddress) {\n  //     await this.pool()\n  //   }\n  //   return await this._transact(\n  //     'liquidate',\n  //     [accountAddress],\n  //     accountAddress\n  //   );\n  // }\n\n}","import { ContractBase } from './contract_base'\nimport { bTokenAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\nimport { MAX_UINT256} from '../config'\n\n\nexport class BToken extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, bTokenAbi);\n  }\n  // === query ===\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balanceOf(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balanceOf(address) {\n    const [res, decimals] = await Promise.all([\n      this._balanceOf(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  async totalSupply() {\n    const res = await this._call('totalSupply');\n    return deriToNatural(res);\n  }\n\n  async isUnlocked(accountAddress, poolAddress) {\n    const allowance = await this._call('allowance', [\n      accountAddress,\n      poolAddress,\n    ]);\n    return bg(allowance).gt(0);\n  }\n\n  // === transaction ===\n  async unlock(accountAddress, poolAddress) {\n    return await this._transact(\n      'approve',\n      [poolAddress, MAX_UINT256],\n      accountAddress\n    );\n  }\n\n  // async transfer() {\n  // call transfer\n  // }\n}","import { ContractBase } from './contract_base'\nimport { lTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processAsset = (res) => {\n  return {\n    liquidity: deriToNatural(res[0]),\n    pnl: deriToNatural(res[1]),\n    lastCumulativePnl: deriToNatural(res[2]),\n  }\n}\nexport class LToken extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, lTokenAbi)\n  }\n\n  // === query ===\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async pool() {\n    return await this._call('pool');\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getAsset(accountAddress, bTokenId) {\n    const res = await this._call('getAsset', [accountAddress, bTokenId]);\n    if (Array.isArray(res)) {\n      return processAsset(res)\n    } else {\n      console.log('address', this.contractAddress)\n      console.log('res', res)\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress} ${bTokenId})`)\n    }\n  }\n  async getAssets(accountAddress) {\n    const res = await this._call('getAssets', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map(i => processAsset(i))\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress})`)\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from './contract_base'\nimport { pTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processPosition = (res) => {\n  return {\n    volume: deriToNatural(res.volume),\n    cost: deriToNatural(res.cost),\n    lastCumulativeFundingRate: deriToNatural(res.lastCumulativeFundingRate),\n  }\n}\nexport class PToken extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, pTokenAbi)\n  }\n\n  // === query ===\n  async pool() {\n    return await this._call('pool');\n  }\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getMargin(accountAddress, symbolId) {\n    const res = await this._call('getMargin', [accountAddress, symbolId]);\n    return deriToNatural(res)\n  }\n  async getMargins(accountAddress) {\n    const res = await this._call('getMargins', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => deriToNatural(i))\n    }\n  }\n  async getPosition(accountAddress, symbolId) {\n    const res = await this._call('getPosition', [accountAddress, symbolId]);\n    if (Array.isArray(res)) {\n      return processPosition(res)\n    } else {\n      throw new Error(`PToken#getMargin: invalid result with (${accountAddress})`)\n    }\n  }\n  async getPositions(accountAddress) {\n    const res = await this._call('getPositions', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => processPosition(i))\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from \"./contract_base\";\nimport { wooOracleAbi } from './abis';\nimport { bg } from '../utils';\n\nexport class WooOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal) {\n    super(chainId, address, wooOracleAbi)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  async getPrice() {\n    const res = await this._call('_I_')\n    return bg(res, `-${this.decimal}`).toString();\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { chainlinkOracleAbi } from './abis';\nimport { bg } from \"../utils\";\n\nexport class ChainlinkOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal) {\n    super(chainId, address, chainlinkOracleAbi)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  // decimals refers https://docs.chain.link/docs/matic-addresses\n  async getPrice() {\n    const res = await this._call('latestRoundData');\n    if (res && res.answer) {\n      return bg(res.answer, `-${this.decimal}`).toString()\n    }\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { wrappedOracleAbi } from './abis';\nimport { deriToNatural } from \"../utils\";\n\nexport class WrappedOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal) {\n    super(chainId, address, wrappedOracleAbi)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  // decimals refers https://docs.chain.link/docs/matic-addresses\n  async getPrice() {\n    const res = await this._call('getPrice');\n    if (res) {\n      return deriToNatural(res).toString()\n    }\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { brokerManagerAbi } from './abis';\n\nexport class BrokerManager extends ContractBase {\n  constructor(chainId, address) {\n    super(chainId, address, brokerManagerAbi)\n  }\n  // query\n  async getBroker(accountAddress) {\n    return await this._call('getBroker', [accountAddress])\n  }\n\n  // transaction\n  async setBroker(accountAddress, brokerAddress) {\n    return await this._transact(\n      'setBroker',\n      [brokerAddress],\n      accountAddress\n    );\n  }\n}","import { ContractBase } from './contract_base'\nimport { pTokenAirdropAbi } from './abis'\n\nexport class PTokenAirdrop extends ContractBase {\n  constructor(chainId, poolAddress) {\n    super(chainId, poolAddress, pTokenAirdropAbi)\n  }\n  async getBTokenBalance() {\n    return await this._call('getBTokenBalance', [])\n  }\n  async totalWhitelistCount() {\n    return await this._call('totalWhitelistCount', [])\n  }\n  async airdropPToken(accountAddress) {\n    return await this._transact('airdropPToken', [], accountAddress)\n  }\n}","import { getConfig } from './config';\n\nconst expendPoolConfig = (config) => {\n  const pools = config.pools;\n  //console.log(pools)\n  return pools\n    .map((pool) => {\n      let result = [];\n      for (let i = 0; i < pool.bTokens.length; i++) {\n        const bToken = pool.bTokens[i];\n        for (let i = 0; i < pool.symbols.length; i++) {\n          const symbol = pool.symbols[i];\n          result.push({\n            pool: pool.pool,\n            pToken: pool.pToken,\n            lToken: pool.lToken,\n            router: pool.router,\n            initialBlock: pool.initialBlock,\n            chainId: pool.chainId,\n            bToken: bToken.bToken,\n            bTokenId: bToken.bTokenId,\n            bTokenSymbol: bToken.bTokenSymbol,\n            symbol: symbol.symbol,\n            symbolId: symbol.symbolId,\n            unit: symbol.unit,\n            version: 'v2',\n          });\n        }\n      }\n      return result;\n    })\n    .flat();\n};\n\nexport const getPoolConfigList = () => {\n  const config = getConfig()\n  return expendPoolConfig(config)\n};\n\nexport const getFilteredPoolConfigList = (poolAddress, bTokenId, symbolId) => {\n  bTokenId = typeof bTokenId === 'number' ? bTokenId.toString() : bTokenId\n  symbolId = typeof symbolId === 'number' ? symbolId.toString() : symbolId\n  const poolConfigList = getPoolConfigList()\n  const check = bTokenId != null\n    ? symbolId != null\n      ? (i) =>\n          i.pool === poolAddress &&\n          i.bTokenId === bTokenId &&\n          i.symbolId === symbolId\n      : (i) => i.pool === poolAddress && i.bTokenId === bTokenId\n    : (symbolId != null ? (i) => i.pool === poolAddress && i.symbolId === symbolId : (i) => i.pool === poolAddress);\n  if (poolConfigList.length > 0) {\n    const res = poolConfigList.filter(check)\n    if (res && res.length > 0) {\n      return res\n    }\n  }\n  throw new Error(`Cannot find the pool config by poolAddress(${poolAddress}) bTokenId(${bTokenId}) and symbolId(${symbolId})`)\n}\n\nexport const getPoolConfig = (poolAddress, bTokenId, symbolId) => {\n  const res =  getFilteredPoolConfigList(poolAddress, bTokenId, symbolId)\n  return res[0]\n}\n\nexport const _getPoolConfig = (poolAddress) => {\n  const config = getConfig()\n  const pools = config.pools;\n  let pool = pools.find((p) => p.pool === poolAddress);\n  //console.log(pool)\n  if (pool) {\n    return pool\n  }\n  throw new Error(`Cannot find the pool by poolAddress(${poolAddress})`);\n};\n\nexport const getPoolConfig2 = (poolAddress, bTokenId, symbolId) => {\n  const pool = _getPoolConfig(poolAddress);\n  const defaultBToken = {\n    bTokenId: '',\n    bTokenSymbol: '',\n    bToken: '',\n  };\n  const defaultSymbol = {\n    symbolId: '',\n    symbol: '',\n    unit: '',\n  };\n  let bToken, symbol;\n  if (bTokenId !== undefined || bTokenId !== null) {\n    bToken = pool.bTokens.find((b) => b.bTokenId === bTokenId) || defaultBToken;\n  }\n  if (symbolId !== undefined || symbolId !== null) {\n    symbol = pool.symbols.find((b) => b.symbolId === symbolId) || defaultSymbol;\n  }\n  return {\n    pool: pool.pool,\n    pToken: pool.pToken,\n    lToken: pool.lToken,\n    router: pool.router,\n    broker: pool.broker,\n    bTokenCount: pool.bTokenCount,\n    symbolCount: pool.symbolCount,\n    initialBlock: pool.initialBlock,\n    chainId: pool.chainId,\n    bToken: bToken.bToken,\n    bTokenId: bToken.bTokenId,\n    bTokenSymbol: bToken.bTokenSymbol,\n    symbol: symbol.symbol,\n    symbolId: symbol.symbolId,\n    unit: symbol.unit,\n    version: 'v2',\n  };\n};\n\nexport const getPoolBTokenList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.bTokens.map((b) => {\n    return {\n      bTokenId: b.bTokenId,\n      bTokenSymbol: b.bTokenSymbol,\n      bTokenAddress: b.bToken,\n    };\n  });\n};\n\nexport const getPoolBTokenIdList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.bTokens.map((b) => b.bTokenId);\n};\n\nexport const getPoolSymbolList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.symbols.map((s) => {\n    return {\n      symbol: s.symbol,\n      symbolId: s.symbolId,\n      unit: s.unit,\n    };\n  });\n};\n\nexport const getPoolSymbolIdList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.symbols.map((b) => b.symbolId);\n};","var map = {\n\t\"./de/Signin.json\": 552,\n\t\"./de/bridge.json\": 553,\n\t\"./de/broker.json\": 554,\n\t\"./de/dip-history.json\": 555,\n\t\"./de/footer.json\": 556,\n\t\"./de/governance.json\": 557,\n\t\"./de/header.json\": 558,\n\t\"./de/home.json\": 559,\n\t\"./de/lite.json\": 560,\n\t\"./de/mining.json\": 561,\n\t\"./de/mobile-lite.json\": 562,\n\t\"./de/pro.json\": 563,\n\t\"./de/team.json\": 564,\n\t\"./en/Signin.json\": 565,\n\t\"./en/bridge.json\": 566,\n\t\"./en/broker.json\": 567,\n\t\"./en/dip-history.json\": 568,\n\t\"./en/footer.json\": 569,\n\t\"./en/governance.json\": 570,\n\t\"./en/header.json\": 571,\n\t\"./en/home.json\": 572,\n\t\"./en/lite.json\": 573,\n\t\"./en/mining.json\": 574,\n\t\"./en/mobile-lite.json\": 575,\n\t\"./en/pro.json\": 576,\n\t\"./en/team.json\": 577,\n\t\"./zh/Signin.json\": 578,\n\t\"./zh/bridge.json\": 579,\n\t\"./zh/broker.json\": 580,\n\t\"./zh/dip-history.json\": 581,\n\t\"./zh/footer.json\": 582,\n\t\"./zh/governance.json\": 583,\n\t\"./zh/header.json\": 584,\n\t\"./zh/home.json\": 585,\n\t\"./zh/lite.json\": 586,\n\t\"./zh/mining.json\": 587,\n\t\"./zh/mobile-lite.json\": 588,\n\t\"./zh/pro.json\": 589,\n\t\"./zh/team.json\": 590\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 551;","// add a new chain: validateChainId, getChainProviderUrls, getNetworkName, getDailyBlockNumberConfig\nexport const getChainIds = () => {\n  return ['1', '3', '56', '97', '128', '256', '137', '80001'];\n};\n\nexport const getChainProviderUrls = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://rpc-mainnet.matic.network',\n        'https://rpc-mainnet.maticvigil.com',\n        'https://rpc-mainnet.matic.quiknode.pro',\n        'https://matic-mainnet.chainstacklabs.com',\n        'https://matic-mainnet-full-rpc.bwarelabs.com',\n        'https://matic-mainnet-archive-rpc.bwarelabs.com',\n      ],\n      chainId: '137',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n    {\n      provider_urls: [\n        'https://rpc-mumbai.matic.today',\n        'https://rpc-mumbai.maticvigil.com',\n        'https://matic-mumbai.chainstacklabs.com',\n        'https://matic-testnet-archive-rpc.bwarelabs.com',\n      ],\n      chainId: '80001',\n    },\n  ];\n\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrls: no urls for chainId ${chainId}`)\n  }\n}\n\nexport const getDailyBlockNumberConfig = () => {\n  // let chainBlockNumberList = [\n  //   '2367422',\n  //   '2367422',\n  //   '10497304',\n  //   '10497304',\n  //   '10511369',\n  //   '10511369',\n  //   '14747860',\n  //   '14747860',\n  // ];\n\n  // compute matic aunual block number: block height(16309458, 10000000)\n  let chainBlockNumberList = [\n    '6486',\n    '6486',\n    '28759',\n    '28759',\n    '28798',\n    '28798',\n    '40405',\n    '40405',\n  ];\n  return getChainIds().reduce((accum, i, index) => {\n    accum[i] = chainBlockNumberList[index];\n    return accum;\n  }, {});\n};\n\n// MAX UINT/INT256\n// hex(2**256-1)\nexport const MAX_UINT256 =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n// hex((2**255 -1) // 10**18)\nexport const MAX_INT256 =\n  '0x9392ee8e921d5d073aff322e62439fcf32d7f344649470f90';\n\n","import React, { useState, useEffect } from 'react'\nimport {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\nimport { inject, observer } from 'mobx-react';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App({intl}) {\n  if(isBrowser){\n    return <DesktopApp locale={intl.locale}/>\n  }\n  if(isMobile){\n    return <MobileApp locale={intl.locale}/>\n  }\n}\n\nexport default inject('intl')(observer(App)) ;\n","\nimport {getUserWalletBalance ,DeriEnv,connectWallet, isUnlocked, unlock } from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance, eqInNumber, storeChain } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      setDetail : action,\n      supportV2 : computed,\n      supportV1 : computed,\n      supportAllVersion : computed,\n      supportChain : computed\n    })\n  }\n\n  supportWeb3 = () => !!window.ethereum\n\n  isConnected = () => !!this.detail.account;\n\n\n  async isApproved(pool,bTokenId){\n    if(this.detail.chainId && this.supportChain){\n      const isApproved = await isUnlocked(this.detail.chainId,pool,this.detail.account,bTokenId).catch(e => console.error('load approve error'))\n      this.detail.isApproved = isApproved;\n      this.setDetail(this.detail)\n      return isApproved;\n    }\n  }\n\n  approve = async (pool,bTokenId) => {\n    if(this.detail.chainId){\n      const approved = await unlock(this.detail.chainId,pool,this.detail.account,bTokenId);\n      return approved\n    }\n  }\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);      \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    const env = DeriEnv.get();\n    const {chainInfo} = config[env]\n    \n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n      storeChain(chainInfo[chainId])\n    }\n    this.setDetail(detail)\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  setDetail(detail){\n    this.detail = detail;\n  }\n\n  refresh(){\n    this.loadWalletBalance(this.detail.chainId,this.detail.account);\n  }\n\n  get supportV2() {\n    return this.detail.supportV2\n  }\n\n  get supportV1(){\n    return this.detail.supportV1;\n  }\n\n  get supportAllVersion(){\n    return this.detail.supportV1 && this.detail.supportV2\n  }\n\n  get supportChain(){\n    return this.detail.supported\n  }\n\n\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nclass Oracle {\n  symbol = 'BTCUSD'\n  timeType = 'min'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n  listeners = {}\n  already = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n  }\n\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket(process.env.REACT_APP_WSS_URL, {        \n        transports: ['websocket'],\n        withCredentials: true\n      })\n      this.ws.on('connect',() => {\n        if(this.already){\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n          console.log('ws is reconnected already')\n        }\n        console.log('ws is already connected');\n      });\n    }    \n  }\n\n\n  load(symbol,timeType = 'min'){\n    // symbol = symbol+'_V2'\n    this.initWebSocket()\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          for(const key of Object.keys(this.listeners)){\n            if(typeof this.listeners[key] === 'function'){\n              this.listeners[key](obj)\n            }\n          }\n        }\n      }\n    })\n    if(symbol !== this.symbol){\n      this.unsubscribeBars(this.symbol);\n    }\n    this.setSymbol(symbol)\n    this.setTimeType(timeType);\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n    this.already = true\n  }\n\n  addListener(id,listener){\n    if(!this.listeners[id]) {\n      this.listeners[id] = listener\n    }    \n  }\n\n\n\n  unsubscribeBars(symbol){\n    if(this.ws){\n      this.ws.emit('un_get_kline_update', {\n        symbol : symbol, 'time_type' : 'min'\n      })\n    }\n  }\n\n\n  //暂不用\n  loadHistory(symbol,timeType,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        console.log('history ->',history[history.length-1].time)\n        callback(history)\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n  }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setTimeType(timeType){\n    this.timeType = timeType;\n  }\n  setPause(paused){\n    this.paused = paused\n  }\n}\n\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n\n  callback = () => {}\n   wallet = null;\n   spec = null\n \n   mockPositionInfo = {\n    averageEntryPrice: \"\",\n    liquidationPrice: \"\",\n    margin: \"20000\",\n    marginHeld: \"10068.26538\",\n    marginHeldBySymbol : \"293.16152\",\n    unrealizedPnl: \"3.1311\",\n    volume: \"800\",\n   }\n\n   async load(wallet,spec,callback){\n     if(wallet && wallet.isConnected() && wallet.supportChain && spec && spec.pool){\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account,spec.symbolId)\n      // const fundingFee = await getFun\n      if(position){\n        if(callback){\n          callback(position)\n        }\n      }\n      this.start(wallet,spec,callback)\n      return position;\n     }\n   }\n\n   start(wallet,spec,callback){\n     if(this.interval !== null){\n       clearInterval(this.interval);\n     }\n    this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \n    if(wallet){\n      this.wallet= wallet; \n    }\n    if(spec){\n      this.spec = spec\n    }\n    if(callback){\n      this.callback = callback;\n    }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(wallet,spec,callback){\n     this.start(wallet,spec,callback || this.callback)\n   }\n\n   \n\n\n \n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n  info = {\n    bSymbol:'BUSD',\n    symbol:'BTCUSD',\n    multiplier:'0.0001',\n    fundingRateCoefficient:'0.0000025',\n    minInitialMarginRatio:0.1,\n    minMaintenanceMarginRatio:0.05,\n    feeRatio:0.0005,\n  }\n\n  async load(wallet,config){\n    if(wallet && wallet.supportChain && config && config.pool !== this.info.pool){\n      const spec = await getSpecification(wallet.detail.chainId,config.pool,config.bTokenId,config.symbolId);\n      this.setInfo(spec)\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info\n  }\n}","import { makeObservable, observable, action, computed } from \"mobx\";\nimport { restoreLocale, storeLocale } from \"../utils/utils\";\nimport supportedCatalog from '../locales/lang.json'\n\n\nconst cache = {}\n\nfunction importAll(r){\n  return r.keys().forEach(key => {\n    const path = key.split('/')\n    const lang = path[1]\n    const page = path[2].split('.')[0].toLowerCase()\n    if(!cache[lang]) {\n      cache[lang] = {}\n    }\n    \n    if(/mobile-/.test(page)){\n      const pageName= page.split('-')[1]\n      if(!cache[lang][pageName]){ \n        cache[lang][pageName] = {}\n      }\n      cache[lang][pageName]['mobile'] = r(key)\n    } else {\n      cache[lang][page] = r(key)\n    }\n  });\n}\n//lang.json 是语言包目录，需要排除在外\nimportAll(require.context(`../locales/`,true,/^((?!lang).)*\\.json$/))\n\nclass Intl {\n  locale = 'en'\n  constructor(){\n    makeObservable(this,{\n      locale : observable,\n      setLocale : action,\n      dict : computed,\n      localeLabel: computed\n    })\n    const language = navigator.language\n    const prefix = language && language.split('-')[0]\n    const locale = restoreLocale()\n    if(locale && Object.keys(supportedCatalog).includes(locale) ){\n      this.locale = locale\n    } else if(prefix && Object.keys(supportedCatalog).includes(prefix)){\n      this.locale = prefix\n    }\n  }\n\n  setLocale(locale){\n    if(locale){\n      this.locale = locale;\n      storeLocale(locale)\n    }\n  }\n\n  get(page,key){\n    return cache[this.locale][page][key]\n  }\n\n  get dict(){         \n    return cache[this.locale]\n  }\n\n  get localeLabel(){\n    const label = supportedCatalog[this.locale];\n    return label ? label.substr(0,2).toUpperCase() : \"EN\" \n  }\n}\n\nexport default new Intl();","import { getTradeHistory } from \"../lib/web3js/indexV2\";\n\n\nexport default class History {\n\n   async load(wallet,config){\n      if(wallet && wallet.supportChain && wallet.detail.chainId && config && config.pool){\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account,config.symbolId);    \n         return all;\n      } else {\n         return []\n      }\n   }\n}","import { observable, action, computed, makeObservable } from \"mobx\";\nimport Oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport History from './History'\nimport Config from \"./Config\";\nimport { eqInNumber, storeConfig, getConfigFromStore, restoreChain, getFormatSymbol } from \"../utils/utils\";\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\nimport { bg } from \"../lib/web3js/indexV2\";\nimport Intl from \"./Intl\";\nimport version from './Version'\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  version = null;\n  wallet = null;\n  configs = [] \n  config = null;\n  index = ''\n  volume = ''\n  paused = false\n  slideIncrementMargin = 0\n  position = {}\n  contract = {}\n  fundingRate = {}\n  history = []\n  userSelectedDirection = 'long'\n  supportChain = true\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      slideIncrementMargin : observable,\n      fundingRate : observable,\n      position : observable,\n      history : observable,\n      contract : observable,\n      userSelectedDirection : observable,\n      supportChain : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setSupportChain : action,\n      setFundingRate : action,\n      setHistory : action,\n      setSlideMargin : action,\n      amount : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed,\n      isNegative : computed,\n      isPositive : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = new Oracle();\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n    this.historyInfo = new History()\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet){    \n    const all = await this.configInfo.load(version);\n    //如果连上钱包，有可能当前链不支持\n    if(wallet.isConnected()){\n      this.setWallet(wallet);\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      let defaultConfig = this.getDefaultConfig(this.configs,wallet);\n      //如果还是为空，则默认用所有config的第一条\n      if(!defaultConfig){\n        //没有默认的配置，\n        this.setSupportChain(false);\n        defaultConfig = all.length > 0 ? all[0] : {}\n      }\n      this.setConfig(defaultConfig);\n    } \n    //如果没有钱包或者链接的链不一致，设置默认config，BTCUSD\n    if(!wallet.isConnected() && !wallet.supportWeb3()){\n      //没有钱包插件\n      version.setCurrent('v2')\n      const all = await this.configInfo.load(version);\n      const defaultConfig = all.find(c => c.symbol === 'BTCUSD')\n      this.setConfig(defaultConfig)\n    }\n    this.loadByConfig(this.wallet,this.config,true)\n    this.setVolume('')\n  }\n\n  async switch(spec){\n    const cur = this.configs.find(config => config.pool === spec.pool && config.symbolId === spec.symbolId)\n    //v1 只需要比较池子地址，v2 需要比较symbolId\n    let changed = false\n    if(version){\n      changed = version.isV1 ? spec.pool !== this.config.pool : spec.symbolId !== this.config.symbolId\n    }\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.loadByConfig(this.wallet,cur,changed);  \n      if(changed){\n        this.store(cur)\n      }    \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async loadByConfig(wallet,config,symbolChanged){\n     //position\n     const position = await this.positionInfo.load(wallet,config,position => {       \n        this.setPosition(position);\n     })\n\n     //切换指数\n    if(symbolChanged && config){\n      const symbol = getFormatSymbol(config.symbol)\n      this.oracle.unsubscribeBars(symbol);\n      this.oracle.addListener('trading',data => {\n        this.setIndex(data.close)\n      })\n      \n      if(position){\n        this.setIndex(position.price);\n      }\n      this.oracle.load(symbol)\n    }\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)    \n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     \n     //history\n     const history = await this.historyInfo.load(wallet,config);\n\n     if(contract){\n      this.setContract(contract)\n     }\n\n     if(fundingRate){\n      this.setFundingRate(fundingRate)\n     }\n\n     if(history){\n      this.setHistory(history);\n     }\n  }\n\n\n    //优先使用session storage 的，如果缓存跟用户当前链一直，则命中缓存，否则取当前配置第一条\n    getDefaultConfig(configs = [],wallet){\n      let defaultConfig = null;\n      if(configs.length > 0){    \n        const fromStore = this.getFromStore();\n        if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\n          defaultConfig = fromStore;\n        }\n        if(defaultConfig){\n          //虽然从缓存获得config ，需要判断池子地址是否一致，否则用可用config的第一条\n          const pos = configs.findIndex(c => c.pool === defaultConfig.pool);\n          if(pos === -1){\n            defaultConfig = configs[0];\n          }\n        } else {\n          defaultConfig = configs[0]\n        }   \n      }\n      return defaultConfig;    \n    }\n\n \n\n  //存起来\n  store(config){\n    storeConfig(version.current,config)\n  }\n\n  getFromStore(){\n    return getConfigFromStore(version.current)\n  }\n\n  async syncFundingRate(){\n    //资金费率和仓位同步\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)   \n    if(fundingRate){\n      this.setFundingRate(fundingRate)      \n    }\n  }\n\n  async refresh(){\n    this.pause()\n    const position = await this.positionInfo.load(this.wallet,this.config, async (position)  => {       \n      this.setPosition(position);\n      this.syncFundingRate();\n    });\n    if(position){\n      this.setPosition(position)\n    }\n    this.syncFundingRate();\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    const history = await this.historyInfo.load(this.wallet,this.config)\n    if(history){\n      this.setHistory(history)\n    }\n    this.setVolume('')\n    this.resume();\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume(this.wallet,this.config);\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    if(position){\n      this.position = position\n    }\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setHistory(history){\n    this.history = history\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setSupportChain(support){\n    this.supportChain = support;\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setSlideMargin(slideIncrementMargin){\n    if(slideIncrementMargin !== ''){\n      this.slideIncrementMargin =  slideIncrementMargin\n      const position = this.position;\n      const price = position.price || this.index\n      const increment = slideIncrementMargin - position.marginHeld\n      const volume = increment / (price * this.contract.multiplier * this.contract.minInitialMarginRatio);\n      this.setVolume(volume.toFixed(0))\n    }\n  }\n\n\n  get volumeDisplay(){\n    if(Math.abs(this.volume) === 0 || this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\n      return '';\n    } else {\n      return Math.abs(this.volume)\n    }\n  }\n  \n\n  get amount(){\n    const position = this.position\n    const contract = this.contract;\n    const volume = this.volume === '' || isNaN(this.volume) ? 0 : Math.abs(this.volume)\n    let {margin, marginHeldBySymbol:currentSymbolMarginHeld ,marginHeld,unrealizedPnl} = position\n    const price = position.price || this.index\n    //v2\n    let otherMarginHeld = bg(marginHeld).minus(currentSymbolMarginHeld)\n    otherMarginHeld = otherMarginHeld.isNaN() ? bg(0) : otherMarginHeld;\n    const contractValue = volume * price * contract.multiplier;\n    const incrementMarginHeld = contractValue * contract.minInitialMarginRatio\n    let totalMarginHeld = bg(marginHeld) ;\n\n    //如果当前仓位为正仓用户做空或者当前仓位为负仓用户做多，总仓位相减,取绝对值\n    if((this.isPositive && this.userSelectedDirection === 'short') || (this.isNegative && this.userSelectedDirection === 'long')){\n      totalMarginHeld = totalMarginHeld.minus(incrementMarginHeld);\n      if(totalMarginHeld.lt(otherMarginHeld)){\n        totalMarginHeld =  otherMarginHeld.plus(otherMarginHeld.minus(totalMarginHeld).abs())        \n      } \n      currentSymbolMarginHeld = bg(currentSymbolMarginHeld).minus(incrementMarginHeld).abs().toFixed(2)\n    } else {\n      totalMarginHeld = bg(marginHeld).plus(incrementMarginHeld)\n      if(currentSymbolMarginHeld){\n        currentSymbolMarginHeld = bg(currentSymbolMarginHeld).plus(incrementMarginHeld).toFixed(2);\n      }\n    }\n\n    const dynBalance = margin && bg(margin).plus(unrealizedPnl).toFixed(2);    \n    //总保证金和当前symbol保证金不能超过余额\n    totalMarginHeld = totalMarginHeld.gt(dynBalance) ? dynBalance : totalMarginHeld.toFixed(2)\n    if(currentSymbolMarginHeld){\n      currentSymbolMarginHeld = (+currentSymbolMarginHeld) > (+dynBalance) ? dynBalance : (+currentSymbolMarginHeld).toFixed(2);\n    }\n    let available = bg(dynBalance).minus(totalMarginHeld).toFixed(2)\n    const exchanged = bg(volume).multipliedBy(contract.multiplier).toFixed(4)\n    const totalVolume = this.userSelectedDirection === 'short' ? (-this.volumeDisplay + (+position.volume)) : ((+this.volumeDisplay) +  (+position.volume))    \n    const totalContractValue = totalVolume * price * contract.multiplier\n    const leverage = Math.abs(totalContractValue / (+dynBalance)).toFixed(1);\n    available = (+available) < 0 ? 0 : available\n    return {\n      volume : this.volume,\n      dynBalance : dynBalance,\n      margin : totalMarginHeld,\n      available : available,\n      exchanged : exchanged,\n      currentSymbolMarginHeld : currentSymbolMarginHeld,\n      leverage : leverage\n    }\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //正仓\n  get isPositive(){\n    return bg(this.position.volume).gt(0);\n  }\n\n  //负仓\n  get isNegative(){\n    return bg(this.position.volume).isNegative();\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(config){\n      const chainId = wallet && wallet.isConnected() && wallet.supportChain ? wallet.detail.chainId : config.chainId\n      if(config){    \n        const res = await getFundingRate(chainId,config.pool,config.symbolId).catch(e => console.error('getFundingRate was error,maybe network is wrong'))\n        return res;\n      }\n    }\n  }\n\n  get fundingRateTip(){    \n    if(version && version.isV2){\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n        if(Intl.locale === 'zh'){\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n ${Intl.get('lite','per-block')} ${Intl.get('lite','1-long-contract-pays-1-short-contract')} (${this.fundingRate.fundingRatePerBlock} * ${Intl.get('lite','index-price-camelize')} * ${this.contract.multiplier} ) ${this.config.bTokenSymbol}`        \n        } else {\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','1-long-contract-pays-1-short-contract')} (${this.fundingRate.fundingRatePerBlock} * ${Intl.get('lite','index-price-camelize')} * ${this.contract.multiplier} ) ${this.config.bTokenSymbol} ${Intl.get('lite','per-block')}`        \n        }\n        \n      }\n    } else {\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n        if(Intl.locale === 'zh'){\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','per-block')} ${Intl.get('lite','1-long-contract-pays-1-short-contract')} ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} `        \n        } else {\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','1-long-contract-pays-1-short-contract')} ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} ${Intl.get('lite','per-block')})`        \n        }        \n      }\n    }\n    \n    return ''\n  }\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\nimport Trading from './model/Trading';\nimport { DeriEnv } from './lib/web3js/indexV2';\nimport version from './model/Version';\nimport intl from './model/Intl';\n\nconst wallet = new Wallet();\nconst trading = new Trading()\n// const version = new Version();\n\nif(process.env.NODE_ENV === 'production') {\n  DeriEnv.set('prod')\n}\nDeriEnv.set('prod')\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} version={version} intl={intl}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n      shareValue: '1',\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\nimport { getClp2ContractAddress } from '../utils';\n\nexport const getClp2LiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      clp2Pool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n      shareValue: '1',\n    };\n  }\n  console.log('no Clp2Pool address, please check');\n  return {};\n};\n\nexport const addClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const removeClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\nexport const getClp2WalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, contractAbi, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n    this.isProvider = isProvider;\n  }\n  async _init() {\n    if (!this.web3) {\n      if (this.isProvider) {\n        this.web3 = await web3Factory(this.chainId);\n      } else {\n        this.web3 = metaMaskWeb3();\n      }\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while(retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        this.web3 = null\n        if (err.toString().includes('Invalid JSON RPC response')) {\n          console.log(`Invalid JSON RPC response with chainId(${this.chainId})`);\n        } else if (err.toString().includes(\"Returned values aren't valid,\")) {\n          console.log(`Invalid contract address(${this.contractAddress}) and chainId(${this.chainId})`);\n        }\n      }\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`The contract(${this.contractAddress}) '${method}(${args})' failed with max retry 2.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n      //this.web3.eth.getGasPrice(),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, POOL_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    await this._init()\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    // const [gas, gasPrice] = await Promise.all([\n    //   this._estimatedGas(method, [...args, ...signed], accountAddress),\n    //   this.web3.eth.getGasPrice(),\n    // ]);\n    //console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n    const gas = await this._estimatedGas(method, [...args, ...signed], accountAddress)\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    //console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (['56', '137', '97', '80001'].includes(this.chainId)) {\n      amount = 999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async getPositionInfo(accountAddress) {\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      //console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async balance(accountAddress) {\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getLatestRPCServer } from '../utils';\n\nexport class DatabaseBaseContract {\n  constructor(contractAddress, contractAbi) {\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n  }\n  _init() {\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      this.contractAbi,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getLatestRPCServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async _call(method, args) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch (err) {\n        this.providerUrl = null\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database ${method}(${args}): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { DatabaseBaseContract } from './database_base';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, DB_CONTRACT_ABI)\n  }\n  async getValues(keyArray) {\n    return await this._call('getValues', [keyArray])\n  }\n}\n","import { DatabaseBaseContract } from './database_base'\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, CONTRACT_ABI)\n  }\n\n  async signature(accountAddress) {\n    return await this._call('signature', [accountAddress])\n  }\n}\n","import { DatabaseBaseContract } from './database_base'\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseAirdropContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, CONTRACT_ABI)\n  }\n  async getValues(keyArray) {\n    return await this._call('getValues', [keyArray])\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI['abi'], isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI['abi'],\n    //   this.contractAddress\n    // );\n  }\n  async mintDToken(accountAddress, ...args) {\n    await this._init()\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async mint(accountAddress, ...args) {\n    await this._init()\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class Clp2Pool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    //console.log('hit clp2')\n    const res = await this._call('userInfo', [391, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, useProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, useProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { Clp2Pool } from '../contract/clp2_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\n//import { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseAirdropFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    //console.log('---airdrop key', key)\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseAirdropContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const clp2PoolFactory = (function () {\n  const clp2PoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\n      return clp2PoolInstanceMap[key];\n    }\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\n    clp2PoolInstanceMap[key] = clp2Pool;\n    return clp2Pool;\n  };\n})();\n\n// export const lpPoolFactory = (function () {\n//   const lpPoolInstanceMap = {};\n//   return (chainId, contractAddress, isProvider = false) => {\n//     let key;\n//     if (isProvider) {\n//       key = `${chainId}.${contractAddress}.isProvider`;\n//     } else {\n//       key = `${chainId}.${contractAddress}`;\n//     }\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\n//       return lpPoolInstanceMap[key];\n//     } else {\n//       let lpPool;\n//       const { type } = getLpContractAddress(chainId, contractAddress);\n//       console.log(`lp type: ${type}`);\n//       if (type === 'slp') {\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\n//       } else if (type === 'clp') {\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\n//       }\n//       lpPoolInstanceMap[key] = lpPool;\n//       return lpPool;\n//     }\n//   };\n// })();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","import { DeriEnv } from '../../config';\nimport jsonConfig from '../resources/config.json';\nimport { validateObjectKeyExist, validateIsArray } from '../utils';\n\nconst validateConfig = (config) => {\n  validateObjectKeyExist(\n    [\n      'pool',\n      'pToken',\n      'lToken',\n      'router',\n      'initialBlock',\n      'bTokens',\n      'symbols',\n      'chainId',\n    ],\n    config,\n    ''\n  );\n  validateIsArray(config['bTokens'], 'bTokens');\n  config['bTokens'].forEach((prop) => {\n    validateObjectKeyExist(\n      ['bTokenId', 'bTokenSymbol', 'bToken'],\n      prop,\n      'bToken'\n    );\n  });\n  validateIsArray(config['symbols'], 'symbols');\n  config['symbols'].forEach((prop) => {\n    validateObjectKeyExist(['symbolId', 'symbol'], prop, 'symbol');\n  });\n};\n\nconst processConfig = (config) => {\n  // process config\n  config['bTokenCount'] = config['bTokens'].length;\n  config['symbolCount'] = config['symbols'].length;\n};\n\nconst getJsonConfig = () => {\n  const env = DeriEnv.get();\n  const configs = typeof jsonConfig === 'object' ? jsonConfig : JSON.parse(jsonConfig);\n  if (['prod', 'dev'].includes(env)) {\n    //console.log(env)\n    if (configs[env]) {\n      //console.log(configs[env])\n      // pools\n      const pools = configs[env].pools;\n      if (pools && Array.isArray(pools)) {\n        for (let i = 0; i < pools.length; i++) {\n          validateConfig(pools[i]);\n          processConfig(pools[i]);\n        }\n      }\n      //console.log(configs[env])\n      validateObjectKeyExist(['oracle'], configs[env], 'oracle')\n      validateObjectKeyExist(['brokerManager'], configs[env], 'brokerManager')\n      return configs[env];\n    }\n  }\n  throw new Error(\n    `getJsonConfig(): invalid config of env '${env}'`,\n    configs[env]\n  );\n};\n\nexport const getConfig = () => {\n  return getJsonConfig();\n};\n","import { getConfig } from './config';\n\nexport const getBrokerConfigList = () => {\n  const config = getConfig()\n  return config.brokerManager\n};\n\nexport const getBrokerConfig = (chainId) => {\n  const filteredByChainId = getBrokerConfigList().filter((c) =>c.chainId === chainId);\n  if (filteredByChainId.length > 0) {\n    return filteredByChainId[0];\n  }\n  throw new Error(`getBrokerConfig(): invalid chainId(${chainId}).`);\n};\n","import { getChainIds } from '../config/chain';\nimport Web3 from 'web3';\n\n// validate\nexport const normalizeChainId = (chainId) => {\n  const chainIds = getChainIds()\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`);\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`);\n  }\n};\n\nexport const validateArgs = (...args) =>\n  args.every((i) => !isNaN(parseFloat(i)));\n\nexport const validateObjectKeyExist = (keyList, val, valName) => {\n  const keys = Object.keys(val);\n  keyList.forEach((prop) => {\n    if (!keys.includes(prop)) {\n      throw new Error(\n        `validateConfig(): property ${prop} is not exist in the ${valName} config.`\n      );\n    }\n  });\n};\nexport const validateIsArray = (val, valName) => {\n  if (!Array.isArray(val)) {\n    throw new Error(\n      `validateConfig(): property ${valName} is an array in the config.`\n    );\n  }\n};\n","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n"],"sourceRoot":""}