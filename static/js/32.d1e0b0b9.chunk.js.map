{"version":3,"sources":["desktop/pages/Info/List.js","utils/DeriNumberFormat.js","desktop/pages/Info/Table.js","desktop/pages/Info/Chart.js"],"names":["HEADERS","COLUMNS","GET_POOL_URL","process","REACT_APP_INFO_HTTP_URL","columnFormat","catalog","data","className","toUpperCase","zone","indexOf","substring","length","address","formatAddress","liquidity","value","suffix","bToken","split","thousandSeparator","decimalScale","notional","inject","observer","loading","useState","allPoolData","setAllPoolData","history","useHistory","loadAllPoolData","a","axios","get","res","status","loaded","useEffect","title","url","seriesType","Object","keys","map","chain","headers","columns","columnRenders","onRowClick","d","push","dataSet","DeriNumberFormat","props","renderablity","setRenderablity","allowZero","others","undefined","isNaN","Math","abs","displayType","pagination","setData","page","setPage","count","setCount","pageSize","loadData","restUrl","Array","isArray","floor","header","onClick","style","cursor","col","call","AreaSeries","chartRef","useRef","series","curValue","setCurValue","curDate","setCurDate","lastDataRef","crosshairMove","param","point","current","seriesPrices","forEach","item","time","year","month","day","addAreaSeries","chart","areaSeries","priceLineVisible","lastValueVisible","topColor","bottomColor","lineColor","priceFormat","precision","minMove","sort","item1","item2","timestamp","dateFormat","Date","last","timeScale","fitContent","addHistogramSeries","histogramSeries","color","type","priceFormatter","price","scaleMargins","top","bottom","priceScale","applyOptions","Number","last_24h","rect","document","querySelector","getBoundingClientRect","createChart","localization","convertToInternationalCurrencySystem","locale","rightOffset","leftOffset","timeVisible","borderColor","borderVisible","width","height","position","mode","handleScroll","handleScale","crosshair","CrosshairMode","Normal","vertLine","labelVisible","visible","horzLine","grid","vertLines","horzLines","layout","backgroundColor","textColor","fontSize","initChart","subscribeCrosshairMove","unsubscribeCrosshairMove","removeSeries","remove","ref"],"mappings":"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","file":"static/js/32.d1e0b0b9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './info.less'\r\nimport Table from './Table'\r\nimport axios from 'axios'\r\nimport { formatAddress } from '../../../utils/utils'\r\nimport DeriNumberFormat from '../../../utils/DeriNumberFormat'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Chart from './Chart'\r\nimport { inject, observer } from 'mobx-react'\r\nconst HEADERS = ['ZONE','POOL','BASE TOKEN','POOL ADDRESS','LIQUIDITY','TRADE VOLUME']\r\nconst COLUMNS = ['zone','catalog','bToken','address','liquidity','notional']\r\n\r\nconst GET_POOL_URL=`${process.env.REACT_APP_INFO_HTTP_URL}/get_pools`\r\n\r\nconst columnFormat = {\r\n  catalog : data => <span className='catalog'>{data.catalog.toUpperCase()}</span>,\r\n  zone : data => data.catalog.indexOf('-') > 0 ? data.catalog.substring(data.catalog.indexOf('-') + 1,data.catalog.length).toUpperCase() : '',\r\n  address : data => formatAddress(data.address),\r\n  liquidity : data => <DeriNumberFormat value={data.liquidity}  suffix={` ${data.bToken.split('|')[0]}`}  thousandSeparator={true} decimalScale={2}/>,  \r\n  notional : data =>  <DeriNumberFormat value={data.notional} suffix={` ${data.bToken.split('|')[0]}`}  thousandSeparator={true} decimalScale={2}/> ,\r\n}\r\nfunction List({loading}){\r\n  const [allPoolData, setAllPoolData] = useState({})\r\n  const history = useHistory()\r\n  const loadAllPoolData = async () => {\r\n    loading.loading();\r\n    const res = await axios.get(GET_POOL_URL);\r\n    if(res.status === 200 && res.data.data){\r\n      setAllPoolData(res.data.data)\r\n    }\r\n    loading.loaded();\r\n  }\r\n\r\n  const onRowClick = d => {\r\n    history.push(`/info/${d.address}/${d.catalog}/${d.bToken}/${d.chain}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadAllPoolData();\r\n    \r\n  }, [])\r\n\r\n\r\n  return(\r\n    <div className='info'>\r\n      <div className='title'>Deri Overview</div>\r\n      <div className='chart-box'>\r\n        <div className='chart'><Chart title='TVL' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_liquidity_history`} seriesType='area'/> </div>\r\n        <div className='chart'><Chart title='Volume 24H' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_trade_history`} seriesType='histogram'/> </div>\r\n      </div>\r\n      <div className='table-by-network'>\r\n        {Object.keys(allPoolData).map(chain => <Table title={chain} headers={HEADERS} columns={COLUMNS} columnRenders={columnFormat} onRowClick={d => onRowClick(d)} dataSet={allPoolData[chain]}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default inject('loading')(observer(List))","import React,{useState,useEffect} from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function DeriNumberFormat(props){\r\n  const [renderablity, setRenderablity] = useState(<span className='loading-line'></span>);\r\n\r\n  useEffect(() => {\r\n    const {allowZero,...others} = props \r\n    if(((typeof props.value !== 'object' && props.value !== undefined && props.value !== '' && props.value !== 'NaN') || ((isNaN(props.value) && Math.abs(props.value)) === 0 && allowZero === true ))) {\r\n      setRenderablity(<NumberFormat {...others} displayType = 'text' />)\r\n    } \r\n    return () => {};\r\n  }, [props.value]);\r\n\r\n  return renderablity;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nfunction Table({title,dataSet,url,headers,columns,columnRenders = {},pagination,loading,onRowClick}){\r\n  const [data, setData] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [count, setCount] = useState()\r\n  const [pageSize, setPageSize] = useState(10)\r\n\r\n  const loadData = async (url,page) => {\r\n    let restUrl = url;\r\n    if(pagination){\r\n      restUrl = `${restUrl}&page=${page}&page_amount=${pageSize}`\r\n    }\r\n    loading.loading()\r\n    const res = await axios.get(restUrl);\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      setCount(res.data.count / pageSize)\r\n      if(res.data.count % pageSize > 0 ){\r\n        setCount(Math.floor(res.data.count / pageSize) +1)\r\n      }\r\n      setData(res.data.data)\r\n      setPage(page)\r\n      loading.loaded()\r\n    }\r\n  }\r\n\r\n  const prePage = () => {\r\n    if(page === 1){\r\n      return;\r\n    }\r\n    loadData(url,page - 1)\r\n  }\r\n  const nextPage = () => {\r\n    if(page === count){\r\n      return;\r\n    }\r\n\r\n    loadData(url,page +1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(dataSet){\r\n      setData(dataSet)\r\n    } else {\r\n      loadData(url,1);\r\n    }\r\n  }, [url])\r\n  return(\r\n    <div className='info-table'>\r\n      <div className='t-title'>{title}</div>\r\n      <div className='tbody'>\r\n        <div className='theader'>\r\n          {headers.map(header => <div className='col'>{header}</div>)}\r\n        </div>\r\n        {data.length > 0 ? data.map(d => (\r\n          <div className='row' onClick={() => onRowClick && onRowClick(d)} style={{cursor : onRowClick ? 'pointer' : 'normal'}}>\r\n            {columns.map(col => <div className='col'>{columnRenders[col] ? columnRenders[col].call(null,d) :d[col]}</div>)}\r\n          </div>))\r\n          :\r\n          <div className='row'><div className='col no-data'>No Data</div></div>\r\n          }\r\n         \r\n\r\n        {pagination && data.length > 0 && <div className='pagination row'>\r\n          <span className='arrow' onClick={prePage}> &lt; </span><span>Page {page} of {count}</span><span className='arrow' onClick={nextPage}> &gt; </span>\r\n        </div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default inject('loading')(observer(Table))","import { useRef,useEffect,useState } from \"react\"\r\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\r\nimport axios from \"axios\";\r\nimport dateFormat from 'dateformat'\r\nimport { convertToInternationalCurrencySystem } from \"../../../utils/utils\";\r\n\r\nexport default function AreaSeries({title,url,seriesType}){\r\n  const chartRef = useRef(null);\r\n  const series = useRef(null)\r\n  const [curValue, setCurValue] = useState('')\r\n  const [curDate, setCurDate] = useState('')\r\n  const lastDataRef = useRef()\r\n\r\n  const initChart = () => {\r\n    const rect = document.querySelector('.info-chart').getBoundingClientRect()\r\n    const chart = createChart(chartRef.current, { \r\n      localization : {\r\n        priceFormatter: price => '$ ' + convertToInternationalCurrencySystem(price),\r\n        locale: 'en-US'\r\n      },\r\n      timeScale: {\r\n        rightOffset : 0,\r\n        leftOffset : 5,\r\n        timeVisible : true,\r\n        borderColor : '#fff',\r\n        borderVisible :  false\r\n      },\r\n      width: rect.width,\r\n      height: rect.height,\r\n      priceScale: {\r\n        position: 'none',\r\n        borderColor: '#fff',\r\n        borderVisible : false,\r\n        mode: 0,\r\n        scaleMargins: {\r\n          top: 0.3,\r\n          // bottom: 0.01\r\n        },\r\n      },\r\n\r\n      handleScroll: false,\r\n      handleScale: false,\r\n      crosshair: {\r\n        mode: CrosshairMode.Normal,  \r\n        vertLine: {\r\n          labelVisible : false,  \r\n          visible : false\r\n        },\r\n        horzLine: {\r\n          labelVisible : false,  \r\n          visible : false\r\n        },\r\n      },\r\n      grid: {\r\n        vertLines: {\r\n          visible: false,\r\n        },\r\n        horzLines: {\r\n          visible: false,\r\n        },\r\n      },\r\n      layout: {\r\n        backgroundColor: '#212327',\r\n        textColor: '#fff',\r\n        fontSize: 12\r\n      },\r\n    });\r\n    return chart;\r\n  }\r\n\r\n  const crosshairMove = param => {\r\n      if (!param.point) {\r\n        setCurDate('')\r\n        if(lastDataRef.current){\r\n          setCurValue(lastDataRef.current)\r\n        }\r\n        return;\r\n      }\r\n      param.seriesPrices.forEach(item => {\r\n        if(item){\r\n          setCurValue(item)\r\n        }\r\n      })\r\n      param.time && setCurDate(`${param.time.year}-${param.time.month}-${param.time.day} (UTC)`)\r\n  }\r\n\r\n  const addAreaSeries = async(chart) => {\r\n    const areaSeries = chart.addAreaSeries({\r\n      priceLineVisible : false,\r\n      lastValueVisible: false,\r\n      topColor: 'RGBA(0,101,159,.5)',\r\n      bottomColor: 'RGBA(0,101,159,0)',\r\n      lineColor: 'RGB(0,101,159)',\r\n      priceFormat: {        \r\n        precision: 1,\r\n        minMove : '1000',\r\n      }\r\n    })\r\n  \r\n    \r\n    const res = await axios.get(url)\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      let data = res.data.data.sort((item1,item2) => {\r\n        if(item1.timestamp > item2.timestamp) {\r\n          return 1\r\n        } else if(item1.timestamp < item2.timestamp){\r\n          return -1\r\n        } else {\r\n          return 0\r\n        }\r\n      })\r\n      data = data.map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : d.value}))\r\n      areaSeries.setData(data)\r\n      const last = data[data.length -1].value\r\n      setCurValue(last)\r\n      lastDataRef.current = last\r\n    }\r\n    series.current = areaSeries\r\n    chart.timeScale().fitContent();\r\n    return areaSeries;\r\n  }\r\n\r\n  const addHistogramSeries = async (chart) => {\r\n    const histogramSeries = chart.addHistogramSeries({\r\n      color: '#00659F',\r\n      priceLineVisible : false,\r\n      lastValueVisible: false,\r\n      priceFormat: {\r\n        type: \"volume\",\r\n        priceFormatter: price => '$ ' + price\r\n      },\r\n      scaleMargins: {\r\n        top: 0.2,\r\n        bottom: 0\r\n      }\r\n    })\r\n    histogramSeries.priceScale().applyOptions({\r\n      scaleMargins: {\r\n        top: 0.1,\r\n        bottom: 0,\r\n      },\r\n    });  \r\n  \r\n\r\n    const res = await axios.get(url)\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      const data = res.data.data.sort((item1,item2) => {\r\n        if(item1.timestamp > item2.timestamp) {\r\n          return 1\r\n        } else if(item1.timestamp < item2.timestamp){\r\n          return -1\r\n        } else {\r\n          return 0\r\n        }\r\n      }).map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : Number(d.value)}))\r\n      \r\n      histogramSeries.setData(data)\r\n      const last = res.data.last_24h ? res.data.last_24h : data[data.length -1].value\r\n      setCurValue(last)\r\n      lastDataRef.current = last\r\n    }\r\n    series.current = histogramSeries\r\n    chart.timeScale().fitContent();\r\n    return histogramSeries;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const chart = initChart();\r\n    if(seriesType === 'area'){\r\n      addAreaSeries(chart)\r\n    }\r\n    if(seriesType === 'histogram'){\r\n      addHistogramSeries(chart)\r\n    }\r\n    chart.subscribeCrosshairMove(crosshairMove);\r\n    return () => {\r\n      if(chart){\r\n        chart.unsubscribeCrosshairMove(crosshairMove)\r\n        if(series.current){\r\n          chart.removeSeries(series.current);\r\n        }\r\n        chart.remove();\r\n      }\r\n    }\r\n  }, [url,seriesType])\r\n\r\n  return(\r\n    <div className='info-chart'>\r\n      <div className='chart-title'>\r\n        <div className='title-label'>{title}</div>\r\n        <div className='title-value'>{curValue ? `$${convertToInternationalCurrencySystem(curValue)}` : ''} </div>\r\n        <div className='title-date'>{curDate} </div>\r\n        </div>\r\n      <div className='series' ref={chartRef}></div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}