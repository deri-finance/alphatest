{"version":3,"sources":["utils/DeriNumberFormat.js","components/Pool/PoolBox.js","hooks/useMiningPool.js","mobile/components/Mining/Pool.js"],"names":["DeriNumberFormat","props","useState","renderablity","setRenderablity","useEffect","value","Math","abs","allowZero","displayType","chainConfig","config","DeriEnv","get","PoolBox","pool","logoClassName","bTokenSymbol","history","useHistory","className","network","toUpperCase","liquidity","thousandSeparator","decimalScale","sushiApy","symbol","title","apy","suffix","target","rel","href","chainId","address","onClick","push","type","env","chainInfo","useMiningPool","loaded","setLoaded","pools","setPools","configs","getContractAddressConfig","map","a","getPoolLiquidity","liqPool","getPoolInfoApy","apyPool","Object","assign","name","formatAddress","slpConfig","getLpContractAddressConfig","liqInfo","isSushi","allConfigs","concat","Promise","all","then","length","Pool","index"],"mappings":"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","file":"static/js/11.9d15350f.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport NumberFormat from 'react-number-format'\n\nexport default function DeriNumberFormat(props){\n  const [renderablity, setRenderablity] = useState('--');\n\n  useEffect(() => {\n    if((props.value || ((Math.abs(props.value)) === 0 && props.allowZero === true))) {\n      setRenderablity(<NumberFormat {...props} displayType = 'text' />)\n    } \n    return () => {};\n  }, [props.value]);\n\n  return renderablity;\n}","import {useHistory} from 'react-router-dom'\nimport NumberFormat from 'react-number-format';\nimport config from  '../../config.json'\nimport { DeriEnv } from '../../lib/web3js/indexV2';\nimport DeriNumberFormat from '../../utils/DeriNumberFormat';\n\nconst chainConfig = config[DeriEnv.get()]['chainInfo'];\n\nexport default function PoolBox({pool}){\n  const logoClassName = `logo ${pool.bTokenSymbol}`\n  const history = useHistory();\n  const mining = () => history.push(`/mining/${pool.chainId}/${pool.type}/${pool.symbol}/${pool.bTokenSymbol}/${pool.address}`)\n  \n  return(\n    <div className=\"pool\" >\n      <div className=\"pool-header\">\n        <div className=\"network\">\n          {pool.network && pool.network.toUpperCase()}\n        </div>\n      </div>\n      <div className=\"pool-info\">\n        <div className=\"info-center\">\n          <div className=\"top-info\">\n            <div className={logoClassName} ></div>\n            <div className=\"pool-detail\">\n              <div className=\"base-token\">{pool.bTokenSymbol}</div>\n              <div>\n                <span>Pool Liq</span>\n                <DeriNumberFormat value={pool.liquidity} displayType='text' thousandSeparator={true} decimalScale={pool.sushiApy ? 7 : 0}/>\n              </div>\n              <div>\n                <span>Symbol</span>\n                {pool.symbol}\n              </div>\n              <div className=\"apy\">\n                <span>APY</span>\n                <span>\n                  <span className={pool.sushiApy ? 'sushi-apy-underline' : ''} title={ pool.sushiApy && 'DERI-APY'}>\n                    <DeriNumberFormat value={pool.apy} suffix='%' displayType='text' allowZero={true} decimalScale={2}/>                  \n                  </span>\n                  {pool.sushiApy &&<>\n                  <span> + </span>\n                  <span className={pool.sushiApy ? 'sushi-apy-underline' : '' } title={ pool.sushiApy && 'SUSHI-APY'}> <DeriNumberFormat value={pool.sushiApy} displayType='text' suffix='%' decimalScale={2}/></span>\n                  </>}\n                </span>\n                \n              </div>\n              <div className=\"pool-address\">\n                <span>Address</span>\n                <a target='_blank' rel='noreferrer' href={`${chainConfig[pool.chainId]['viewUrl']}/address/${pool.address || pool.pool}`}>\n                  {pool.pool}\n                </a>\n              </div>\n            </div>\n          </div>\n          <div className=\"bottom-btn\">\n              <button onClick={mining}>\n                STAKING\n              </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import {useState,useEffect} from 'react';\nimport {\n  DeriEnv,\n  getContractAddressConfig,\n  getPoolLiquidity,\n  getPoolInfoApy,\n  getLpContractAddressConfig\n} from '../lib/web3js/indexV2'\nimport config from '../config.json'\nimport { formatAddress, isSushi } from '../utils/utils';\n\nconst env = DeriEnv.get();\nconst {chainInfo} = config[env]\n\nexport default function useMiningPool(){\n  const [loaded,setLoaded] = useState(false)\n  const [pools, setPools] = useState([])\n\n\n  useEffect(() => {\n    const configs = getContractAddressConfig(env).map(async config =>  {\n      const liqPool = await getPoolLiquidity(config.chainId,config.pool) || {}\n      const apyPool = await getPoolInfoApy(config.chainId,config.pool) || {}\n      const pool = config.pool || ''\n      return Object.assign(config,{ \n        network : chainInfo[config.chainId].name,\n        liquidity : liqPool.liquidity,\n        apy :  (+apyPool.apy) * 100,\n        pool : formatAddress(pool),\n        address : pool,\n        type : 'perpetual'\n      })\n    })\n    const slpConfig = getLpContractAddressConfig(env).map(async config => {\n      const liqInfo = await getPoolLiquidity(config.chainId,config.pool) || {}\n      const apyPool = await getPoolInfoApy(config.chainId,config.pool) || {} \n      const pool = config.pool || ''      \n      let sushiApy ;\n      if(isSushi(config.pool)){\n        sushiApy =  0.22008070161007/liqInfo.liquidity * 100;           \n      }\n      return Object.assign(config,{\n        network : chainInfo[config.chainId].name,\n        liquidity : liqInfo.liquidity,\n        apy : (+apyPool.apy) * 100,\n        pool : formatAddress(pool),\n        sushiApy : sushiApy,\n        address : pool,\n        type : 'lp'\n      })    \n    })\n    const allConfigs = configs.concat(slpConfig)\n    Promise.all(allConfigs).then(pools => {\n      setPools(pools);\n      setLoaded(true)\n    })\n    return () => pools.length = 0\n  })\n  return [loaded,pools];\n}","import React from 'react'\nimport './pool.less'\nimport PoolBox from '../../../components/Pool/PoolBox';\nimport useMiningPool from '../../../hooks/useMiningPool';\n\n\nexport default function Pool(){\n  const [loaded,pools] = useMiningPool();\n\n  return (\n    <div className=\"mining-info\">\n      <div className=\"pools\">\n        {pools.map((pool,index) => <PoolBox pool={pool} key={index}/>)}\n        {!loaded && <div className=\"loading\">\n          <span\n            className=\"spinner spinner-border spinner-border-sm\">\n            </span>\n          </div>}  \n      </div>\n    </div>\n  )\n}"],"sourceRoot":""}