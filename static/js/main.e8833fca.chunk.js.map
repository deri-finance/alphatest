{"version":3,"sources":["lib/web3js/utils.js","lib/web3js/factory/web3.js","utils/LoadableComponent.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","lib/web3js/indexV2.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/api/apiGlobals.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/config/database.js","lib/web3js/api/contractQueryApi.js","lib/polyfill/numberPolyfill.js","App.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Config.js","model/Trading.js","index.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/databaseApi.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/config/env.js","utils/utils.js"],"names":["BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","Web3","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","i","isNaN","checkHttpServerIsAlive","url","a","fetch","ok","getAliveHttpServer","urls","length","Error","MAX_VALUE","getNetworkName","chainId","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","pool","getContractAddressConfig","DeriEnv","get","filter","c","p","bTokenAddress","bToken","pTokenAddress","pToken","lTokenAddress","lToken","dTokenAdress","dToken","MinningVaultAddress","MiningVault","bTokenSymbol","symbol","unit","initialBlock","console","log","getMiningVaultContractAddress","pools","getAnnualBlockNumber","blockNumbers","getAnnualBlockNumberConfig","parseInt","getSlpContractAddress","getSlpContractAddressConfig","getClp2ContractAddress","getClp2ContractAddressConfig","getClpContractAddress","getClpContractAddressConfig","getLpContractAddress","getLpContractAddressConfig","type","getDeriContractAddress","getDeriContractAddressConfig","deriAddress","Deri","wormholeAddress","Wormhole","getOracleUrl","addSymbolParam","getOracleInfo","retry","res","json","getBTCUSDPrice","responseJson","price","getChainProviderUrl","getChainProviderUrlsConfig","format","bigNumber","toFormat","replaceAll","includes","metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","web3Factory","web3InstanceMap","Object","keys","providerUrl","providers","HttpProvider","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","provider_urls","env","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","1","56","128","3","97","256","getRestServerConfig","calculateLiquidityUsed","tradersNetVolume","multiplier","liquidity","poolMarginRatio","abs","calculateFundingRate","fundingRateCoefficient","processFundingRate","fundingRate","annualBlockCount","calculateShareValue","lTokenTotalSupply","eq","calculateMaxRemovableShares","lTokenBalance","tradersNetCost","minPoolMarginRatio","shareValue","removable","plus","minus","calculateEntryPrice","volume","cost","calculateMarginHeld","minInitialMarginRatio","calculatePnl","calculateMaxWithdrawMargin","margin","held","pnl","calculateLiquidationPrice","minMaintenanceMarginRatio","tmp","gt","isOrderValid","newVolume","amount","minMargin","poolMaxVolume","negated","success","message","connectWallet","handleChainChanged","handleAccountChanged","request","method","accounts","account","Array","isArray","on","location","reload","error","getUserWalletBalance","walletAddress","eth","getBalance","balance","fromWei","getLpLiquidityInfo","accountAddress","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","unlock","bTokenFactory","tx","transaction","depositMargin","pPool","perpetualPoolFactory","withdrawMargin","pTokenFactory","getPositionInfo","getParameters","maxWithdrawMargin","_transactPool","addLiquidity","removeLiquidity","shares","lTokenFactory","Promise","all","totalSupply","getStateValues","maxRemovableShares","tradeWithMargin","orderValidation","closePosition","mintDToken","getUserInfoAll","userInfo","deadline","nonce","v","r","s","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","wsOnPromise","ws","event","resolve","reject","data","JSON","parse","sendTradeTxToWorkerQuene","methodCall","wsInstance","getOrSet","send","tradeWithMargin2","res2","closePosition2","depositMargin2","withdrawMargin2","addLiquidity2","removeLiquidity2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","fundingRateCache","resourceMap","contractAddress","key","set","resource","priceCache","_accountAddress","_price","_interval","_update","update","self","this","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","perpetualPool","_ws","io","transports","path","id","err","processTradeEvent","info","blockNumber","txHash","feeRatio","tradeVolume","_getTimeStamp","timeStamp","direction","time","timestamp","transactionFee","_calculateFee","notional","baseToken","transactionHash","processLiquidateEvent","national","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","item","returnValues","unshift","getLiquidateHistoryOnline","getHttpBase","fetchJson","resp","getSpecification2","getFundingRate2","getLiquidityUsed2","getLiquidityInfo2","getWalletBalance2","getTradeHistory2","tradeFromBlock","tradeHistoryBlock","liquidateFromBlock","liquidateHistoryBlock","tradeHistory","map","trim","tradeHistoryOnline","liquidateHistoryOnline","concat","sort","b","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","averageEntryPrice","marginHeld","unrealizedPnl","liquidationPrice","isUnlocked","getEstimatedFee","parameters","getEstimatedFundingRate","newNetVolume","getFundingRate","fundingRate1","getEstimatedLiquidityUsed","catch","liquidityUsed1","Number","prototype","len","RangeError","Math","pow","round","numberArr","split","padNum","intNum","deciNum","lastNum","substr","changedInt","replace","num","dotPos","indexOf","need","j","DesktopApp","MobileApp","App","isBrowser","isMobile","Wallet","detail","isConnected","connect","loadWalletBalance","wallet","formatBalance","chainInfo","assign","supported","remove","sessionStorage","removeItem","makeAutoObservable","observable","action","Oracle","timeType","index","kData","paused","listeners","already","setIndex","initWebSocket","WebSocket","withCredentials","emit","setSymbol","obj","toUpperCase","low","high","open","close","time_type","unsubscribeBars","setTimeType","listener","callback","history","el","setPause","Position","spec","position","interval","load","Contract","getSpecification","chainid","setInfo","History","getTradeHistory","Config","makeObservable","setAll","configs","Trading","contract","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setHistory","setPaused","computed","fundingRateTip","volumeDisplay","configInfo","oracle","positionInfo","contractInfo","historyInfo","eqInNumber","defaultConfig","getDefaultConfig","onConfigChange","cur","find","changed","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","setItem","stringify","getItem","curVolume","originVolume","contractValue","dynBalance","leverage","available","exchanged","fundingRatePerBlock","trading","process","ReactDOM","render","StrictMode","document","getElementById","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","poolLiquidity","clpPool","clpPoolFactory","clp2Pool","clp2PoolFactory","getUserInfo","userAddress","db","databaseFactory","getValues","getUserInfoHarvest","harvestLp","harvestTrade","lp","trade","getUserInfoTotal","total","userInfoHarvest","userInfoTotal","getPoolLiquidity","getPoolInfoApy","apy","volume1h","volume24h","getLpPoolInfoApy","apy2","getUserInfoInPool","getUserInfoAllForAirDrop","databaseAirdropFactory","v1","r1","s1","v2","r2","s2","MAX_GAS_AMOUNT","isProvider","methods","call","gas","estimateGas","from","_transactionReceipt","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","getGasPrice","txRaw","to","numberToHex","encodeABI","params","_getTransactionReceipt","POOL_ABI","PerpetualPool","_call","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","priceDelayAllowance","signed","gasPrice","args1","args2","liquidityUsed","getBlock","eventName","getPastEvents","es","e","push","CONTRACT_ABI","BTokenContract","allowance","_transact","address","_balance","decimals","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","_init","keyArray","updateProviderUrl","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriFactory","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","miningVaultRouterFactory","_deriEnv","formatAddress","str1","str2","isLP","isSushiLP","isCakeLP"],"mappings":"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","file":"static/js/main.e8833fca.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport BigNumber from 'bignumber.js';\r\nimport {\r\n  DeriEnv,\r\n  getChainProviderUrlsConfig,\r\n  getContractAddressConfig,\r\n  getSlpContractAddressConfig,\r\n  getClpContractAddressConfig,\r\n  getClp2ContractAddressConfig,\r\n  getLpContractAddressConfig,\r\n  getAnnualBlockNumberConfig,\r\n  getDeriContractAddressConfig,\r\n} from './config';\r\n\r\n/** @module utils */\r\n\r\nBigNumber.config({\r\n  DECIMAL_PLACES: 18,\r\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\r\n  EXPONENTIAL_AT: 256,\r\n});\r\n\r\nexport { BigNumber };\r\n\r\n/**\r\n * Change the value to BigNumber type\r\n * @func\r\n * @param {string|number} value - the number that need to changed to BigNumber type\r\n * @param {string} base - base of the number\r\n * @returns {BigNumber}\r\n */\r\nexport const bg = (value, base = 0) => {\r\n  if (base === 0) {\r\n    return BigNumber(value);\r\n  }\r\n  if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\r\n  }\r\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\r\n};\r\n\r\n/**\r\n * Get the max value\r\n * @func\r\n * @param {BigNumber} value1\r\n * @param {BigNumber} value2\r\n * @returns {BigNumber}\r\n */\r\nexport const max = (value1, value2) => {\r\n  if (value1.gte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\n/**\r\n * Get the min value\r\n * @func\r\n * @param {BigNumber} value1\r\n * @param {BigNumber} value2\r\n * @returns {BigNumber}\r\n */\r\nexport const min = (value1, value2) => {\r\n  if (value1.lte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\n/**\r\n * Convert the number to a fixed precision\r\n * @func\r\n * @param {string} value - the number that need to convert\r\n * @param {number} num - the number for method toFixed()\r\n * @returns {string}\r\n */\r\nexport const toNatural = (value, num = 0) =>\r\n  BigNumber(value).toFixed(num).toString();\r\n\r\nexport const toHex = (value) => Web3.utils.toHex(value);\r\n\r\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\r\n\r\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\r\n\r\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\r\n\r\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\r\n\r\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\r\n\r\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\r\n\r\nexport const hexToNaturalWithPercentage = (value) =>\r\n  `${bg(hexToNumberString(value), -18)\r\n    .sd(4)\r\n    .times(100)\r\n    .toFixed(4)\r\n    .toString()}%`;\r\n\r\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\r\n\r\nexport const naturalWithPercentage = (value) =>\r\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\r\n\r\nexport const deriToNatural = (value) => bg(value, -18);\r\n\r\nexport const deriToNaturalWithPercentage = (value) =>\r\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\r\n\r\nexport const deriToString = (value) => bg(value).toString();\r\n\r\nexport const deriToBool = (value) => {\r\n  if (bg(value).toNumber() === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const hasInvalidArgsValue = (...args) =>\r\n  args.some(\r\n    (i) =>\r\n      // console.log(bg(i))\r\n      isNaN(i.toString()) || i.toString() === '0'\r\n  );\r\n\r\n// language\r\nexport const isObject = (obj) => typeof obj === 'object';\r\n\r\nconst np = () => {}\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// fetchWithTimeout\r\nconst fetchWithTimeout = (url, delay=2000, options={}, onTimeout=np) => {\r\n  const timer = new Promise((resolve) => {\r\n    setTimeout(resolve, delay, {\r\n      timeout: true,\r\n    });\r\n  });\r\n  return Promise.race([fetch(url, options), timer]).then((response) => {\r\n    if (response.timeout) {\r\n      onTimeout();\r\n    }\r\n    return response;\r\n  });\r\n};\r\n\r\n// http\r\nexport const checkHttpServerIsAlive = async (url) => {\r\n  try {\r\n    //const response = await fetch(url);\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      return true;\r\n    }\r\n  } catch (err) {\r\n    //console.log(err);\r\n  }\r\n  return false;\r\n};\r\nexport const getAliveHttpServer = async (urls = []) => {\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i];\r\n    if (await checkHttpServerIsAlive(url)) {\r\n      return url;\r\n    }\r\n  }\r\n  throw new Error('No alive http server in urls', urls);\r\n};\r\n\r\n// ethereum chain\r\nexport const MAX_VALUE =\r\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\r\nexport const getNetworkName = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let poolNetwork;\r\n  switch (chainId) {\r\n    case '1':\r\n      poolNetwork = 'ethereum';\r\n      break;\r\n    case '56':\r\n      poolNetwork = 'bsc';\r\n      break;\r\n    case '128':\r\n      poolNetwork = 'heco';\r\n      break;\r\n    case '3':\r\n      poolNetwork = 'ropsten';\r\n      break;\r\n    case '42':\r\n      poolNetwork = 'kovan';\r\n      break;\r\n    case '97':\r\n      poolNetwork = 'bsctestnet';\r\n      break;\r\n    case '256':\r\n      poolNetwork = 'hecotestnet';\r\n      break;\r\n    default:\r\n      throw new Error('The networkId is not valid');\r\n  }\r\n  return poolNetwork;\r\n};\r\n\r\nexport const getWalletBalanceUnit = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let index;\r\n  const unitNetworkIdsMap = {\r\n    ETH: ['1', '3', '42'],\r\n    BNB: ['56', '97'],\r\n    HT: ['128', '256'],\r\n  };\r\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\r\n  for (let i = 0; i < networkIdsArray.length; i++) {\r\n    if (networkIdsArray[i].includes(chainId)) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n  if (index !== undefined) {\r\n    return Object.keys(unitNetworkIdsMap)[index];\r\n  }\r\n  if (chainId === '') {\r\n    return '';\r\n  }\r\n  throw new Error('Invalid Network:', chainId);\r\n};\r\n\r\nexport const getPoolBaseSymbolList = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let result = [];\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const { bTokenSymbol, symbol } = pools[i];\r\n    if (bTokenSymbol && symbol) {\r\n      result.push(`${symbol}/${bTokenSymbol}`);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const getPoolBaseTokenAddressObject = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let result = {};\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const { bTokenSymbol, symbol, pool } = pools[i];\r\n    const key = `${symbol}/${bTokenSymbol}`;\r\n    if (bTokenSymbol && symbol) {\r\n      result[key] = pool;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\r\n//   chainId = normalizeChainId(chainId);\r\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n//     (c) => c.chainId === chainId\r\n//   );\r\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\r\n//   if (pool.length > 0) {\r\n//     return [\r\n//       pool[0].pool,\r\n//       pool[0].bToken,\r\n//       pool[0].pToken,\r\n//       pool[0].lToken,\r\n//       pool[0].dToken,\r\n//       pool[0].MiningVault,\r\n//       pool[0].initialBlock,\r\n//     ];\r\n//   }\r\n//   console.log(\r\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\r\n//   );\r\n//   return [];\r\n// };\r\n\r\n// get config by poolAddress\r\nexport const getPoolContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  // console.log('pool', pool)\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n      bTokenSymbol: pool[0].bTokenSymbol,\r\n      symbol: pool[0].symbol,\r\n      unit: pool[0].unit,\r\n      initialBlock: pool[0].initialBlock,\r\n    };\r\n  }\r\n  console.log(\r\n    `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return [];\r\n};\r\n\r\nexport const getMiningVaultContractAddress = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  if (pools.length > 0) {\r\n    if (pools[0].MiningVault) {\r\n      return pools[0].MiningVault;\r\n    }\r\n  }\r\n};\r\n\r\n// export const getMiningVaultRouterContractAddress = (chainId) => {\r\n//   chainId = normalizeChainId(chainId);\r\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n//     (c) => c.chainId === chainId\r\n//   );\r\n//   if (pools.length > 0) {\r\n//     if (pools[0].MiningVaultRouter) {\r\n//       return pools[0].MiningVaultRouter;\r\n//     }\r\n//   }\r\n// };\r\n\r\nexport const getAnnualBlockNumber = (chainId) => {\r\n  const blockNumbers = getAnnualBlockNumberConfig();\r\n  if (blockNumbers[chainId]) {\r\n    return parseInt(blockNumbers[chainId]);\r\n  }\r\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\r\n};\r\n\r\nexport const getSlpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n    };\r\n  }\r\n  console.log(\r\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n    };\r\n  }\r\n  console.log(\r\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getClpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      lTokenAddress: pool[0].lToken,\r\n    };\r\n  }\r\n  console.log(\r\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getLpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      type: pool[0].type,\r\n    };\r\n  }\r\n  console.log(\r\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getDeriContractAddress = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  if (pool.length > 0) {\r\n    return {\r\n      deriAddress: pool[0].Deri,\r\n      wormholeAddress: pool[0].Wormhole,\r\n      bTokenSymbol: pool[0].bTokenSymbol,\r\n    };\r\n  }\r\n  console.log(\r\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getOracleUrl = (chainId, poolAddress) => {\r\n  const env = DeriEnv.get()\r\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\r\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\r\n    }\r\n    return 'https://oracle4.deri.finance/price';\r\n  } else {\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\r\n    }\r\n    // for test\r\n    return 'https://oracle4.deri.finance/price';\r\n  }\r\n};\r\n\r\nexport const getOracleInfo = async (chainId, poolAddress) => {\r\n  let url = getOracleUrl(chainId, poolAddress);\r\n  //console.log('oracle url', url);\r\n  let retry = 5;\r\n  //let timeout = 1000;\r\n  let res;\r\n  while (retry > 0) {\r\n    res = await fetch(url);\r\n    //if (res && !res.timeout) {\r\n    if (res) {\r\n      break;\r\n    }\r\n    //console.log('get oracle info timeout')\r\n    retry -= 1;\r\n    //timeout += 800;\r\n  }\r\n  if (retry === 0 && !res) {\r\n    throw new Error(`fetch oracle info error: exceed max retry(5).`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\r\n  try {\r\n    const responseJson = await getOracleInfo(chainId, poolAddress)\r\n    let price = responseJson.price\r\n    if (!price) {\r\n      price = '0';\r\n    }\r\n    return deriToNatural(responseJson.price).toString();\r\n  } catch (err) {\r\n    throw err\r\n  }\r\n};\r\nexport const getOraclePrice = getBTCUSDPrice;\r\n\r\nexport const getChainProviderUrl = async(chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const urls = getChainProviderUrlsConfig(chainId)\r\n  if (urls.length > 0) {\r\n    return await getAliveHttpServer(urls)\r\n  } else {\r\n    throw new Error(\r\n      `Cannot find the chain provider url with chainId: ${chainId}`\r\n    );\r\n  }\r\n};\r\n\r\nexport const format = (bigNumber) =>\r\n  bigNumber.toFormat().replaceAll(',', '').toString();\r\n\r\nexport const normalizeChainId = (chainId) => {\r\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256']\r\n  let res = chainId ? chainId.toString() : chainId;\r\n  if (chainId && chainIds.includes(res)) {\r\n    return res;\r\n  } else {\r\n    throw new Error(`invalid chainId: ${chainId}`)\r\n  }\r\n};\r\n\r\nexport const normalizeAddress = (address) => {\r\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\r\n    return Web3.utils.toChecksumAddress(address);\r\n  } else {\r\n    throw new Error(`invalid address: ${address}`)\r\n  }\r\n};","import Web3 from 'web3';\r\nimport { getChainProviderUrl } from '../utils';\r\n\r\nexport const metaMaskWeb3 = (function () {\r\n  let web3Instance = null;\r\n  return () => {\r\n    if (web3Instance !== null) {\r\n      return web3Instance;\r\n    }\r\n    let web3;\r\n    if (typeof window.ethereum !== undefined) {\r\n      web3 = new Web3(window.ethereum);\r\n    } else {\r\n      // console.log(\"Please install MetaMask first\")\r\n      throw new Error('Please install MetaMask first');\r\n    }\r\n    web3Instance = web3;\r\n    return web3;\r\n  };\r\n})();\r\n\r\nexport const web3Factory = (function () {\r\n  const web3InstanceMap = {};\r\n  return async(chainId) => {\r\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\r\n      return web3InstanceMap[chainId];\r\n    }\r\n    console.log(\r\n      `==== web3Factory(${chainId}), please caution the access limits ===`\r\n    );\r\n    const providerUrl = await getChainProviderUrl(chainId);\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\r\n    web3InstanceMap[chainId] = web3;\r\n    return web3;\r\n  };\r\n})();\r\n","import React from 'react'\r\nimport Loadable from 'react-loadable'\r\nimport NProgress from 'nprogress'\r\nimport 'nprogress/nprogress.css'\r\n\r\nclass LoadingPage extends React.Component {\r\n  //类似github页面加载的那个加载条\r\n  componentWillMount(){\r\n    NProgress.start()\r\n  }\r\n  componentWillUnmount(){\r\n    NProgress.done()\r\n  }\r\n  render () {\r\n    return (\r\n      <div/>\r\n    )\r\n  }\r\n}\r\n\r\nconst LoadableComponent = (component) => {\r\n  return Loadable({\r\n    loader: component,\r\n    loading: ()=><LoadingPage/>\r\n  })\r\n}\r\n\r\nexport default LoadableComponent","export const ChainProviderUrls = [\r\n  {\r\n    provider_urls: [\r\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '1',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://bsc-dataseed.binance.org',\r\n      'https://bsc-dataseed1.defibit.io/',\r\n      'https://bsc-dataseed1.ninicoin.io/',\r\n    ],\r\n    chainId: '56',\r\n  },\r\n  {\r\n    provider_urls: ['https://http-mainnet.hecochain.com'],\r\n    chainId: '128',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '3',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '42',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n    ],\r\n    chainId: '97',\r\n  },\r\n  {\r\n    provider_urls: ['https://http-testnet.hecochain.com'],\r\n    chainId: '256',\r\n  },\r\n];\r\n\r\nexport const getChainProviderUrlsConfig = (chainId) => {\r\n  const chainProviderUrls = [\r\n    {\r\n      provider_urls: [\r\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '1',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://bsc-dataseed.binance.org',\r\n        'https://bsc-dataseed1.defibit.io/',\r\n        'https://bsc-dataseed1.ninicoin.io/',\r\n      ],\r\n      chainId: '56',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-mainnet.hecochain.com'],\r\n      chainId: '128',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '3',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '42',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      ],\r\n      chainId: '97',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-testnet.hecochain.com'],\r\n      chainId: '256',\r\n    },\r\n  ];\r\n  \r\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\r\n  //console.log('res',res)\r\n  if (res.length > 0) {\r\n    return res[0].provider_urls\r\n  } else {\r\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\r\n  }\r\n}\r\n","/** @module config */\r\n\r\n/**\r\n * Get the contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].pToken - position token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].symbol - symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getContractAddressConfig = (env = 'dev') => {\r\n  // production environment\r\n  if (env === 'prod') {\r\n    // console.log('!!! production !!!')\r\n    return [\r\n      {\r\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\r\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '5288684',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\r\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '6753399',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'COIN',\r\n        unit: 'COIN',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        pool: '0x919F97417857781f754e00CCCD9100f78B759818',\r\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\r\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '7475766',\r\n        bTokenSymbol: 'DERI',\r\n        symbol: 'iMEME',\r\n        unit: 'iMEME',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\r\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\r\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        initialBlock: '11949433',\r\n        bTokenSymbol: 'USDT',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\r\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\r\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\r\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        initialBlock: '11860070',\r\n        bTokenSymbol: 'BAC',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\r\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\r\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\r\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\r\n        initialBlock: '2557914',\r\n        bTokenSymbol: 'HUSD',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '128',\r\n      },\r\n    ];\r\n  }\r\n  // develop environment\r\n  // console.log('-- test ---')\r\n  return [\r\n    {\r\n      pool: '0x67eE8f0CB17e750219Bd58d433D52ab4B3d8A081',\r\n      bToken: '0x8F038C454B6E68B2988706a1a5f78dE2C4634097',\r\n      pToken: '0xad794Adc3Ed6085A79Ba3e2FCD13Df8d33d462Ec',\r\n      lToken: '0x37732230ac101f59490762Ef73Be43B5E5Ec4949',\r\n      initialBlock: '9986356',\r\n      bTokenSymbol: 'USDT',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '3',\r\n    },\r\n    {\r\n      pool: '0xFFe402106E8F73F0A44C7350C2b734e048f448f2',\r\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\r\n      pToken: '0x5FeF67FD24f37b90E0c96324380F63413dF22f78',\r\n      lToken: '0xCdDbf76F76B9F95135F5D531fefc344258ff322a',\r\n      initialBlock: '7796681',\r\n      bTokenSymbol: 'BUSD',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      pool: '0x02A614844212f71049c469902F7A20F6540a2792',\r\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\r\n      pToken: '0x4396025914025F1C8B74788bF7c64f879064FbA6',\r\n      lToken: '0x2E80928a9eC105FE79cfC4B54c65d185AC3b7E9C',\r\n      initialBlock: '8108552',\r\n      bTokenSymbol: 'BUSD',\r\n      symbol: 'COIN',\r\n      unit: 'COIN',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      pool: '0xE5a4fCd3CE3a824bF15D5FABd390cF44E83AbE8B',\r\n      bToken: '0x02c9840fD044abFd58E9674ecc232e8b1F323fE8',\r\n      pToken: '0xfa803C4528A1b9f91DFc5f8b4ff940f9FE4F4635',\r\n      lToken: '0xbD57300A178075F774b5F0F9f367B9A2912b7b5e',\r\n      initialBlock: '3663327',\r\n      bTokenSymbol: 'HUSD',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '256',\r\n    },\r\n  ];\r\n};\r\n\r\n/**\r\n * Get the Slp contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].pToken - position token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].symbol - symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getSlpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        chainId: '1',\r\n        bTokenSymbol: 'DERI-USDT SLP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  }\r\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\r\n  return [];\r\n};\r\n\r\n/**\r\n * Get the Clp contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getClpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '6894880',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n      {\r\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\r\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '8309032',\r\n        chainId: '97',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  }\r\n};\r\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '699498',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP ONSEN',\r\n        symbol: '--',\r\n      }\r\n    ]\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n\r\nexport const getLpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        chainId: '1',\r\n        bTokenSymbol: 'DERI-USDT SLP',\r\n        symbol: '--',\r\n        type: 'slp',\r\n      },\r\n      {\r\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '6894880',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n        type: 'clp',\r\n      },\r\n      {\r\n        pool: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '699498',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP ONSEN',\r\n        symbol: '--',\r\n        type: 'clp2',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n      {\r\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\r\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '8309032',\r\n        chainId: '97',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n        type: 'clp',\r\n      },\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getMiningVaultRouterContractAddress= (chainId) => {\r\n  const configs = [\r\n      {\r\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\r\n        chainId: '56'\r\n      }\r\n    ]\r\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\r\n  if (filteredConfig.length > 0) {\r\n    return filteredConfig[0].MiningVaultRouter\r\n  } else {\r\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Get the Deri contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].Deri - deri address\r\n * @returns {string} response[].Wormhole - wormhole token address\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getDeriContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\r\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '128',\r\n      },\r\n    ];\r\n  }\r\n  return [\r\n    {\r\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\r\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '3',\r\n    },\r\n    {\r\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\r\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\r\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '256',\r\n    },\r\n  ];\r\n};\r\n\r\nexport const getAnnualBlockNumberConfig = () => ({\r\n  1: '2367422',\r\n  56: '10497304',\r\n  128: '10511369',\r\n  3: '2367422',\r\n  97: '10497304',\r\n  256: '10511369',\r\n});\r\n","/**\r\n * Get REST server config\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {string} server url\r\n */\r\nexport const getRestServerConfig = (env = 'dev') => {\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    return 'https://api.deri.finance';\r\n  } else {\r\n    // for test\r\n    return 'https://apitest.deri.finance';\r\n  }\r\n};\r\n\r\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\r\n  if (env === \"prod\") {\r\n    return ['trade_tx_quene', 'trade_worker_group']\r\n  } else {\r\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\r\n  }\r\n};\r\n","import { bg, getAnnualBlockNumber } from '../utils';\r\n\r\nexport const calculateLiquidityUsed = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  poolMarginRatio\r\n) => {\r\n  return bg(\r\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\r\n  ).abs();\r\n}\r\n\r\nexport const calculateFundingRate = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  fundingRateCoefficient\r\n) => {\r\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\r\n  fundingRateCoefficient;\r\n}\r\n\r\nexport const processFundingRate = (chainId, fundingRate) => {\r\n  const annualBlockCount = getAnnualBlockNumber(chainId);\r\n  //console.log(annualBlockCount);\r\n  return bg(fundingRate).times(annualBlockCount);\r\n};\r\n","import { bg, max, min } from '../utils';\r\n\r\nexport * from './fundingRate';\r\n\r\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\r\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\r\nexport const calculateMaxRemovableShares = (\r\n  lTokenBalance,\r\n  lTokenTotalSupply,\r\n  liquidity,\r\n  tradersNetVolume,\r\n  tradersNetCost,\r\n  multiplier,\r\n  minPoolMarginRatio,\r\n  price\r\n) => {\r\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\r\n  const value = tradersNetVolume.times(price).times(multiplier);\r\n  const removable = liquidity\r\n    .plus(tradersNetCost)\r\n    .minus(value)\r\n    .minus(value.abs().times(minPoolMarginRatio));\r\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\r\n  return shares;\r\n};\r\n\r\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\r\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\r\n\r\nexport const calculateMarginHeld = (\r\n  price,\r\n  volume,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\r\n};\r\n\r\nexport const calculatePnl = (price, volume, multiplier, cost) => {\r\n  return volume.times(price).times(multiplier).minus(cost);\r\n}\r\n\r\nexport const calculateMaxWithdrawMargin = (\r\n  price,\r\n  volume,\r\n  margin,\r\n  cost,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  if (volume.eq(0)) {\r\n    return margin;\r\n  }\r\n  const held = calculateMarginHeld(\r\n    price,\r\n    volume,\r\n    multiplier,\r\n    minInitialMarginRatio\r\n  );\r\n  const pnl = calculatePnl(price, volume, multiplier, cost);\r\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\r\n  return withdrawable;\r\n};\r\n\r\nexport const calculateLiquidationPrice = (\r\n  volume,\r\n  margin,\r\n  cost,\r\n  multiplier,\r\n  minMaintenanceMarginRatio\r\n) => {\r\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\r\n  let res = volume.gt(0)\r\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\r\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\r\n  res = max(res, bg(0));\r\n  return res;\r\n};\r\n\r\nexport const isOrderValid = (\r\n  price,\r\n  margin,\r\n  volume,\r\n  liquidity,\r\n  tradersNetVolume,\r\n  multiplier,\r\n  minPoolMarginRatio,\r\n  minInitialMarginRatio,\r\n  newVolume,\r\n  amount\r\n) => {\r\n  const minMargin = volume\r\n    .plus(newVolume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .times(minInitialMarginRatio);\r\n  const poolMaxVolume = liquidity\r\n    .div(minPoolMarginRatio)\r\n    .div(price)\r\n    .div(multiplier);\r\n  if (margin.plus(amount).gte(minMargin)) {\r\n    if (\r\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\r\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\r\n    ) {\r\n      return { success: true };\r\n    }\r\n    return { success: false, message: 'Pool insufficient liquidity' };\r\n  }\r\n  return { success: false, message: 'Trader insufficient margin' };\r\n};\r\n","import Web3 from 'web3';\r\nimport { metaMaskWeb3 } from '../factory/web3';\r\nimport { hexToNumber } from '../utils';\r\n\r\n/**\r\n * check ethereum client status for web browser\r\n * @function\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\r\n * @returns {boolean} response.[error] - error message when request failed\r\n */\r\nexport const hasWallet = () => {\r\n  if (window.ethereum && window.ethereum.isMetaMask) {\r\n    return { success: true, isMetaMask: true };\r\n  }\r\n  return {\r\n    success: false,\r\n    error:\r\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\r\n  };\r\n};\r\n\r\n/**\r\n *  Connect wallet using MetaMask account\r\n * @async\r\n * @function\r\n * @param {function} [handleChainChanged] - Callback when chainId changed\r\n * @param {function} [handleAccountChanged]  - callback when account changed\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.chainId - chain Id\r\n * @returns {string} response.account - account address\r\n * @returns {boolean} response.[error] - error message when request failed\r\n */\r\nexport const connectWallet = async (\r\n  handleChainChanged,\r\n  handleAccountChanged\r\n) => {\r\n  if (typeof window.ethereum !== undefined) {\r\n    const accounts = await window.ethereum.request({\r\n      method: 'eth_requestAccounts',\r\n    });\r\n    const chainId = parseInt(\r\n      await window.ethereum.request({ method: 'net_version' })\r\n    );\r\n    // const chainId = hexToNumber(\r\n    //   await window.ethereum.request({ method: 'eth_chainId' })\r\n    // );\r\n    const account = Array.isArray(accounts) && accounts[0];\r\n\r\n    // await web3.eth.requestAccounts().then(console.log)\r\n    window.ethereum.on('accountsChanged', (accounts) => {\r\n      let account;\r\n      if (accounts.length > 0) {\r\n        account = accounts[0];\r\n      } else {\r\n        account = '';\r\n      }\r\n      if (typeof handleAccountChanged === 'function') {\r\n        handleAccountChanged(account);\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n      //console.log('accountChanged', account);\r\n    });\r\n    window.ethereum.on('chainChanged', (chainId) => {\r\n      let res = hexToNumber(chainId);\r\n      if (typeof handleChainChanged === 'function') {\r\n        handleChainChanged(res);\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n      //console.log('chainChanged', res);\r\n    });\r\n    return { success: true, account, chainId };\r\n  }\r\n  return {\r\n    success: false,\r\n    error: 'Cannot connect wallet, please install MetaMask.',\r\n  };\r\n};\r\n\r\n/**\r\n * Get balance of the connected account\r\n * @async\r\n * @method\r\n * @param {string} chainId - Id of the chain\r\n * @param {string} accountAddress - Address of the connected account\r\n * @returns {string} Account balance\r\n */\r\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\r\n  //const web3 = web3Factory(chainId);\r\n  const web3 = metaMaskWeb3();\r\n  const balance = await web3.eth.getBalance(walletAddress);\r\n  const res = Web3.utils.fromWei(balance);\r\n  return res;\r\n};\r\n","import {\r\n  getSlpLiquidityInfo,\r\n  getSlpWalletBalance,\r\n  isSlpUnlocked,\r\n  unlockSlp,\r\n  // addSlpLiquidity,\r\n  // removeSlpLiquidity,\r\n} from './slpPoolApi';\r\nimport {\r\n  getClp2LiquidityInfo,\r\n  getClp2WalletBalance,\r\n  isClp2Unlocked,\r\n  unlockClp2,\r\n  // addSlpLiquidity,\r\n  // removeSlpLiquidity,\r\n} from './clp2PoolApi';\r\nimport {\r\n  getClpLiquidityInfo,\r\n  getClpWalletBalance,\r\n  isClpUnlocked,\r\n  unlockClp,\r\n  // addClpLiquidity,\r\n  // removeClpLiquidity,\r\n} from './clpPoolApi';\r\n\r\nimport {\r\n  addSlpLiquidity2 as addSlpLiquidity,\r\n  removeSlpLiquidity2 as removeSlpLiquidity,\r\n  addClpLiquidity2 as addClpLiquidity,\r\n  removeClpLiquidity2 as removeClpLiquidity,\r\n  addClp2Liquidity2 as addClp2Liquidity,\r\n  removeClp2Liquidity2 as removeClp2Liquidity,\r\n} from './contractTransactionApiV2'\r\nimport { getLpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity info of LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.bTokenBalance\r\n * @returns {string} response.shares\r\n */\r\nexport const getLpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Add liquidity to LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addLpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else if (type === 'clp') {\r\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else if (type === 'clp2') {\r\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else {\r\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Remove liquidity to LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeLpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await removeSlpLiquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else if (type === 'clp') {\r\n    return await removeClpLiquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else if (type === 'clp2') {\r\n    return await removeClp2Liquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else {\r\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Unlock the account in the lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await unlockSlp(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await unlockClp(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await unlockClp2(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`unlockLp(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Get account balance in lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getLpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\r\n  }\r\n};\r\n","export {\r\n  DeriEnv,\r\n  getContractAddressConfig,\r\n  getLpContractAddressConfig,\r\n  getSlpContractAddressConfig,\r\n} from './config';\r\nexport * from './utils';\r\nexport * from './calculation';\r\n\r\nexport * from './api/apiGlobals';\r\nexport * from './api/factoryApi';\r\nexport * from './api/walletApi';\r\nexport {\r\n  isUnlocked,\r\n  getEstimatedMargin,\r\n  getEstimatedFee,\r\n  getEstimatedFundingRate,\r\n  getEstimatedLiquidityUsed,\r\n  isDeriUnlocked,\r\n  getUserWormholeSignature,\r\n  // getFundingRate,\r\n  getPositionInfo,\r\n} from './api/contractQueryApi';\r\nexport {\r\n  unlock,\r\n  //depositMargin,\r\n  //withdrawMargin,\r\n  //addLiquidity,\r\n  //removeLiquidity,\r\n  //tradeWithMargin,\r\n  //closePosition,\r\n  mint,\r\n  mintDToken,\r\n  freeze,\r\n  mintDeri,\r\n  unlockDeri,\r\n  mintAirdrop,\r\n} from './api/contractTransactionApi';\r\nexport * from './api/databaseApi';\r\n\r\n// export * from './api/slpPoolApi';\r\n// export * from './api/clpPoolApi';\r\n\r\n// export * from './api/tradeHistoryApi';\r\nexport {\r\ngetSpecification2 as getSpecification,\r\n// getPositionInfo2 as getPositionInfo,\r\ngetLiquidityInfo2 as getLiquidityInfo,\r\ngetWalletBalance2 as getWalletBalance,\r\ngetFundingRate2 as getFundingRate,\r\ngetLiquidityUsed2 as getLiquidityUsed,\r\ngetFundingRateCache2 as getFundingRateCache,\r\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\r\ngetSlpWalletBalance2 as getSlpWalletBalance,\r\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\r\ngetClpWalletBalance2 as getClpWalletBalance,\r\ngetDeriBalance2 as getDeriBalance,\r\ngetTradeHistory2 as getTradeHistory,\r\n} from './api/restApi';\r\n\r\nexport {\r\n  tradeWithMargin2 as tradeWithMargin,\r\n  closePosition2 as closePosition,\r\n  depositMargin2 as depositMargin,\r\n  withdrawMargin2 as withdrawMargin,\r\n  addLiquidity2 as addLiquidity,\r\n  removeLiquidity2 as removeLiquidity,\r\n} from './api/contractTransactionApiV2'\r\n\r\nexport * from './api/lpPoolApi';\r\n","import {\r\n  bTokenFactory,\r\n  lTokenFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n  miningVaultPoolFactory,\r\n  miningVaultRouterFactory,\r\n  wormholeFactory,\r\n  deriFactory,\r\n  databaseWormholeFactory,\r\n} from '../factory/contracts';\r\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\r\nimport {\r\n  getPoolContractAddress,\r\n  getMiningVaultContractAddress,\r\n  getBTCUSDPrice,\r\n  bg,\r\n  naturalToDeri,\r\n  BigNumber,\r\n  format,\r\n  getDeriContractAddress,\r\n} from '../utils';\r\nimport {\r\n  getMiningVaultRouterContractAddress\r\n} from '../config'\r\nimport {\r\n  calculateMaxRemovableShares,\r\n  calculateMaxWithdrawMargin,\r\n  isOrderValid,\r\n} from '../calculation';\r\n\r\n/**\r\n * Unlock the account in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Deposit margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string|number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const depositMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\r\n};\r\n\r\n/**\r\n * Withdraw margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const withdrawMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\r\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\r\n\r\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\r\n    price,\r\n    volume,\r\n    margin,\r\n    cost,\r\n    multiplier,\r\n    minInitialMarginRatio\r\n  );\r\n  if (bg(amount).lte(maxWithdrawMargin)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'amount exceeds allowed' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const decimals = await bToken.decimals();\r\n  const BONE = 10 ** decimals;\r\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\r\n  let res;\r\n  try {\r\n    const tx = await bToken._transact('mint', [amount], accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Add liquidity in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  let res;\r\n  try {\r\n    const tx = await pPool._transactPool(\r\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n      [naturalToDeri(amount)],\r\n      accountAddress\r\n    );\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} shares\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares\r\n) => {\r\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\r\n  const {\r\n    liquidity,\r\n    tradersNetVolume,\r\n    tradersNetCost,\r\n  } = await pPool.getStateValues();\r\n\r\n  const maxRemovableShares = calculateMaxRemovableShares(\r\n    lTokenBalance,\r\n    lTokenTotalSupply,\r\n    liquidity,\r\n    tradersNetVolume,\r\n    tradersNetCost,\r\n    multiplier,\r\n    minPoolMarginRatio,\r\n    price\r\n  );\r\n  let res;\r\n  if (bg(shares).lte(maxRemovableShares)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(shares)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'shares exceeds allowed' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Trade with margin in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} newVolume\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const tradeWithMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    minInitialMarginRatio,\r\n    minPoolMarginRatio,\r\n  } = await pPool.getParameters();\r\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\r\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\r\n  let res;\r\n  const orderValidation = isOrderValid(\r\n    price,\r\n    margin,\r\n    volume,\r\n    liquidity,\r\n    tradersNetVolume,\r\n    multiplier,\r\n    minPoolMarginRatio,\r\n    minInitialMarginRatio,\r\n    bg(newVolume),\r\n    bg(amount)\r\n  );\r\n  if (orderValidation.success) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: orderValidation.message };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Close position in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  let { volume } = await pToken.getPositionInfo(accountAddress);\r\n  volume = volume.negated();\r\n  let res;\r\n  if (!volume.eq(0)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(volume), '0'],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'no position to close' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint DToken in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintDToken = async (chainId, accountAddress) => {\r\n  let res;\r\n  const userInfo = await getUserInfoAll(accountAddress);\r\n  const amount = naturalToDeri(userInfo.amount);\r\n  const { deadline } = userInfo;\r\n  const { nonce } = userInfo;\r\n  const { v } = userInfo;\r\n  const { r } = userInfo;\r\n  const { s } = userInfo;\r\n  if (userInfo.valid) {\r\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\r\n    if (miningVaultAddress) {\r\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\r\n      //miningVault.setAccount(accountAddress);\r\n      try {\r\n        const tx = await miningVault.mintDToken(\r\n          accountAddress,\r\n          amount,\r\n          deadline,\r\n          nonce,\r\n          v,\r\n          r,\r\n          s\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the mining vault address in chain ${chainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * freeze Deri in current wormhole pool to the specified chain\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @param {string} toChainId\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\r\n  const { wormholeAddress } = getDeriContractAddress(chainId);\r\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\r\n  //wormhole.setAccount(accountAddress);\r\n  let res;\r\n  try {\r\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint Deri in wormhole pool\r\n * @async\r\n * @method\r\n * @param {string} toChainId\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintDeri = async (toChainId, accountAddress) => {\r\n  let res;\r\n  const databaseWormhole = databaseWormholeFactory(true);\r\n  // const userInfo = await getUserInfoAll(accountAddress);\r\n  const userInfo = await databaseWormhole.signature(accountAddress);\r\n  // console.log(userInfo)\r\n  const { amount } = userInfo;\r\n  const { fromChainId } = userInfo;\r\n  const { fromWormhole } = userInfo;\r\n  const fromNonce = userInfo.nonce;\r\n  const { v } = userInfo;\r\n  const { r } = userInfo;\r\n  const { s } = userInfo;\r\n  if (userInfo.valid) {\r\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\r\n    if (wormholeAddress) {\r\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\r\n      //wormhole.setAccount(accountAddress);\r\n      try {\r\n        const tx = await wormhole.mintDeri(\r\n          accountAddress,\r\n          amount,\r\n          fromChainId,\r\n          fromWormhole,\r\n          fromNonce,\r\n          v,\r\n          r,\r\n          s\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Unlock the account in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockDeri = async (chainId, accountAddress) => {\r\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\r\n  let res;\r\n  try {\r\n    const tx = await deri.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint Airdrop in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintAirdrop = async (chainId, accountAddress) => {\r\n  let res;\r\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\r\n  const amount = naturalToDeri(userInfo.amount).toString();\r\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\r\n  if (userInfo.valid) {\r\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\r\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\r\n    // console.log(\"userInfo\", userInfo)\r\n    if (miningVaultAddress) {\r\n      const miningVaultRouter = miningVaultRouterFactory(\r\n        chainId,\r\n        miningVaultAddress\r\n      );\r\n      try {\r\n        const tx = await miningVaultRouter.mint(\r\n          accountAddress,\r\n          amount,\r\n          deadline,\r\n          nonce,\r\n          v1,\r\n          r1,\r\n          s1,\r\n          v2,\r\n          r2,\r\n          s2\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the mining vault router address in chain ${chainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n","import {\r\n  addLiquidity,\r\n  removeLiquidity,\r\n  depositMargin,\r\n  withdrawMargin,\r\n  tradeWithMargin,\r\n  closePosition,\r\n} from './contractTransactionApi';\r\nimport {\r\n  addSlpLiquidity,\r\n  removeSlpLiquidity,\r\n} from './slpPoolApi'\r\nimport {\r\n  addClpLiquidity,\r\n  removeClpLiquidity,\r\n} from './clpPoolApi'\r\nimport {\r\n  addClp2Liquidity,\r\n  removeClp2Liquidity,\r\n} from './clp2PoolApi'\r\nimport { wsInstance } from './apiGlobals'\r\nimport { getRestServerConfig, DeriEnv, getRedisWorkerQueneConfig } from '../config'\r\n\r\nconst wsOnPromise = (ws, event) => {\r\n  return new Promise((resolve, reject) => {\r\n    ws.on(event, function(data){\r\n      resolve(JSON.parse(data))\r\n    })\r\n  })\r\n}\r\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\r\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\r\n  await ws.send(methodCall)\r\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\r\n  //console.log('res', res)\r\n  return res\r\n}\r\n\r\nexport const tradeWithMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const closePosition2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const depositMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const withdrawMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addSlpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeSlpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\nexport const addClpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeClpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addClp2Liquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeClp2Liquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};","import { perpetualPoolFactory } from '../factory/contracts';\r\nimport { getBTCUSDPrice } from '../utils';\r\nimport { getUserWormholeSignature } from './contractQueryApi';\r\nimport { io } from 'socket.io-client';\r\n\r\n/** @module apiCache */\r\n/**\r\n * fundingRateCache Object\r\n * @name fundingRateCache\r\n * @property {function} get - Get the funding rate from cache\r\n * @property {function} set - set the funding rate cache\r\n */\r\nexport const fundingRateCache = (function () {\r\n  let resourceMap = {};\r\n  return {\r\n    get(chainId, contractAddress) {\r\n      const key = `${chainId}.${contractAddress}`;\r\n      if (Object.keys(resourceMap).includes(key)) {\r\n        return resourceMap[key];\r\n      }\r\n      console.log(`Cache key is not in resouceMap: ${key}`);\r\n      return undefined;\r\n    },\r\n    set(chainId, contractAddress, resource) {\r\n      const key = `${chainId}.${contractAddress}`;\r\n      resourceMap[key] = resource;\r\n    },\r\n  };\r\n})();\r\n\r\nexport const accountAddressCache = (function () {\r\n  let _accountAddress = '';\r\n  return {\r\n    get() {\r\n      if (_accountAddress === '') {\r\n        console.log(\"please init 'accountAddress' first\");\r\n      }\r\n      return _accountAddress;\r\n    },\r\n    set(value) {\r\n      if (typeof value === 'string' && value !== '') {\r\n        _accountAddress = value;\r\n      }\r\n    },\r\n  };\r\n})();\r\n\r\n/**\r\n * priceCache Object\r\n * @name priceCache\r\n * @property {function} get - Get the price from cache\r\n * @property {function} update - Set the price to automatic update during a time interval\r\n * @property {function} clear - Clear the the automatic update of the price\r\n */\r\nexport const priceCache = (function () {\r\n  let _price = '';\r\n  let _interval = null;\r\n  return {\r\n    get() {\r\n      if (_price === '') {\r\n        console.log(\"please init 'price' first\");\r\n      }\r\n      return _price;\r\n    },\r\n    async _update(chainId, poolAddress) {\r\n      try {\r\n        const res = await getBTCUSDPrice(chainId, poolAddress);\r\n        if (res !== '') {\r\n          _price = res;\r\n        }\r\n      } catch (err) {\r\n        console.log(`priceCache.update: ${err}`)\r\n      }\r\n    },\r\n    update(chainId, poolAddress) {\r\n      const self = this;\r\n      _interval = setInterval(() => {\r\n        // console.log('tick')\r\n        self._update(chainId, poolAddress);\r\n      }, 3000);\r\n    },\r\n    clear() {\r\n      if (_interval) {\r\n        clearInterval(_interval);\r\n      }\r\n      _price = '';\r\n    },\r\n  };\r\n})();\r\n\r\n/**\r\n * PerpetualPoolParametersCache Object\r\n * @name PerpetualPoolParametersCache\r\n * @property {function} get - Get the perpetualPoolParameters from cache\r\n * @property {function} update - Set the perpetualPoolParameters\r\n */\r\n\r\nexport const PerpetualPoolParametersCache = (function () {\r\n  let _parameters = {};\r\n  return {\r\n    get() {\r\n      if (!_parameters.multiplier) {\r\n        console.log(\"please init 'perpetual pool parameters' first\");\r\n      }\r\n      return _parameters;\r\n    },\r\n    async update(chainId, poolAddress) {\r\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n      const res = await perpetualPool.getParameters();\r\n      if (res.multiplier) {\r\n        _parameters = res;\r\n      }\r\n      return res;\r\n    },\r\n  };\r\n})();\r\n\r\n// websocket instance\r\nexport const wsInstance = (function(){\r\n  let _ws = null;\r\n  return {\r\n    get() {\r\n      if (_ws) {\r\n        return _ws\r\n      } else {\r\n        console.log('wsInstance.get() error: ws instance is not init')\r\n      }\r\n    },\r\n    set(url) {\r\n      try {\r\n        const ws = io(url, {\r\n          transports: ['websocket'],\r\n          path: '/ws',\r\n        });\r\n        ws.on('connect', () => {\r\n          console.log('hello from ws:', ws.id);\r\n        })\r\n        if (ws) {\r\n          _ws = ws\r\n        } else {\r\n          console.log('wsInstance.get() error: ws instance is not init')\r\n        }\r\n      } catch (err) {\r\n        console.log('wsInstance.set():', err)\r\n      }\r\n    },\r\n    getOrSet(url) {\r\n      if (!_ws) {\r\n        this.set(url)\r\n      }\r\n      return _ws\r\n    }\r\n  }\r\n})();\r\n","import {\r\n  getPoolContractAddress,\r\n  naturalToDeri,\r\n  deriToNatural,\r\n  hexToString,\r\n  toChecksumAddress,\r\n  hexToNumber,\r\n  hexToNumberString,\r\n} from '../utils';\r\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\r\n\r\nconst processTradeEvent = async (\r\n  perpetualPool,\r\n  bTokenSymbol,\r\n  info,\r\n  blockNumber,\r\n  txHash,\r\n  multiplier,\r\n  feeRatio\r\n) => {\r\n  const tradeVolume = deriToNatural(info.tradeVolume);\r\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\r\n\r\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\r\n  const price = deriToNatural(info.price);\r\n  const time = `${+timeStamp.timestamp}000`;\r\n  const transactionFee = perpetualPool._calculateFee(\r\n    tradeVolume,\r\n    price,\r\n    multiplier,\r\n    feeRatio\r\n  );\r\n  const notional = tradeVolume.abs().times(price).times(multiplier);\r\n  const volume = tradeVolume.abs();\r\n\r\n  const res = {\r\n    direction,\r\n    baseToken: bTokenSymbol,\r\n    price: price.toString(),\r\n    notional: notional.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: transactionFee.toString(),\r\n    transactionHash: txHash.toString(),\r\n    time,\r\n  };\r\n  // console.log(JSON.stringify(res))\r\n  return res;\r\n};\r\n\r\nconst processLiquidateEvent = async (\r\n  info,\r\n  txHash,\r\n  bTokenSymbol,\r\n  multiplier\r\n) => {\r\n  // console.log(info)\r\n  const volume = deriToNatural(info.volume).abs();\r\n  // const cost = deriToNatural(info.cost).abs()\r\n  // const margin = info.margin\r\n  const timestamp = `${info.timestamp}000`;\r\n  const price = deriToNatural(info.price);\r\n  // const liquidator = info.liquidator\r\n  // const reward = info.reward\r\n  const national = volume.times(price).times(multiplier);\r\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\r\n\r\n  const res = {\r\n    direction: 'Liquidation',\r\n    baseToken: bTokenSymbol,\r\n    price: price.toString(),\r\n    notional: national.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: '0',\r\n    transactionHash: txHash.toString(),\r\n    time: timestamp,\r\n    // cost: naturalToDeri(cost).toString(),\r\n    // margin: margin.toString(),\r\n    // liquidator,\r\n    // reward: reward.toString(),\r\n  };\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get the user trade history\r\n * @async\r\n * @method\r\n * @param {string} chainId - Chain Id\r\n * @param {string} poolAddress - Pool Address\r\n * @param {string} accountAddress - Account Address\r\n * @returns {Object[]} response\r\n * @returns {string} response[].direction\r\n * @returns {string} response[].baseToken\r\n * @returns {string} response[].price\r\n * @returns {string} response[].notional\r\n * @returns {string} response[].volume\r\n * @returns {string} response[].transactionFee\r\n * @returns {string} response[].time - Timestamp of the trade\r\n */\r\n\r\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\r\n  const keyMeta = `${chainId}.${poolAddress}`;\r\n  const db = databaseFactory();\r\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\r\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\r\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\r\n  ]);\r\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\r\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\r\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\r\n    // console.log(tradeFromBlock, liquidateFromBlock)\r\n    const [\r\n      tradeHistoryOffline,\r\n      tradeHistoryOnline,\r\n      liquidateHistoryOffline,\r\n      liquidateHistoryOnline,\r\n    ] = await Promise.all([\r\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline\r\n      .concat(liquidateHistoryOnline)\r\n      .concat(tradeHistoryOffline)\r\n      .concat(liquidateHistoryOffline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  } else {\r\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\r\n    tradeFromBlock = parseInt(initialBlock);\r\n    liquidateFromBlock = parseInt(initialBlock);\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  }\r\n};\r\n\r\n// get trade history combined from cache and from online pull\r\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\r\n  // console.log(chainId, poolAddress, accountAddress)\r\n  let result = [];\r\n  // use dev database\r\n  const db = databaseFactory();\r\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\r\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\r\n    accountAddress\r\n  )}.trade`;\r\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const count = hexToNumber(res);\r\n  try {\r\n    if (count && count >= 0) {\r\n      let keyArray = [];\r\n      for (let i = count; i > 0; i--) {\r\n        const key = `${keyMeta}.${i.toString()}`;\r\n        keyArray = keyArray.concat([\r\n          `${key}.direction`,\r\n          `${key}.baseToken`,\r\n          `${key}.price`,\r\n          `${key}.notional`,\r\n          `${key}.volume`,\r\n          `${key}.transactionFee`,\r\n          `${key}.transactionHash`,\r\n          `${key}.time`,\r\n        ]);\r\n      }\r\n      // console.log(keyArray)\r\n      const tradeHistoryLength = keyArray.length / 8;\r\n      // console.log(`trade history length: ${tradeHistoryLength}`)\r\n      const resp = await db.getValues(keyArray);\r\n      for (let i = 0; i < tradeHistoryLength; i++) {\r\n        const indexBase = i * 8;\r\n        //console.log(resp[indexBase + 6].trim());\r\n        const item = {\r\n          direction: hexToString(resp[indexBase]).trim(),\r\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\r\n          price: deriToNatural(resp[indexBase + 2]).toString(),\r\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\r\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\r\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\r\n          transactionHash: resp[indexBase + 6],\r\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\r\n        };\r\n        result.push(item);\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n\r\n// get trade history online from the Block number\r\nexport const getTradeHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  fromBlock\r\n) => {\r\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\r\n  // console.log(poolAddr, bTokenAddress);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //perpetualPool.setAccount(accountAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\r\n  fromBlock = parseInt(fromBlock);\r\n  const filters = { owner: accountAddress };\r\n  const events = await perpetualPool._getPastEvents(\r\n    'Trade',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n  const {\r\n    multiplier,\r\n    feeRatio,\r\n    minInitialMarginRatio,\r\n  } = await perpetualPool.getParameters();\r\n\r\n  const result = [];\r\n  // console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    // const info = item.returnValues;\r\n    const res = await processTradeEvent(\r\n      perpetualPool,\r\n      bTokenSymbol,\r\n      item.returnValues,\r\n      item.blockNumber,\r\n      item.transactionHash,\r\n      multiplier,\r\n      feeRatio,\r\n      minInitialMarginRatio\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\n// get liquidate history online from the Block number\r\nexport const getLiquidateHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  fromBlock\r\n) => {\r\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\r\n  // console.log(poolAddr, bTokenAddress);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //perpetualPool.setAccount(accountAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  fromBlock = parseInt(fromBlock);\r\n  const filters = { owner: accountAddress };\r\n  const events = await perpetualPool._getPastEvents(\r\n    'Liquidate',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n  const { multiplier } = await perpetualPool.getParameters();\r\n\r\n  const result = [];\r\n  // console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    // const info = item.returnValues;\r\n    const res = await processLiquidateEvent(\r\n      item.returnValues,\r\n      item.transactionHash,\r\n      bTokenSymbol,\r\n      multiplier\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\n// get trade history combined from cache and from online pull\r\nconst getLiquidateHistoryOffline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  let result = [];\r\n  // use dev database\r\n  const db = databaseFactory();\r\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\r\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\r\n    accountAddress\r\n  )}.liquidate`;\r\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const count = hexToNumber(res);\r\n  try {\r\n    if (count && count >= 0) {\r\n      let keyArray = [];\r\n      for (let i = count; i > 0; i--) {\r\n        const key = `${keyMeta}.${i.toString()}`;\r\n        keyArray = keyArray.concat([\r\n          `${key}.direction`,\r\n          `${key}.baseToken`,\r\n          `${key}.price`,\r\n          `${key}.notional`,\r\n          `${key}.volume`,\r\n          `${key}.transactionFee`,\r\n          `${key}.transactionHash`,\r\n          `${key}.time`,\r\n        ]);\r\n      }\r\n      // console.log(keyArray)\r\n      const liquidateHistoryLength = keyArray.length / 8;\r\n      const resp = await db.getValues(keyArray);\r\n      for (let i = 0; i < liquidateHistoryLength; i++) {\r\n        const indexBase = i * 8;\r\n        const item = {\r\n          direction: hexToString(resp[indexBase]).trim(),\r\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\r\n          price: deriToNatural(resp[indexBase + 2]).toString(),\r\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\r\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\r\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\r\n          transactionHash: resp[indexBase + 6],\r\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\r\n        };\r\n        result.push(item);\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n","// const\r\nimport { getRestServerConfig, DeriEnv } from '../config';\r\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\r\nimport {\r\n  getLiquidateHistoryOnline,\r\n  getTradeHistoryOnline,\r\n} from './tradeHistoryApi';\r\n\r\nconst getHttpBase = () => {\r\n  return getRestServerConfig(DeriEnv.get());\r\n};\r\n\r\nconst fetchJson = async (url) => {\r\n  const resp = await fetch(url);\r\n  return await resp.json();\r\n};\r\n\r\n/**\r\n * Get specification from REST API, please refer {@link getSpecification}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getSpecification2 = async (chainId, poolAddress) => {\r\n  console.log('hit');\r\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get funding rate from REST API, please refer {@link getFundingRate}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getFundingRate2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    let result = res.data;\r\n    result.price = bg(result.price);\r\n    result.fundingRate = bg(result.fundingRate);\r\n    result.liquidityUsed = bg(result.liquidityUsed);\r\n    return result;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get position info from REST API, please refer {@link getPositionInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getPositionInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance from REST API, please refer {@link getWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getSlpLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getSlpWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getClpLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getClpWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\r\n * @async\r\n * @method\r\n * @param {string} chainId - Chain Id\r\n * @param {string} poolAddress - Pool Address\r\n * @param {string} accountAddress - Account Address\r\n * @returns {Object[]} response\r\n */\r\nexport const getTradeHistory2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\r\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\r\n    tradeHistory = res.data.tradeHistory;\r\n  }\r\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\r\n    return {\r\n      direction: i.direction.trim(),\r\n      baseToken: i.baseToken.trim(),\r\n      price: deriToNatural(i.price).toString(),\r\n      notional: deriToNatural(i.notional).toString(),\r\n      volume: deriToNatural(i.volume).toString(),\r\n      transactionFee: deriToNatural(i.transactionFee).toString(),\r\n      transactionHash: i.transactionHash,\r\n      time: i.time.toString(),\r\n    };\r\n  });\r\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\r\n    // console.log(tradeFromBlock, liquidateFromBlock)\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline\r\n      .concat(liquidateHistoryOnline)\r\n      .concat(tradeHistory);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  } else {\r\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\r\n    tradeFromBlock = parseInt(initialBlock);\r\n    liquidateFromBlock = parseInt(initialBlock);\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  }\r\n};\r\n","export const getDBProviderUrlsConfig = () => [\r\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n];\r\n\r\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\r\n  }\r\n  // for test\r\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\r\n};\r\n\r\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\r\n  }\r\n  // for test\r\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\r\n};\r\n\r\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\r\n  }\r\n  // for test\r\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  lTokenFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n  deriFactory,\r\n  databaseWormholeFactory,\r\n} from '../factory/contracts';\r\nimport { getPoolInfoApy } from './databaseApi';\r\nimport {\r\n  fundingRateCache,\r\n  PerpetualPoolParametersCache,\r\n  priceCache,\r\n} from './apiGlobals';\r\nimport {\r\n  hasInvalidArgsValue,\r\n  naturalWithPercentage,\r\n  deriToNatural,\r\n  getPoolContractAddress,\r\n  getBTCUSDPrice,\r\n  bg,\r\n  BigNumber,\r\n  getDeriContractAddress,\r\n} from '../utils';\r\nimport {\r\n  calculateFundingRate,\r\n  calculateLiquidityUsed,\r\n  calculateShareValue,\r\n  calculateMaxRemovableShares,\r\n  calculateEntryPrice,\r\n  calculateMarginHeld,\r\n  calculatePnl,\r\n  calculateLiquidationPrice,\r\n  processFundingRate,\r\n} from '../calculation';\r\n\r\n/**\r\n * Get the contract information\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.addresses\r\n * @returns {string} response.symbol\r\n * @returns {string} response.bSymbol\r\n * @returns {string} response.multiplier\r\n * @returns {string} response.feeRatio\r\n * @returns {string} response.minPoo\r\n * @returns {string} response.minPoolMarginRatio\r\n * @returns {string} response.minInitialMarginRatio\r\n * @returns {string} response.minMaintenanceMarginRatio\r\n * @returns {string} response.minAddLiquidity\r\n * @returns {string} response.redemptionFeeRatio\r\n * @returns {string} response.fundingRateCoefficient\r\n * @returns {string} response.minLiquidationReward\r\n * @returns {string} response.maxLiquidationReward\r\n * @returns {string} response.liquidationCutRatio\r\n * @returns {string} response.priceDelayAllowance\r\n */\r\nexport const getSpecification = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    feeRatio,\r\n    minPoolMarginRatio,\r\n    minInitialMarginRatio,\r\n    minMaintenanceMarginRatio,\r\n    minAddLiquidity,\r\n    redemptionFeeRatio,\r\n    fundingRateCoefficient,\r\n    minLiquidationReward,\r\n    maxLiquidationReward,\r\n    liquidationCutRatio,\r\n    priceDelayAllowance,\r\n  } = await pPool.getParameters();\r\n  const symbol = await pPool.symbol();\r\n  const bSymbolRaw = await bToken.symbol();\r\n\r\n  return {\r\n    addresses: poolAddress,\r\n    symbol,\r\n    bSymbol: bSymbolRaw,\r\n    multiplier: multiplier.toString(),\r\n    feeRatio: feeRatio.toString(),\r\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\r\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\r\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\r\n    minAddLiquidity: minAddLiquidity.toString(),\r\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\r\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n    minLiquidationReward: minLiquidationReward.toString(),\r\n    maxLiquidationReward: maxLiquidationReward.toString(),\r\n    liquidationCutRatio: liquidationCutRatio.toString(),\r\n    priceDelayAllowance: priceDelayAllowance.toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get position Information of the user\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.volume\r\n * @returns {string} response.averageEntryPrice\r\n * @returns {string} response.margin\r\n * @returns {string} response.marginHeld\r\n * @returns {string} response.unrealizedPnl\r\n * @returns {string} response.liquidationPrice\r\n */\r\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    minInitialMarginRatio,\r\n    minMaintenanceMarginRatio,\r\n  } = await pPool.getParameters();\r\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\r\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\r\n\r\n  return {\r\n    volume: volume.toString(),\r\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\r\n    margin: margin.toString(),\r\n    marginHeld: calculateMarginHeld(\r\n      price,\r\n      volume,\r\n      multiplier,\r\n      minInitialMarginRatio\r\n    ).toString(),\r\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\r\n    liquidationPrice: calculateLiquidationPrice(\r\n      volume,\r\n      margin,\r\n      cost,\r\n      multiplier,\r\n      minMaintenanceMarginRatio\r\n    ).toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get liquidity Info of the user\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.totalSupply\r\n * @returns {string} response.poolLiquidity\r\n * @returns {string} response.shares\r\n * @returns {string} response.shareValue\r\n * @returns {string} response.maxRemovableShares\r\n */\r\nexport const getLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const {\r\n    liquidity,\r\n    tradersNetCost,\r\n    tradersNetVolume,\r\n  } = await pPool.getStateValues();\r\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\r\n  const poolDynamicEquity = liquidity.plus(\r\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\r\n  );\r\n\r\n  return {\r\n    totalSupply: lTokenTotalSupply.toString(),\r\n    poolLiquidity: liquidity.toString(),\r\n    shares: lTokenBalance.toString(),\r\n    shareValue: calculateShareValue(\r\n      lTokenTotalSupply,\r\n      poolDynamicEquity\r\n    ).toString(),\r\n    maxRemovableShares: calculateMaxRemovableShares(\r\n      lTokenBalance,\r\n      lTokenTotalSupply,\r\n      liquidity,\r\n      tradersNetVolume,\r\n      tradersNetCost,\r\n      multiplier,\r\n      minPoolMarginRatio,\r\n      price\r\n    ).toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get user balance in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {string} user balance\r\n */\r\nexport const getWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Get estimate margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} volume\r\n * @param {string} leverage\r\n * @returns {string}\r\n */\r\nexport const getEstimatedMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  volume,\r\n  leverage\r\n) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const { multiplier } = await pPool.getParameters();\r\n  return bg(volume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .div(bg(leverage))\r\n    .toString();\r\n};\r\n\r\n/**\r\n * Get estimate Fee in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} volume\r\n * @returns {string}\r\n */\r\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\r\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  let price = priceCache.get();\r\n  let parameters = PerpetualPoolParametersCache.get();\r\n  if (price === '') {\r\n    await priceCache.update(chainId, poolAddress);\r\n    price = priceCache.get();\r\n  }\r\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\r\n  // const { multiplier, feeRatio } = await pPool.getParameters();\r\n  if (!parameters.multiplier) {\r\n    parameters = await PerpetualPoolParametersCache.update(\r\n      chainId,\r\n      poolAddress\r\n    );\r\n  }\r\n  //console.log('price', price);\r\n  const { multiplier, feeRatio } = parameters;\r\n  return bg(volume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .times(feeRatio)\r\n    .toString();\r\n};\r\n\r\n/**\r\n * Get funding rate of the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate0\r\n * @returns {string} response.fundingRatePerBlock\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.volume\r\n * @returns {string} response.tradersNetVolume\r\n */\r\nexport const getFundingRate = async (chainId, poolAddress) => {\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n\r\n  const res = await perpetualPool\r\n    .getFundingRate()\r\n    .catch((err) => console.log('getFundingRate', err));\r\n  fundingRateCache.set(chainId, poolAddress, res);\r\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\r\n\r\n  if (res) {\r\n    // console.log(hexToNatural(res[0]));\r\n    const {\r\n      fundingRate,\r\n      fundingRatePerBlock,\r\n      liquidity,\r\n      tradersNetVolume,\r\n    } = res;\r\n    const volume = poolInfo.volume24h;\r\n    // fundingRate = processFundingRate(chainId, fundingRate);\r\n\r\n    return {\r\n      fundingRate0: naturalWithPercentage(fundingRate),\r\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\r\n      liquidity: liquidity.toString(),\r\n      volume: deriToNatural(volume).toString(),\r\n      tradersNetVolume: tradersNetVolume.toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get estimate funding rate\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} newNetVolume\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate1\r\n */\r\nexport const getEstimatedFundingRate = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume\r\n) => {\r\n  let fundingRate1;\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool.getFundingRate();\r\n  }\r\n  if (res) {\r\n    const parameters = [\r\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.fundingRateCoefficient,\r\n    ];\r\n    if (hasInvalidArgsValue(...parameters)) {\r\n      return {\r\n        fundingRate1: '0',\r\n      };\r\n    }\r\n    // console.log(parameters)\r\n    fundingRate1 = calculateFundingRate(...parameters);\r\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\r\n    return {\r\n      fundingRate1: naturalWithPercentage(fundingRate1),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get liquidity used\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidityUsed0\r\n */\r\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool.getFundingRate();\r\n  }\r\n  if (res) {\r\n    const { liquidityUsed } = res;\r\n    return {\r\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get estimate liquidity used\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} newNetVolume\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate1\r\n */\r\nexport const getEstimatedLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume\r\n) => {\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool\r\n      .getFundingRate()\r\n      .catch((err) => console.log('getLiquidityUsed', err));\r\n  }\r\n  if (res) {\r\n    const parameters = [\r\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.poolMarginRatio,\r\n    ];\r\n    if (hasInvalidArgsValue(...parameters)) {\r\n      return {\r\n        liquidityUsed1: '0',\r\n      };\r\n    }\r\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\r\n    return {\r\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user signature of the wormhole pool\r\n * @async\r\n * @method\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getUserWormholeSignature = async (accountAddress) => {\r\n  const databaseWormhole = databaseWormholeFactory(true);\r\n  return await databaseWormhole.signature(accountAddress);\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\r\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\r\n  let res;\r\n  try {\r\n    const tx = await deri.isUnlocked(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get deri balance in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string}\r\n */\r\nexport const getDeriBalance = async (chainId, accountAddress) => {\r\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  return (await deri.balance(accountAddress)).toString();\r\n};\r\n","// eslint-disable-next-line no-extend-native\r\nNumber.prototype.toFixed = function(len){\r\n  if(len>20 || len<0){\r\n      throw new RangeError('toFixed() digits argument must be between 0 and 20');\r\n  }\r\n  // .123转为0.123\r\n  var number = Number(this);\r\n  if (isNaN(number) || number >= Math.pow(10, 21)) {\r\n      return number.toString();\r\n  }\r\n  if (typeof (len) == 'undefined' || len == 0) {\r\n      return (Math.round(number)).toString();\r\n  }\r\n  var result = number.toString(),\r\n      numberArr = result.split('.');\r\n\r\n  if(numberArr.length<2){\r\n      //整数的情况\r\n      return padNum(result);\r\n  }\r\n  var intNum = numberArr[0], //整数部分\r\n      deciNum = numberArr[1],//小数部分\r\n      lastNum = deciNum.substr(len, 1);//最后一个数字\r\n  \r\n  if(deciNum.length == len){\r\n      //需要截取的长度等于当前长度\r\n      return result;\r\n  }\r\n  if(deciNum.length < len){\r\n      //需要截取的长度大于当前长度 1.3.toFixed(2)\r\n      return padNum(result)\r\n  }\r\n  //需要截取的长度小于当前长度，需要判断最后一位数字\r\n  result = intNum + '.' + deciNum.substr(0, len);\r\n  if(parseInt(lastNum, 10)>=5){\r\n      //最后一位数字大于5，要进位\r\n      var times = Math.pow(10, len); //需要放大的倍数\r\n      var changedInt = Number(result.replace('.',''));//截取后转为整数\r\n      changedInt++;//整数进位\r\n      changedInt /= times;//整数转为小数，注：有可能还是整数\r\n      result = padNum(changedInt+'');\r\n  }\r\n  return result;\r\n  //对数字末尾加0\r\n  function padNum(num){\r\n      var dotPos = num.indexOf('.');\r\n      if(dotPos === -1){\r\n          //整数的情况\r\n          num += '.';\r\n          for(var i = 0;i<len;i++){\r\n              num += '0';\r\n          }\r\n          return num;\r\n      } else {\r\n          //小数的情况\r\n          var need = len - (num.length - dotPos - 1);\r\n          for(var j = 0;j<need;j++){\r\n              num += '0';\r\n          }\r\n          return num;\r\n      }\r\n  }\r\n}","import {isBrowser,isMobile} from 'react-device-detect'\r\nimport LoadableComponent from './utils/LoadableComponent';\r\n\r\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\r\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\r\n\r\nfunction App() {\r\n  \r\n  if(isBrowser){\r\n    return <DesktopApp/>\r\n  }\r\n  if(isMobile){\r\n    return <MobileApp/>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","\r\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js/indexV2\";\r\nimport config from '../config.json'\r\nimport { formatBalance } from \"../utils/utils\";\r\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\r\n\r\nconst walletKey = 'mm_wallet_key'\r\n\r\n\r\nclass Wallet {\r\n  \r\n  detail = {}\r\n  \r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      detail : observable,\r\n      loadWalletBalance : action,\r\n      connect : action      \r\n    })\r\n  }\r\n\r\n  isConnected = () => !!this.detail.account;\r\n\r\n  connect =  async () => {\r\n    const res = await connectWallet();\r\n    return new Promise(async (resolve,reject) => {\r\n      if(res.success){\r\n        const {chainId,account} = res\r\n        const wallet = await this.loadWalletBalance(chainId,account);        \r\n        resolve(wallet)\r\n      } else {\r\n        reject(null)\r\n      }\r\n    })\r\n  }\r\n\r\n  loadWalletBalance = async (chainId,account) => {\r\n    const balance = await getUserWalletBalance(chainId,account)\r\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\r\n    const env = DeriEnv.get();\r\n    const {chainInfo} = config[env]\r\n    \r\n    if(chainInfo[chainId]){\r\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\r\n    }\r\n    this.detail = detail;\r\n    return detail;\r\n  }\r\n\r\n  get = () => {\r\n    return this.detail;\r\n  }\r\n\r\n  remove = () => {\r\n    this.detail = null;\r\n    sessionStorage.removeItem(walletKey);\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\r\nimport WebSocket from \"socket.io-client\";\r\n\r\nclass Oracle {\r\n  symbol = 'BTCUSD'\r\n  timeType = 'min'\r\n  index = 0.00\r\n  kData = []\r\n  ws = null\r\n  paused = false;\r\n  listeners = {}\r\n  already = false\r\n\r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      index : observable,\r\n      kData : observable,\r\n      setIndex : action,\r\n    })\r\n    this.initWebSocket()\r\n  }\r\n\r\n  initWebSocket(){\r\n    if(this.ws === null) {\r\n      this.ws = new WebSocket('wss://oracle4.deri.finance', {\r\n        transports: ['websocket'],\r\n        withCredentials: true\r\n      })\r\n      this.ws.on('connect',() => {\r\n        if(this.already){\r\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\r\n          console.log('ws is reconnected already')\r\n        }\r\n        console.log('ws is already connected');\r\n      });\r\n    }    \r\n  }\r\n\r\n  // loadIndex(symbol){\r\n  //   this.resume();\r\n  //   this.setSymbol(symbol)\r\n  //   this.ws.emit('get_kline', {'symbol': symbol, 'time_type': 'min', 'bars': 10})\r\n  // }\r\n\r\n  load(symbol,timeType = 'min'){\r\n    this.setSymbol(symbol)\r\n    this.ws.on('kline_update',data => {\r\n      const obj = {}\r\n      let time = data.time\r\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\r\n        obj.time = time \r\n        obj.low = Number(data.low)\r\n        obj.high = Number(data.high)\r\n        obj.open = Number(data.open)\r\n        obj.close = Number(data.close)\r\n        obj.volume = Number(data.volume)\r\n        obj.time_type = data.time_type\r\n        obj.symbol = data.symbol\r\n        if(!this.paused) {\r\n          this.setIndex(obj.close)\r\n          for(const key of Object.keys(this.listeners)){\r\n            if(typeof this.listeners[key] === 'function'){\r\n              this.listeners[key](obj)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    if(symbol !== this.symbol){\r\n      this.unsubscribeBars(this.symbol);\r\n    }\r\n    this.setSymbol(symbol)\r\n    this.setTimeType(timeType);\r\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\r\n    this.already = true\r\n  }\r\n\r\n  addListener(id,listener){\r\n    if(!this.listeners[id]) {\r\n      this.listeners[id] = listener\r\n    }    \r\n  }\r\n\r\n\r\n\r\n  unsubscribeBars(symbol){\r\n    this.ws.emit('un_get_kline_update', {\r\n      symbol : symbol, 'time_type' : 'min'\r\n    })\r\n  }\r\n\r\n\r\n  loadHistory(symbol,timeType,callback){\r\n    this.ws.on('kline_history', data => {\r\n      const history = data.map(el => {\r\n        return {\r\n          time: el.time,\r\n          low: Number(el.low),\r\n          high: Number(el.high),\r\n          open: Number(el.open),\r\n          close: Number(el.close),\r\n          volume: Number(el.volume)\r\n        }\r\n      })\r\n      if(callback){\r\n        console.log('history ->',history[history.length-1].time)\r\n        callback(history)\r\n      }\r\n    })\r\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\r\n    // this.emit(symbol);\r\n  }\r\n\r\n  // start(symbol){\r\n  //   this.initWebSocket();\r\n  //   this.loadIndex(symbol);\r\n  //   this.ws.on('kline_update',data => {\r\n  //     const obj = {}\r\n  //     let time = data.time\r\n  //     if (data.symbol === this.symbol) {\r\n  //       obj.time = time \r\n  //       obj.low = Number(data.low)\r\n  //       obj.high = Number(data.high)\r\n  //       obj.open = Number(data.open)\r\n  //       obj.close = Number(data.close)\r\n  //       obj.volume = Number(data.volume)\r\n  //       this.setIndex(obj.close)\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  resume(){\r\n    this.setPause(false)\r\n  }\r\n\r\n  pause(){\r\n    this.setPause(true)\r\n  }\r\n\r\n  setIndex(index){\r\n    if(!this.paused) {\r\n      this.index = index;\r\n    }\r\n  }\r\n\r\n  setSymbol(symbol){\r\n    this.symbol = symbol\r\n  }\r\n\r\n  setTimeType(timeType){\r\n    this.timeType = timeType;\r\n  }\r\n  setPause(paused){\r\n    this.paused = paused\r\n  }\r\n}\r\n\r\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\r\n\r\nexport default class Position {\r\n\r\n  callback = () => {}\r\n   wallet = null;\r\n   spec = null\r\n \r\n\r\n   async load(wallet,spec,callback){\r\n     if(spec && spec.pool){\r\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account)\r\n      if(position){\r\n        if(callback){\r\n          callback(position)\r\n        }\r\n      }\r\n      this.start(wallet,spec,callback)\r\n      return position;\r\n     }\r\n   }\r\n\r\n   start(wallet,spec,callback){\r\n     if(!this.interval){\r\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \r\n      if(wallet){\r\n        this.wallet= wallet; \r\n        }\r\n        if(spec){\r\n          this.spec = spec\r\n        }\r\n        if(callback){\r\n          this.callback = callback;\r\n        }\r\n     }\r\n   }\r\n\r\n   pause(){\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n   }\r\n\r\n   resume(wallet,spec,callback){\r\n     this.start(wallet,spec,callback || this.callback)\r\n   }\r\n\r\n   \r\n\r\n\r\n \r\n}","import { getSpecification } from \"../lib/web3js/indexV2\";\r\n\r\nexport default class Contract {\r\n\r\n  async load(wallet,config){\r\n    if(!this.info || (this.info && config.pool !== this.info.pool)){\r\n      const info = await getSpecification(wallet.detail.chainid,config.pool)\r\n      this.setInfo(info);\r\n    }\r\n    return this.info\r\n  }\r\n\r\n  setInfo(info){\r\n    // if(info.status == \"fail\"){\r\n    //   info = {\r\n    //      bSymbol:'BUSD',\r\n    //      symbol:'BTCUSD',\r\n    //      multiplier:'0.0001',\r\n    //      fundingRateCoefficient:'0.0000025',\r\n    //      minInitialMarginRatio:0.1,\r\n    //      minMaintenanceMarginRatio:0.05,\r\n    //      feeRatio:0.0005,\r\n    //  }\r\n    // }\r\n    this.info = info;\r\n  }\r\n\r\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\r\n\r\n\r\nexport default class History {\r\n\r\n   async load(wallet,config){\r\n      if(wallet.detail.chainId && config && config.pool){\r\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account);    \r\n         return all;\r\n      } else {\r\n         return []\r\n      }\r\n   }\r\n}","import { makeObservable, observable, action } from \"mobx\";\r\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\r\n\r\nexport default class Config {\r\n  all = []\r\n\r\n  constructor(){\r\n    makeObservable(this,{\r\n      all : observable,\r\n      setAll : action\r\n    })\r\n  }\r\n\r\n  async load(){\r\n    const configs = await getContractAddressConfig(DeriEnv.get())\r\n    this.setAll(configs)\r\n    return configs;\r\n  }\r\n\r\n  setAll(all){\r\n    this.all = all;\r\n  }\r\n  \r\n}","import { observable, action, computed, makeObservable } from \"mobx\";\r\nimport Oracle from \"./Oracle\";\r\nimport Position from \"./Position\";\r\nimport Contract from \"./Contract\";\r\nimport History from './History'\r\nimport Config from \"./Config\";\r\nimport { eqInNumber } from \"../utils/utils\";\r\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\r\n\r\n/**\r\n * 交易模型\r\n * 关联对象\r\n * 1. chain\r\n * 2. Oracle\r\n * 3. position\r\n * 4. contract\r\n * 5. history\r\n * 计算\r\n * 1. dynamic balance\r\n * 2. available blance\r\n * 响应事件\r\n * 1. chain change\r\n * 2. chain’s symbol changed\r\n * 3. index update\r\n * 4. volum change\r\n * 5. margin change\r\n * 输出\r\n * 1. dynamic balance\r\n * 2. margin\r\n * 3. available balance\r\n * 4. volume\r\n * 5. specs\r\n * 6. spec\r\n * 7. position\r\n * 8. contract\r\n * 9. fundingRate\r\n */\r\n\r\nexport default class Trading {\r\n  wallet = null;\r\n  configs = [] \r\n  config = null;\r\n  fundingRate = '--' \r\n  index = null\r\n  volume = ''\r\n  paused = false\r\n  margin = ''\r\n  position = {}\r\n  contract = {}\r\n  fundingRate = {}\r\n  history = []\r\n  userSelectedDirection = 'long'\r\n\r\n  constructor(){\r\n    makeObservable(this,{\r\n      index : observable,\r\n      volume : observable,\r\n      margin : observable,\r\n      fundingRate : observable,\r\n      position : observable,\r\n      history : observable,\r\n      contract : observable,\r\n      paused : observable,\r\n      userSelectedDirection : observable,\r\n      setWallet :action,\r\n      setConfigs : action,\r\n      setConfig : action,\r\n      setIndex : action,\r\n      setContract : action,\r\n      setPosition : action,\r\n      setVolume : action,\r\n      setUserSelectedDirection : action,\r\n      setFundingRate : action,\r\n      setHistory : action,\r\n      setPaused : action,\r\n      amount : computed,\r\n      fundingRateTip : computed,\r\n      direction : computed,\r\n      volumeDisplay : computed\r\n    })\r\n    this.configInfo = new Config();\r\n    this.oracle = new Oracle();\r\n    this.positionInfo = new Position()\r\n    this.contractInfo = new Contract();\r\n    this.historyInfo = new History()\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  async init(wallet){\r\n    if(!this.wallet || wallet.detail.account !== this.wallet.detail.account){\r\n      this.setWallet(wallet);\r\n      //配置信息，如chainId、pool address、symbol、baseToken等\r\n      const all = await this.configInfo.load();\r\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\r\n      const defaultConfig = this.getDefaultConfig(this.configs,wallet);\r\n      this.setConfig(defaultConfig);\r\n      this.onConfigChange(this.wallet,this.config,true)\r\n    }\r\n    this.setVolume('')\r\n  }\r\n\r\n  async switch(spec){\r\n    const cur = this.configs.find(config => config.pool === spec.pool)\r\n    const changed = !this.config || spec.pool !== this.config.pool\r\n    if(cur){\r\n      this.setConfig(cur)\r\n      this.pause();\r\n      this.onConfigChange(this.wallet,cur,changed);  \r\n      if(changed){\r\n        this.store(cur)\r\n      }    \r\n      this.resume()\r\n      this.setVolume('')\r\n    }\r\n  }\r\n\r\n  async onConfigChange(wallet,config,symbolChanged){\r\n     //position\r\n     this.positionInfo.load(wallet,config,position => {       \r\n        this.setPosition(position);\r\n     })\r\n\r\n     //切换指数\r\n    if(symbolChanged){\r\n      this.oracle.unsubscribeBars();\r\n      this.oracle.addListener('trading',data => {\r\n        this.setIndex(data.close)\r\n      })\r\n      this.oracle.load(config.symbol)\r\n    }\r\n     //contract\r\n     const contract = await this.contractInfo.load(wallet,config)\r\n     this.setContract(contract)\r\n\r\n     //funding rate\r\n     const fundingRate = await this.loadFundingRate(wallet,config)\r\n     this.setFundingRate(fundingRate)\r\n\r\n     //history\r\n     const history = await this.historyInfo.load(wallet,config);\r\n     this.setHistory(history);\r\n  }\r\n\r\n\r\n  getDefaultConfig(all = [],wallet){\r\n    //优先使用session storage 的\r\n    if(all.length > 0){    \r\n      const fromStore = this.getFromStore();\r\n      if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\r\n        return fromStore;\r\n      } else {\r\n        return all[0]\r\n      }\r\n    }\r\n    return {}    \r\n  }\r\n\r\n  //存起来\r\n  store(config){\r\n    if(config){\r\n      sessionStorage.setItem('current-trading-pool',JSON.stringify(config))\r\n    }\r\n  }\r\n\r\n  getFromStore(){\r\n    return JSON.parse(sessionStorage.getItem('current-trading-pool'))\r\n  }\r\n\r\n  async refresh(){\r\n    this.pause()\r\n    const position = await this.positionInfo.load(this.wallet,this.config);\r\n    this.setPosition(position)\r\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\r\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)\r\n    this.setFundingRate(fundingRate)\r\n    const history = await this.historyInfo.load(this.wallet,this.config)\r\n    if(history){\r\n      this.setHistory(history)\r\n    }\r\n    this.setVolume('')\r\n    this.resume();\r\n  }\r\n\r\n  /**\r\n   * 暂停实时读取index和定时读取position\r\n   */\r\n  pause(){\r\n    this.setPaused(true)\r\n    this.oracle.pause();\r\n    this.positionInfo.pause();\r\n  }\r\n\r\n  /**\r\n   * 恢复读取\r\n   */\r\n  resume(){\r\n    this.setPaused(false)\r\n    this.oracle.resume();\r\n    this.positionInfo.resume(this.wallet,this.config);\r\n  }\r\n\r\n  setWallet(wallet){\r\n    this.wallet = wallet;\r\n  }\r\n\r\n  setConfigs(configs){\r\n    this.configs = configs\r\n  }\r\n\r\n  setConfig(config){\r\n    // if(!config.pool){\r\n    //   config ={\r\n    //     bTokenSymbol: 'BUSD',\r\n    //     symbol: 'BTCUSD',\r\n    //     unit: 'BTC',\r\n    //     chainId: '56',\r\n    //   }\r\n    // }\r\n    this.config = config\r\n  }\r\n\r\n  setIndex(index){\r\n    this.index = index;\r\n  }\r\n\r\n  setPosition(position){\r\n    if(position){\r\n      this.position = position\r\n    }\r\n  }\r\n\r\n  setContract(contract){\r\n    this.contract = contract\r\n  }\r\n\r\n  setHistory(history){\r\n    this.history = history\r\n  }\r\n\r\n  setFundingRate(fundingRate){\r\n    this.fundingRate = fundingRate;\r\n  }\r\n\r\n  setVolume(volume){\r\n    this.volume = volume;\r\n  }\r\n\r\n  setPaused(paused){\r\n    this.paused = paused\r\n  }\r\n\r\n  setUserSelectedDirection(direction){\r\n    this.userSelectedDirection = direction\r\n  }\r\n\r\n  setMargin(margin){\r\n    this.margin = margin\r\n    if(this.contract){\r\n      const volume = (+margin) / ((+this.index) * (+this.contract.multiplier) * (+this.contract.minInitialMarginRatio))      \r\n      if(!isNaN(volume)){\r\n        this.setVolume(Math.abs(volume))\r\n        console.log('volume ',volume)\r\n      }\r\n    }\r\n  }\r\n\r\n  get volumeDisplay(){\r\n    if(this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\r\n      return '';\r\n    } else if(this.margin !== '') {\r\n        if((+this.volume) > Math.abs(+this.position.volume)) {\r\n          const result = parseInt(Math.abs(this.volume) - Math.abs(this.position.volume))\r\n          return result\r\n        } else {\r\n          const result = parseInt(Math.abs(this.position.volume) - Math.abs(this.volume));          \r\n          return result\r\n        }\r\n    } else {\r\n      return this.volume\r\n    }\r\n  }\r\n\r\n  \r\n  //计算available balance、contract value、\r\n  get amount(){\r\n    if(this.index && this.position && this.contract && this.volume !== ''){\r\n      //合同价值\r\n      let curVolume = Math.abs(this.volume);\r\n      const originVolume = Math.abs(this.volumeDisplay);\r\n      //如果不是通过marge 算出来的volume\r\n      if(this.margin === '') {       \r\n        if(this.userSelectedDirection === 'long') {\r\n          if((+this.position.volume) > 0) {\r\n            curVolume = curVolume + (+this.position.volume)\r\n          } else {\r\n            curVolume = Math.abs(this.position.volume) - curVolume\r\n          }         \r\n        } else {\r\n          if((+this.position.volume) > 0){\r\n            curVolume =  (+this.position.volume) - curVolume\r\n          } else {\r\n            curVolume = Math.abs(this.position.volume) + (+curVolume)\r\n          }\r\n        }\r\n      }\r\n      const contractValue = Math.abs(curVolume) * this.index * this.contract.multiplier\r\n      const dynBalance = (+this.position.margin) + (+this.position.unrealizedPnl)\r\n      const margin = contractValue * this.contract.minInitialMarginRatio\r\n      const leverage = (+contractValue / +dynBalance).toFixed(1);\r\n      const balance = ((+dynBalance) - (+margin)).toFixed(2)\r\n      const available = balance > 0 ? balance : 0\r\n      const exchanged = (originVolume * (+this.contract.multiplier)).toFixed(4)\r\n      return {\r\n        dynBalance, //动态余额\r\n        margin,         //存入保证金\r\n        available,      //可用余额\r\n        exchanged,      //换算的值\r\n        leverage,        //杠杆\r\n      }\r\n    } else if(this.position && this.position.margin){\r\n      const dynBalance = ((+this.position.margin) + (+this.position.unrealizedPnl)).toFixed(2)\r\n      const margin = (+this.position.marginHeld).toFixed(2)\r\n      const available = ((+dynBalance) - (+margin)).toFixed(2)\r\n      return {\r\n        dynBalance,\r\n        margin,\r\n        available,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  get direction(){    \r\n    // 正仓\r\n    if(this.margin !== ''){\r\n      if((+this.position.volume) > 0) {\r\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\r\n          return 'long'\r\n        } else {\r\n          return 'short'\r\n        }\r\n      } else if((+this.position.volume) < 0){\r\n        //负仓\r\n        if((+this.volume) > Math.abs(+this.position.volume)){\r\n          return 'short'\r\n        } else {\r\n          return 'long'\r\n        }\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  //资金费率\r\n  async loadFundingRate(wallet,config){\r\n    if(wallet && config){\r\n      // if(!config.pool){\r\n      //   config.pool = '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985'\r\n      // }    \r\n      const res = await getFundingRate(wallet.detail.chainId,config.pool)\r\n      return res;\r\n    }\r\n  }\r\n\r\n  get fundingRateTip(){\r\n    if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\r\n      return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\r\n      `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \r\n    }\r\n    return ''\r\n  }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter} from 'react-router-dom'\r\nimport App from './App';\r\nimport './assets/deri.less';\r\nimport { Provider } from 'mobx-react';\r\nimport Wallet from './model/Wallet';\r\n//note dont remove zhe line\r\nimport NumberPolyfill from './lib/polyfill/numberPolyfill'\r\nimport Trading from './model/Trading';\r\nimport { DeriEnv } from './lib/web3js/config';\r\n\r\nconst wallet = new Wallet();\r\nconst trading = new Trading()\r\n\r\nconsole.log(process.env)\r\nif(process.env.NODE_ENV === 'production') {\r\n  DeriEnv.set('prod')\r\n} \r\nDeriEnv.set('prod')\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider wallet={wallet}  trading={trading} >\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\r\nimport { getSlpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity info of SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.bTokenBalance\r\n * @returns {string} response.shares\r\n */\r\nexport const getSlpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\r\n      bToken.balance(poolAddress),\r\n      bToken.balance(accountAddress),\r\n      slpPool.getLiquidity(accountAddress),\r\n    ]);\r\n\r\n    return {\r\n      poolLiquidity: liquidity.toString(),\r\n      bTokenBalance: bTokenBalance.toString(),\r\n      shares: shares.toString(),\r\n    };\r\n  }\r\n  console.log('no SlpPool address, please check');\r\n  return {};\r\n};\r\n\r\n/**\r\n * Add liquidity to SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addSlpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    try {\r\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity to SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeSlpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    try {\r\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Unlock the account in the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get account balance in Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getSlpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  clpPoolFactory,\r\n  lTokenFactory,\r\n} from '../factory/contracts';\r\nimport { bg, getClpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity Info of the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.totalSupply\r\n * @returns {string} response.poolLiquidity\r\n * @returns {string} response.shares\r\n * @returns {string} response.shareValue\r\n * @returns {string} response.maxRemovableShares\r\n */\r\nexport const getClpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const clpPool = clpPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const { liquidity } = await clpPool.getStateValues();\r\n  //console.log(liquidity);\r\n\r\n  return {\r\n    totalSupply: lTokenTotalSupply.toString(),\r\n    poolLiquidity: liquidity.toString(),\r\n    shares: lTokenBalance.toString(),\r\n    shareValue: (lTokenTotalSupply.eq(0)\r\n      ? bg(0)\r\n      : liquidity.div(lTokenTotalSupply)\r\n    ).toString(),\r\n    maxRemovableShares: lTokenBalance.toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Add liquidity to the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addClpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clpPool = clpPoolFactory(chainId, poolAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\r\n      console.log(tx, typeof tx);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity of the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeClpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clpPool = clpPoolFactory(chainId, poolAddress);\r\n    try {\r\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Unlock the account in the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get account balance in Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getClpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\r\nimport { getClp2ContractAddress } from '../utils';\r\n\r\nexport const getClp2LiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\r\n      bToken.balance(poolAddress),\r\n      bToken.balance(accountAddress),\r\n      clp2Pool.getLiquidity(accountAddress),\r\n    ]);\r\n\r\n    return {\r\n      poolLiquidity: liquidity.toString(),\r\n      bTokenBalance: bTokenBalance.toString(),\r\n      shares: shares.toString(),\r\n    };\r\n  }\r\n  console.log('no Clp2Pool address, please check');\r\n  return {};\r\n};\r\n\r\nexport const addClp2Liquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const removeClp2Liquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const getClp2WalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\r\nimport {\r\n  toChecksumAddress,\r\n  getNetworkName,\r\n  deriToString,\r\n  deriToBool,\r\n  deriToNatural,\r\n  getPoolContractAddress,\r\n} from '../utils';\r\n// import { getLiquidityUsed } from \"./contractApi\";\r\n\r\nexport const getUserInfo = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.chainId`,\r\n      `${userAddress}.claim.amount`,\r\n      `${userAddress}.claim.deadline`,\r\n      `${userAddress}.claim.nonce`,\r\n      `${userAddress}.claim.v`,\r\n      `${userAddress}.claim.r`,\r\n      `${userAddress}.claim.s`,\r\n      `${userAddress}.claim.valid`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfo', err));\r\n  if (res) {\r\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\r\n    return {\r\n      chainId: deriToString(chainId),\r\n      amount: deriToNatural(amount).toString(),\r\n      deadline: deriToString(deadline),\r\n      nonce: deriToString(nonce),\r\n      v: deriToString(v),\r\n      r,\r\n      s,\r\n      valid: deriToBool(valid),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserInfoHarvest = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.harvest.lp`,\r\n      `${userAddress}.claim.harvest.trade`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfoHarvest', err));\r\n  if (res) {\r\n    const [harvestLp, harvestTrade] = res;\r\n    return {\r\n      lp: deriToNatural(harvestLp).toString(),\r\n      trade: deriToNatural(harvestTrade).toString(),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserInfoTotal = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([`${userAddress}.claim.total`])\r\n    .catch((err) => console.log('getUserInfoTotal', err));\r\n  if (res) {\r\n    const [total] = res;\r\n    return {\r\n      total: deriToNatural(total).toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user claim info from database\r\n * @async\r\n * @method\r\n * @param {string} userAddress - account address\r\n * @returns {Object} response\r\n * @returns {string} resposne.chainId\r\n * @returns {BigNumber} response.amount\r\n * @returns {string} response.deadline\r\n * @returns {string} response.nonce\r\n * @returns {string} response.v\r\n * @returns {string} response.r\r\n * @returns {string} response.s\r\n * @returns {bool} response.valid\r\n * @returns {BigNumber} response.lp\r\n * @returns {BigNumber} response.trade\r\n * @returns {string} response.total\r\n */\r\nexport const getUserInfoAll = async (userAddress) => {\r\n  const userInfo = await getUserInfo(userAddress);\r\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\r\n  const userInfoTotal = await getUserInfoTotal(userAddress);\r\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\r\n};\r\n\r\n/**\r\n * Get pool liquidity\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {symbol} response.symbol\r\n */\r\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\r\n  // use the dev database\r\n  const db = databaseFactory();\r\n  try {\r\n    const res = await db\r\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\r\n      .catch((err) => console.log('getPoolLiquidity', err));\r\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\r\n    if (res) {\r\n      const [liquidity] = res;\r\n      return {\r\n        liquidity: deriToNatural(liquidity).toString(),\r\n        symbol,\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get pool apy\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\r\n  //console.log('getPoolInfoApy', chainId, poolAddress);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get apy of the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.apy2`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, apy2, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        apy2: deriToNatural(apy2).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get apy of the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\r\n//   const db = databaseFactory(true);\r\n//   try {\r\n//     const poolNetwork = getNetworkName(chainId);\r\n//     const res = await db\r\n//       .getValues([\r\n//         `${poolNetwork}.${poolAddress}.apy`,\r\n//         `${poolNetwork}.${poolAddress}.apy2`,\r\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\r\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\r\n//       ])\r\n//       .catch((err) => console.log('getPoolInfoApy', err));\r\n//     if (res) {\r\n//       const [apy, apy2, volume1h, volume24h] = res;\r\n//       return {\r\n//         apy: deriToNatural(apy).toString(),\r\n//         apy2: deriToNatural(apy2).toString(),\r\n//         volume1h: deriToNatural(volume1h).toString(),\r\n//         volume24h: deriToNatural(volume24h).toString(),\r\n//       };\r\n//     }\r\n//   } catch (err) {\r\n//     console.log(err);\r\n//   }\r\n// };\r\n\r\n/**\r\n * Get user info of the pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} userAddress\r\n * @returns {Object} response\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\r\n  const db = databaseFactory(true);\r\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getUserInfoInPool', err));\r\n    if (res) {\r\n      const [volume1h, volume24h] = res;\r\n      return {\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\r\n  const db = databaseAirdropFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.chainId`,\r\n      `${userAddress}.claim.amount`,\r\n      `${userAddress}.claim.deadline`,\r\n      `${userAddress}.claim.nonce`,\r\n      `${userAddress}.claim.v1`,\r\n      `${userAddress}.claim.r1`,\r\n      `${userAddress}.claim.s1`,\r\n      `${userAddress}.claim.v2`,\r\n      `${userAddress}.claim.r2`,\r\n      `${userAddress}.claim.s2`,\r\n      `${userAddress}.claim.valid`,\r\n      // `${userAddress}.claim.harvest.lp`,\r\n      // `${userAddress}.claim.harvest.trade`,\r\n      // `${userAddress}.claim.total`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\r\n  if (res) {\r\n    const [\r\n      chainId,\r\n      amount,\r\n      deadline,\r\n      nonce,\r\n      v1,\r\n      r1,\r\n      s1,\r\n      v2,\r\n      r2,\r\n      s2,\r\n      valid,\r\n      // harvestLp,\r\n      // harvestTrade,\r\n      // total,\r\n    ] = res;\r\n    return {\r\n      chainId: deriToString(chainId),\r\n      amount: deriToNatural(amount).toString(),\r\n      deadline: deriToString(deadline),\r\n      nonce: deriToString(nonce),\r\n      v1: deriToString(v1),\r\n      r1,\r\n      s1,\r\n      v2: deriToString(v2),\r\n      r2,\r\n      s2,\r\n      valid: deriToBool(valid),\r\n      // lp: deriToNatural(harvestLp),\r\n      // trade: deriToNatural(harvestTrade),\r\n      // total: deriToString(total),\r\n    };\r\n  }\r\n};\r\n","import Web3 from 'web3';\r\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\r\n\r\nconst MAX_GAS_AMOUNT = 532731;\r\n\r\nexport class Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    this.chainId = chainId;\r\n    this.contractAddress = contractAddress;\r\n    if (isProvider) {\r\n      this.web3 = web3Factory(chainId);\r\n    } else {\r\n      this.web3 = metaMaskWeb3();\r\n    }\r\n  }\r\n  setAccount(accountAddress) {\r\n    this.accountAddress = accountAddress;\r\n    return this;\r\n  }\r\n  setPool(poolAddress) {\r\n    this.poolAddress = poolAddress;\r\n    return this;\r\n  }\r\n  async _call(method, args = []) {\r\n    return await this.contract.methods[method](...args).call();\r\n  }\r\n\r\n  async _estimatedGas(method, args = [], accountAddress) {\r\n    let gas = 0;\r\n    for (let i = 0; i < 20; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (err) {\r\n        //console.log(\"err\", err);\r\n      }\r\n    }\r\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\r\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\r\n    return gas;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt === null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _transact(method, args, accountAddress) {\r\n    const [gas, gasPrice] = await Promise.all([\r\n      this._estimatedGas(method, args, accountAddress),\r\n      this.web3.eth.getGasPrice(),\r\n    ]);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods[method](...args).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\nimport {\r\n  hasInvalidArgsValue,\r\n  getBTCUSDPrice,\r\n  getOracleInfo,\r\n  deriToNatural,\r\n  bg,\r\n} from '../utils';\r\nimport {\r\n  calculateFundingRate,\r\n  calculateLiquidityUsed,\r\n  processFundingRate,\r\n} from '../calculation';\r\n\r\n/* eslint-disable */\r\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class PerpetualPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\r\n  }\r\n\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async getStateValues() {\r\n    let result;\r\n    const defaultValue = bg(0);\r\n    try {\r\n      const res = await this._call('getStateValues');\r\n      //console.log(\"getStateValues() raw:\", res)\r\n      result = {\r\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\r\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\r\n        liquidity: deriToNatural(res.liquidity),\r\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\r\n        tradersNetCost: deriToNatural(res.tradersNetCost),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        cumuFundingRate: defaultValue,\r\n        cumuFundingRateBlock: defaultValue,\r\n        liquidity: defaultValue,\r\n        tradersNetCost: defaultValue,\r\n        tradersNetVolume: defaultValue,\r\n      };\r\n      console.log(`getStateValues: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async getParameters() {\r\n    let result;\r\n    const defaultValue = bg(0);\r\n    try {\r\n      const res = await this._call('getParameters');\r\n      // console.log(\"getParameters() raw: \", res)\r\n      result = {\r\n        multiplier: deriToNatural(res.multiplier),\r\n        feeRatio: deriToNatural(res.feeRatio),\r\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\r\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\r\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\r\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\r\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\r\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\r\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\r\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\r\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\r\n        priceDelayAllowance: bg(res.priceDelayAllowance),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        multiplier: defaultValue,\r\n        feeRatio: defaultValue,\r\n        minPoolMarginRatio: defaultValue,\r\n        minInitialMarginRatio: defaultValue,\r\n        minMaintenanceMarginRatio: defaultValue,\r\n        minAddLiquidity: defaultValue,\r\n        redemptionFeeRatio: defaultValue,\r\n        fundingRateCoefficient: defaultValue,\r\n        minLiquidationReward: defaultValue,\r\n        maxLiquidationReward: defaultValue,\r\n        liquidationCutRatio: defaultValue,\r\n        priceDelayAllowance: defaultValue,\r\n      };\r\n      console.log(`getParameters: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt == null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _estimatedGas(method, args, accountAddress) {\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    let gas = 0;\r\n    for (let i = 0; i < 20; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (err) {\r\n        //console.log(\"err\", err);\r\n      }\r\n    }\r\n    if (gas == 0) gas = 532731;\r\n    if (gas > 532731) gas = 532731;\r\n    return gas;\r\n  }\r\n\r\n  async _transactPool(method, args = [], accountAddress) {\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\r\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\r\n\r\n    const [gas, gasPrice] = await Promise.all([\r\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\r\n      this.web3.eth.getGasPrice(),\r\n    ]);\r\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\r\n\r\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n\r\n  async getFundingRate() {\r\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\r\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\r\n    try {\r\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\r\n      const {\r\n        multiplier,\r\n        fundingRateCoefficient,\r\n        minPoolMarginRatio,\r\n      } = await this.getParameters();\r\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\r\n      const args1 = [\r\n        tradersNetVolume,\r\n        price,\r\n        multiplier,\r\n        liquidity,\r\n        fundingRateCoefficient,\r\n      ];\r\n      if (hasInvalidArgsValue(...args1)) {\r\n        fundingRate = '0';\r\n        fundingRatePerBlock = '0';\r\n      } else {\r\n        fundingRatePerBlock = calculateFundingRate(...args1);\r\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\r\n      }\r\n      const args2 = [\r\n        tradersNetVolume,\r\n        price,\r\n        multiplier,\r\n        liquidity,\r\n        minPoolMarginRatio,\r\n      ];\r\n      if (hasInvalidArgsValue(...args2)) {\r\n        liquidityUsed = '0';\r\n      } else {\r\n        liquidityUsed = calculateLiquidityUsed(...args2);\r\n      }\r\n      return {\r\n        price,\r\n        multiplier: multiplier.toString(),\r\n        fundingRate: fundingRate,\r\n        fundingRatePerBlock: fundingRatePerBlock,\r\n        tradersNetVolume: tradersNetVolume.toString(),\r\n        liquidity: liquidity.toString(),\r\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n        liquidityUsed: liquidityUsed,\r\n        poolMarginRatio: minPoolMarginRatio.toString(),\r\n      };\r\n    } catch (err) {\r\n      console.log('PerpetualPool#gerFundingRate():', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  async depositMargin(accountAddress, amount) {\r\n    //await this.web3.eth.getAccounts(console.log)\r\n    console.log('depositMargin');\r\n    let res;\r\n    try {\r\n      let tx = await this._transactPool(\r\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [amount],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      console.log('here');\r\n      res = { success: false, error: err };\r\n    }\r\n    return res;\r\n  }\r\n  async _getBlockInfo(blockNumber) {\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\r\n    let events = [];\r\n    //let toBlock = await this._getBlockInfo(\"latest\");\r\n    //toBlock = toBlock.number;\r\n    let amount;\r\n    if (this.chainId === '56') {\r\n      amount = 1999;\r\n    } else {\r\n      amount = 4999;\r\n    }\r\n    if (fromBlock + amount > to) {\r\n      amount = to - fromBlock;\r\n    }\r\n    while (fromBlock <= to) {\r\n      //console.log('tick')\r\n      let es = await this.contract.getPastEvents(eventName, {\r\n        filter: filter,\r\n        fromBlock,\r\n        toBlock: fromBlock + amount,\r\n      });\r\n      for (let e of es) {\r\n        events.push(e);\r\n      }\r\n      fromBlock += amount + 1;\r\n      if (fromBlock + amount > to) {\r\n        amount = to - fromBlock;\r\n      }\r\n    }\r\n    return events;\r\n  }\r\n  async _getTimeStamp(blockNumber) {\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  _calculateFee(volume, price, multiplier, feeRatio) {\r\n    return bg(volume)\r\n      .abs()\r\n      .times(price)\r\n      .times(multiplier)\r\n      .times(feeRatio)\r\n      .toString();\r\n  }\r\n}\r\n","import { Contract } from './contract';\r\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\r\n/* eslint-enable */\r\n\r\nexport class BTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async isUnlocked(accountAddress) {\r\n    let allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      this.poolAddress,\r\n    ]);\r\n    allowance = deriToNatural(allowance);\r\n    return allowance.gt(0);\r\n  }\r\n\r\n  async unlock(accountAddress) {\r\n    return await this._transact(\r\n      'approve',\r\n      [this.poolAddress, MAX_VALUE],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n  async _balance(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balance(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balance(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n\r\n  // for slp pool use\r\n  // async balanceOf(poolAddress) {\r\n  //   //const res = await this._call('balanceOf', [poolAddress])\r\n  //   let result\r\n  //   const [res, decimals] = await Promise.all([\r\n  //     this._balance(this.poolAddress),\r\n  //     this.decimals(),\r\n  //   ])\r\n  //   result = bg(res, -decimals)\r\n  //   return result\r\n  // }\r\n}\r\n","import { deriToNatural, bg } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class PTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async getPositionInfo(accountAddress) {\r\n    let result = {};\r\n    try {\r\n      const res = await this._call('getPosition(address)', [accountAddress]);\r\n      //console.log(\"getPositionInfo() raw:\", res)\r\n      result = {\r\n        volume: deriToNatural(res[0]),\r\n        cost: deriToNatural(res[1]),\r\n        lastCumuFundingRate: deriToNatural(res[2]),\r\n        margin: deriToNatural(res[3]),\r\n        lastUpdateTimestamp: bg(res[4]),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        volume: bg(0),\r\n        cost: bg(0),\r\n        lastCumuFundingRate: bg(0),\r\n        margin: bg(0),\r\n        lastUpdateTimestamp: bg(0),\r\n      };\r\n      console.log(`getPositionInfo: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async exists(accountAddress) {\r\n    return await this._call('exists', [accountAddress]);\r\n  }\r\n}\r\n","import { deriToNatural } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class LTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async balance(accountAddress) {\r\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\r\n    //console.log(\"> lToken balance\", res.toString())\r\n    return res;\r\n  }\r\n\r\n  async totalSupply() {\r\n    const res = deriToNatural(await this._call('totalSupply'));\r\n    //console.log(\"> lToken totalSupply\", res.toString())\r\n    return res;\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { getDBProviderUrlsConfig } from '../config/database';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      DB_CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async getValues(keyArray) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods.getValues(keyArray).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import { getDBProviderUrlsConfig } from '../config/database';\r\nimport Web3 from 'web3';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseWormholeContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async signature(accountAddress) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods['signature'](accountAddress).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import { getDBProviderUrlsConfig } from '../config/database';\r\nimport Web3 from 'web3';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseAirdropContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async getValues(keyArray) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods.getValues(keyArray).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\r\n/* eslint-enable */\r\n\r\nexport class MiningVaultPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI['abi'],\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async mintDToken(accountAddress, ...args) {\r\n    //return this._transact('claim', args)\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    const gas = await this._estimatedGas(\r\n      'claim',\r\n      [accountAddress, ...args],\r\n      accountAddress\r\n    );\r\n    console.log(gas);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods['claim'](\r\n          accountAddress,\r\n          ...args\r\n        ).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class MiningVaultRouter extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async mint(accountAddress, ...args) {\r\n    //console.log(accountAddress, args)\r\n    const gas = await this._estimatedGas(\r\n      'claim',\r\n      [accountAddress, ...args],\r\n      accountAddress\r\n    );\r\n    //console.log(gas);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods['claim'](\r\n          accountAddress,\r\n          ...args\r\n        ).encodeABI(),\r\n      },\r\n    ];\r\n    //console.log('txRaw', txRaw)\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class SlpPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [152, naturalToDeri(amount)];\r\n    return await this._transact('deposit', args, accountAddress);\r\n  }\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [152, naturalToDeri(amount)];\r\n    return await this._transact('withdraw', args, accountAddress);\r\n  }\r\n  async getLiquidity(accountAddress) {\r\n    const res = await this._call('userInfo', [152, accountAddress]);\r\n    if (res && res.amount) {\r\n      return deriToNatural(res.amount);\r\n    } else {\r\n      console.log('the amount is not exist ');\r\n      return '0';\r\n    }\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class ClpPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [naturalToDeri(amount)];\r\n    return await this._transact('addLiquidity', args, accountAddress);\r\n  }\r\n\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [naturalToDeri(amount)];\r\n    return await this._transact('removeLiquidity', args, accountAddress);\r\n  }\r\n\r\n  async getParameters() {\r\n    const res = await this._call('getParameters');\r\n    return {\r\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\r\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\r\n    };\r\n  }\r\n\r\n  async getStateValues() {\r\n    const res = await this._call('getStateValues');\r\n    return {\r\n      liquidity: deriToNatural(res),\r\n    };\r\n  }\r\n\r\n  async getLiquidity() {\r\n    const res = await this._call('getStateValues');\r\n    if (res && res.liquidity) {\r\n      return deriToNatural(res.liquidity);\r\n    }\r\n    throw new Error(\r\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\r\n    );\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class Clp2Pool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [391, naturalToDeri(amount)];\r\n    return await this._transact('deposit', args, accountAddress);\r\n  }\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [391, naturalToDeri(amount)];\r\n    return await this._transact('withdraw', args, accountAddress);\r\n  }\r\n  async getLiquidity(accountAddress) {\r\n    //console.log('hit clp2')\r\n    const res = await this._call('userInfo', [391, accountAddress]);\r\n    if (res && res.amount) {\r\n      return deriToNatural(res.amount);\r\n    } else {\r\n      console.log('the amount is not exist ');\r\n      return '0';\r\n    }\r\n  }\r\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DeriContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\r\n    super(chainId, contractAddress, useProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async isUnlocked(accountAddress) {\r\n    let allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      this.poolAddress,\r\n    ]);\r\n    return deriToNatural(allowance).gt(0);\r\n  }\r\n  async unlock(accountAddress) {\r\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\r\n    return await this._transact(\r\n      'approve',\r\n      [this.poolAddress, MAX_VALUE],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n\r\n  async _balance(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balance(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balance(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n}\r\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class WormholeContract extends Contract {\r\n  constructor(chainId, contractAddress, useProvider) {\r\n    super(chainId, contractAddress, useProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async freeze(accountAddress, amount, toChainId) {\r\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\r\n      toChainId\r\n    );\r\n    return this._transact(\r\n      'freeze',\r\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async mintDeri(\r\n    accountAddress,\r\n    amount,\r\n    fromChainId,\r\n    fromWormhole,\r\n    fromNonce,\r\n    v,\r\n    r,\r\n    s\r\n  ) {\r\n    return this._transact(\r\n      'claim',\r\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\r\n      accountAddress\r\n    );\r\n  }\r\n}\r\n","import { PerpetualPool } from '../contract/perpetual_pool';\r\nimport { BTokenContract } from '../contract/bToken';\r\nimport { PTokenContract } from '../contract/pToken';\r\nimport { LTokenContract } from '../contract/lToken';\r\nimport { DatabaseContract } from '../contract/database';\r\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\r\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\r\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\r\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\r\n\r\nimport { DeriEnv } from '../config/env';\r\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\r\nimport { SlpPool } from '../contract/slp_pool';\r\nimport { ClpPool } from '../contract/clp_pool';\r\nimport { Clp2Pool } from '../contract/clp2_pool';\r\nimport { DeriContract } from '../contract/deri';\r\nimport { WormholeContract } from '../contract/wormhole';\r\nimport { getLpContractAddress } from '../utils';\r\n// import { getPoolBaseSymbolList } from '../utils'\r\n\r\nexport const databaseFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const databaseWormholeFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseWormholeContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const databaseAirdropFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    //console.log('---airdrop key', key)\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseAirdropContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const perpetualPoolFactory = (() => {\r\n  const perpetualPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\r\n      return perpetualPoolInstanceMap[key];\r\n    }\r\n    const perpetualPool = new PerpetualPool(\r\n      chainId,\r\n      contractAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new PerpetualPoolContract\");\r\n    perpetualPoolInstanceMap[key] = perpetualPool;\r\n    return perpetualPool;\r\n  };\r\n})();\r\n\r\nexport const bTokenFactory = (function () {\r\n  const bTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\r\n      return bTokenInstanceMap[key];\r\n    }\r\n    const bToken = new BTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new BTokenContract\")\r\n    bTokenInstanceMap[key] = bToken;\r\n    return bToken;\r\n  };\r\n})();\r\n\r\nexport const pTokenFactory = (function () {\r\n  const pTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\r\n      return pTokenInstanceMap[key];\r\n    }\r\n    const pToken = new PTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new PTokenContract\")\r\n    pTokenInstanceMap[key] = pToken;\r\n    return pToken;\r\n  };\r\n})();\r\n\r\nexport const lTokenFactory = (function () {\r\n  const lTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\r\n      return lTokenInstanceMap[key];\r\n    }\r\n    const lToken = new LTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new LTokenContract\")\r\n    lTokenInstanceMap[key] = lToken;\r\n    return lToken;\r\n  };\r\n})();\r\n\r\nexport const miningVaultPoolFactory = (function () {\r\n  const mVaultInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\r\n      return mVaultInstanceMap[key];\r\n    }\r\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\r\n    // console.log(\"new MiningValutPool\")\r\n    mVaultInstanceMap[key] = mVault;\r\n    return mVault;\r\n  };\r\n})();\r\n\r\nexport const slpPoolFactory = (function () {\r\n  const slpPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\r\n      return slpPoolInstanceMap[key];\r\n    }\r\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\r\n    slpPoolInstanceMap[key] = slpPool;\r\n    return slpPool;\r\n  };\r\n})();\r\n\r\nexport const clpPoolFactory = (function () {\r\n  const clpPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\r\n      return clpPoolInstanceMap[key];\r\n    }\r\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\r\n    clpPoolInstanceMap[key] = clpPool;\r\n    return clpPool;\r\n  };\r\n})();\r\n\r\nexport const clp2PoolFactory = (function () {\r\n  const clp2PoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\r\n      return clp2PoolInstanceMap[key];\r\n    }\r\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\r\n    clp2PoolInstanceMap[key] = clp2Pool;\r\n    return clp2Pool;\r\n  };\r\n})();\r\n\r\n// export const lpPoolFactory = (function () {\r\n//   const lpPoolInstanceMap = {};\r\n//   return (chainId, contractAddress, isProvider = false) => {\r\n//     let key;\r\n//     if (isProvider) {\r\n//       key = `${chainId}.${contractAddress}.isProvider`;\r\n//     } else {\r\n//       key = `${chainId}.${contractAddress}`;\r\n//     }\r\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\r\n//       return lpPoolInstanceMap[key];\r\n//     } else {\r\n//       let lpPool;\r\n//       const { type } = getLpContractAddress(chainId, contractAddress);\r\n//       console.log(`lp type: ${type}`);\r\n//       if (type === 'slp') {\r\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\r\n//       } else if (type === 'clp') {\r\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\r\n//       }\r\n//       lpPoolInstanceMap[key] = lpPool;\r\n//       return lpPool;\r\n//     }\r\n//   };\r\n// })();\r\n\r\nexport const deriFactory = (function () {\r\n  const deriInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(deriInstanceMap).includes(key)) {\r\n      return deriInstanceMap[key];\r\n    }\r\n    const deri = new DeriContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    deriInstanceMap[key] = deri;\r\n    return deri;\r\n  };\r\n})();\r\n\r\nexport const wormholeFactory = (function () {\r\n  const wormholeInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\r\n      return wormholeInstanceMap[key];\r\n    }\r\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\r\n    wormholeInstanceMap[key] = wormhole;\r\n    return wormhole;\r\n  };\r\n})();\r\n\r\nexport const miningVaultRouterFactory = (function () {\r\n  const mVaultInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\r\n      return mVaultInstanceMap[key];\r\n    }\r\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\r\n    mVaultInstanceMap[key] = mVault;\r\n    return mVault;\r\n  };\r\n})();\r\n","// export const DERI_ENV=\"dev\"\r\nexport const DeriEnv = (() => {\r\n  let _deriEnv = 'dev';\r\n  return {\r\n    get: () => _deriEnv,\r\n    set: (value) => {\r\n      if (value === 'dev' || value === 'prod' || value === 'production') {\r\n        _deriEnv = value;\r\n      } else {\r\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\r\n      }\r\n    },\r\n  };\r\n})();\r\n","\r\n\r\nimport BigNumber from 'bignumber.js'\r\nexport function bg(value, base = 0) {\r\n  if (base == 0) {\r\n    return BigNumber(value);\r\n  } else if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\r\n  } else {\r\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\r\n  }\r\n}\r\n\r\nexport function deriNatural(value) {\r\n  return bg(value, -18);\r\n}\r\n\r\nexport function formatAddress(address){\r\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\r\n}\r\n\r\nexport function formatBalance(balance){\r\n  return balance && (+balance).toFixed(4)\r\n}\r\n\r\nexport function eqInNumber(str1,str2){\r\n  return (+str1) === (+str2)\r\n}\r\n\r\nexport function isLP(address){\r\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\r\n}\r\nexport function isSushiLP(address){\r\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\r\n}\r\nexport function isCakeLP(address){\r\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\r\n}\r\n\r\n"],"sourceRoot":""}