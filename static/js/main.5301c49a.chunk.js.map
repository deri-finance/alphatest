{"version":3,"sources":["lib/web3js/utils.js","lib/web3js/factory/web3.js","utils/LoadableComponent.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/apiGlobals.js","lib/web3js/indexV2.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractQueryApi.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/config/database.js","lib/polyfill/numberPolyfill.js","App.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Config.js","model/Trading.js","index.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/api/databaseApi.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/config/env.js","utils/utils.js"],"names":["BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","Web3","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","i","isNaN","checkHttpServerIsAlive","url","a","fetch","ok","getAliveHttpServer","urls","length","Error","MAX_VALUE","getNetworkName","chainId","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","pool","getContractAddressConfig","DeriEnv","get","filter","c","p","bTokenAddress","bToken","pTokenAddress","pToken","lTokenAddress","lToken","dTokenAdress","dToken","MinningVaultAddress","MiningVault","bTokenSymbol","symbol","unit","initialBlock","console","log","getMiningVaultContractAddress","pools","getAnnualBlockNumber","blockNumbers","getAnnualBlockNumberConfig","parseInt","getSlpContractAddress","getSlpContractAddressConfig","getClpContractAddress","getClpContractAddressConfig","getLpContractAddress","getLpContractAddressConfig","type","getDeriContractAddress","getDeriContractAddressConfig","deriAddress","Deri","wormholeAddress","Wormhole","getOracleUrl","env","addSymbolParam","getOracleInfo","retry","res","json","getBTCUSDPrice","responseJson","price","getChainProviderUrl","getChainProviderUrlsConfig","format","bigNumber","toFormat","replaceAll","includes","metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","web3Factory","web3InstanceMap","Object","keys","providerUrl","providers","HttpProvider","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","provider_urls","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","1","56","128","3","97","256","getRestServerConfig","calculateLiquidityUsed","tradersNetVolume","multiplier","liquidity","poolMarginRatio","abs","calculateFundingRate","fundingRateCoefficient","processFundingRate","fundingRate","annualBlockCount","calculateShareValue","lTokenTotalSupply","eq","calculateMaxRemovableShares","lTokenBalance","tradersNetCost","minPoolMarginRatio","shareValue","removable","plus","minus","calculateEntryPrice","volume","cost","calculateMarginHeld","minInitialMarginRatio","calculatePnl","calculateMaxWithdrawMargin","margin","held","pnl","calculateLiquidationPrice","minMaintenanceMarginRatio","tmp","gt","isOrderValid","newVolume","amount","minMargin","poolMaxVolume","negated","success","message","connectWallet","handleChainChanged","handleAccountChanged","request","method","on","accounts","account","location","reload","error","getUserWalletBalance","walletAddress","eth","getBalance","balance","fromWei","getLpLiquidityInfo","accountAddress","getSlpLiquidityInfo","getClpLiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","unlockLp","unlockSlp","unlockClp","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","unlock","bTokenFactory","tx","transaction","depositMargin","pPool","perpetualPoolFactory","withdrawMargin","pTokenFactory","getPositionInfo","getParameters","maxWithdrawMargin","_transactPool","addLiquidity","removeLiquidity","shares","lTokenFactory","Promise","all","totalSupply","getStateValues","maxRemovableShares","tradeWithMargin","orderValidation","closePosition","mintDToken","getUserInfoAll","userInfo","deadline","nonce","v","r","s","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","fundingRateCache","resourceMap","contractAddress","key","set","resource","priceCache","_accountAddress","_price","_interval","_update","update","self","this","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","perpetualPool","wsInstance","_ws","ws","io","transports","path","id","err","getOrSet","processTradeEvent","info","blockNumber","txHash","feeRatio","tradeVolume","_getTimeStamp","timeStamp","direction","time","timestamp","transactionFee","_calculateFee","notional","baseToken","transactionHash","processLiquidateEvent","national","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","item","returnValues","unshift","getLiquidateHistoryOnline","getHttpBase","fetchJson","resp","getSpecification2","data","getLiquidityUsed2","getLiquidityInfo2","getWalletBalance2","getTradeHistory2","tradeFromBlock","tradeHistoryBlock","liquidateFromBlock","liquidateHistoryBlock","tradeHistory","map","trim","tradeHistoryOnline","liquidateHistoryOnline","concat","sort","b","averageEntryPrice","marginHeld","unrealizedPnl","liquidationPrice","isUnlocked","getEstimatedFee","parameters","getFundingRate","catch","getPoolInfoApy","poolInfo","fundingRatePerBlock","volume24h","fundingRate0","toExponential","getEstimatedFundingRate","newNetVolume","fundingRate1","getEstimatedLiquidityUsed","liquidityUsed1","wsOnPromise","event","resolve","reject","JSON","parse","sendTradeTxToWorkerQuene","methodCall","send","tradeWithMargin2","res2","closePosition2","depositMargin2","withdrawMargin2","addLiquidity2","removeLiquidity2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","Number","prototype","len","RangeError","Math","pow","round","numberArr","split","padNum","intNum","deciNum","lastNum","substr","changedInt","replace","num","dotPos","indexOf","need","j","DesktopApp","MobileApp","App","isBrowser","isMobile","Wallet","detail","isConnected","connect","loadWalletBalance","wallet","formatBalance","chainInfo","assign","supported","remove","sessionStorage","removeItem","makeAutoObservable","observable","action","Oracle","index","kData","paused","listeners","setIndex","initWebSocket","WebSocket","timeType","setSymbol","obj","toUpperCase","low","high","open","close","time_type","emit","listener","uid","bars","callback","history","el","setPause","Position","spec","position","interval","load","Contract","getSpecification","chainid","setInfo","History","getTradeHistory","Config","makeObservable","setAll","configs","Trading","contract","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setHistory","setPaused","computed","fundingRateTip","volumeDisplay","configInfo","oracle","positionInfo","contractInfo","historyInfo","eqInNumber","defaultConfig","getDefaultConfig","onConfigChange","cur","find","changed","pause","store","resume","symbolChanged","unsubscribeBars","addListener","loadFundingRate","fromStore","getFromStore","setItem","stringify","getItem","curVolume","originVolume","contractValue","dynBalance","leverage","available","exchanged","trading","process","ReactDOM","render","StrictMode","document","getElementById","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","poolLiquidity","clpPool","clpPoolFactory","getUserInfo","userAddress","db","databaseFactory","getValues","getUserInfoHarvest","harvestLp","harvestTrade","lp","trade","getUserInfoTotal","total","userInfoHarvest","userInfoTotal","getPoolLiquidity","apy","volume1h","getUserInfoInPool","getUserInfoAllForAirDrop","databaseAirdropFactory","v1","r1","s1","v2","r2","s2","MAX_GAS_AMOUNT","isProvider","methods","call","gas","estimateGas","from","_transactionReceipt","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","getGasPrice","txRaw","to","numberToHex","encodeABI","params","_getTransactionReceipt","POOL_ABI","PerpetualPool","_call","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","priceDelayAllowance","signed","gasPrice","args1","args2","liquidityUsed","getBlock","eventName","getPastEvents","es","e","push","CONTRACT_ABI","BTokenContract","allowance","_transact","address","_balance","decimals","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","_init","keyArray","updateProviderUrl","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","deriFactory","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","miningVaultRouterFactory","_deriEnv","formatAddress","str1","str2","isSushi"],"mappings":"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","file":"static/js/main.5301c49a.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport BigNumber from 'bignumber.js';\r\nimport {\r\n  DeriEnv,\r\n  getChainProviderUrlsConfig,\r\n  getContractAddressConfig,\r\n  getSlpContractAddressConfig,\r\n  getClpContractAddressConfig,\r\n  getLpContractAddressConfig,\r\n  getAnnualBlockNumberConfig,\r\n  getDeriContractAddressConfig,\r\n} from './config';\r\n\r\n/** @module utils */\r\n\r\nBigNumber.config({\r\n  DECIMAL_PLACES: 18,\r\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\r\n  EXPONENTIAL_AT: 256,\r\n});\r\n\r\nexport { BigNumber };\r\n\r\n/**\r\n * Change the value to BigNumber type\r\n * @func\r\n * @param {string|number} value - the number that need to changed to BigNumber type\r\n * @param {string} base - base of the number\r\n * @returns {BigNumber}\r\n */\r\nexport const bg = (value, base = 0) => {\r\n  if (base === 0) {\r\n    return BigNumber(value);\r\n  }\r\n  if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\r\n  }\r\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\r\n};\r\n\r\n/**\r\n * Get the max value\r\n * @func\r\n * @param {BigNumber} value1\r\n * @param {BigNumber} value2\r\n * @returns {BigNumber}\r\n */\r\nexport const max = (value1, value2) => {\r\n  if (value1.gte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\n/**\r\n * Get the min value\r\n * @func\r\n * @param {BigNumber} value1\r\n * @param {BigNumber} value2\r\n * @returns {BigNumber}\r\n */\r\nexport const min = (value1, value2) => {\r\n  if (value1.lte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\n/**\r\n * Convert the number to a fixed precision\r\n * @func\r\n * @param {string} value - the number that need to convert\r\n * @param {number} num - the number for method toFixed()\r\n * @returns {string}\r\n */\r\nexport const toNatural = (value, num = 0) =>\r\n  BigNumber(value).toFixed(num).toString();\r\n\r\nexport const toHex = (value) => Web3.utils.toHex(value);\r\n\r\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\r\n\r\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\r\n\r\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\r\n\r\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\r\n\r\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\r\n\r\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\r\n\r\nexport const hexToNaturalWithPercentage = (value) =>\r\n  `${bg(hexToNumberString(value), -18)\r\n    .sd(4)\r\n    .times(100)\r\n    .toFixed(4)\r\n    .toString()}%`;\r\n\r\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\r\n\r\nexport const naturalWithPercentage = (value) =>\r\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\r\n\r\nexport const deriToNatural = (value) => bg(value, -18);\r\n\r\nexport const deriToNaturalWithPercentage = (value) =>\r\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\r\n\r\nexport const deriToString = (value) => bg(value).toString();\r\n\r\nexport const deriToBool = (value) => {\r\n  if (bg(value).toNumber() === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const hasInvalidArgsValue = (...args) =>\r\n  args.some(\r\n    (i) =>\r\n      // console.log(bg(i))\r\n      isNaN(i.toString()) || i.toString() === '0'\r\n  );\r\n\r\n// language\r\nexport const isObject = (obj) => typeof obj === 'object';\r\n\r\nconst np = () => {}\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// fetchWithTimeout\r\nconst fetchWithTimeout = (url, delay=2000, options={}, onTimeout=np) => {\r\n  const timer = new Promise((resolve) => {\r\n    setTimeout(resolve, delay, {\r\n      timeout: true,\r\n    });\r\n  });\r\n  return Promise.race([fetch(url, options), timer]).then((response) => {\r\n    if (response.timeout) {\r\n      onTimeout();\r\n    }\r\n    return response;\r\n  });\r\n};\r\n\r\n// http\r\nexport const checkHttpServerIsAlive = async (url) => {\r\n  try {\r\n    //const response = await fetch(url);\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      return true;\r\n    }\r\n  } catch (err) {\r\n    //console.log(err);\r\n  }\r\n  return false;\r\n};\r\nexport const getAliveHttpServer = async (urls = []) => {\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i];\r\n    if (await checkHttpServerIsAlive(url)) {\r\n      return url;\r\n    }\r\n  }\r\n  throw new Error('No alive http server in urls', urls);\r\n};\r\n\r\n// ethereum chain\r\nexport const MAX_VALUE =\r\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\r\nexport const getNetworkName = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let poolNetwork;\r\n  switch (chainId) {\r\n    case '1':\r\n      poolNetwork = 'ethereum';\r\n      break;\r\n    case '56':\r\n      poolNetwork = 'bsc';\r\n      break;\r\n    case '128':\r\n      poolNetwork = 'heco';\r\n      break;\r\n    case '3':\r\n      poolNetwork = 'ropsten';\r\n      break;\r\n    case '42':\r\n      poolNetwork = 'kovan';\r\n      break;\r\n    case '97':\r\n      poolNetwork = 'bsctestnet';\r\n      break;\r\n    case '256':\r\n      poolNetwork = 'hecotestnet';\r\n      break;\r\n    default:\r\n      throw new Error('The networkId is not valid');\r\n  }\r\n  return poolNetwork;\r\n};\r\n\r\nexport const getWalletBalanceUnit = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let index;\r\n  const unitNetworkIdsMap = {\r\n    ETH: ['1', '3', '42'],\r\n    BNB: ['56', '97'],\r\n    HT: ['128', '256'],\r\n  };\r\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\r\n  for (let i = 0; i < networkIdsArray.length; i++) {\r\n    if (networkIdsArray[i].includes(chainId)) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n  if (index !== undefined) {\r\n    return Object.keys(unitNetworkIdsMap)[index];\r\n  }\r\n  if (chainId === '') {\r\n    return '';\r\n  }\r\n  throw new Error('Invalid Network:', chainId);\r\n};\r\n\r\nexport const getPoolBaseSymbolList = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let result = [];\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const { bTokenSymbol, symbol } = pools[i];\r\n    if (bTokenSymbol && symbol) {\r\n      result.push(`${symbol}/${bTokenSymbol}`);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const getPoolBaseTokenAddressObject = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let result = {};\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const { bTokenSymbol, symbol, pool } = pools[i];\r\n    const key = `${symbol}/${bTokenSymbol}`;\r\n    if (bTokenSymbol && symbol) {\r\n      result[key] = pool;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\r\n//   chainId = normalizeChainId(chainId);\r\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n//     (c) => c.chainId === chainId\r\n//   );\r\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\r\n//   if (pool.length > 0) {\r\n//     return [\r\n//       pool[0].pool,\r\n//       pool[0].bToken,\r\n//       pool[0].pToken,\r\n//       pool[0].lToken,\r\n//       pool[0].dToken,\r\n//       pool[0].MiningVault,\r\n//       pool[0].initialBlock,\r\n//     ];\r\n//   }\r\n//   console.log(\r\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\r\n//   );\r\n//   return [];\r\n// };\r\n\r\n// get config by poolAddress\r\nexport const getPoolContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  // console.log('pool', pool)\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n      bTokenSymbol: pool[0].bTokenSymbol,\r\n      symbol: pool[0].symbol,\r\n      unit: pool[0].unit,\r\n      initialBlock: pool[0].initialBlock,\r\n    };\r\n  }\r\n  console.log(\r\n    `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return [];\r\n};\r\n\r\nexport const getMiningVaultContractAddress = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  if (pools.length > 0) {\r\n    if (pools[0].MiningVault) {\r\n      return pools[0].MiningVault;\r\n    }\r\n  }\r\n};\r\n\r\n// export const getMiningVaultRouterContractAddress = (chainId) => {\r\n//   chainId = normalizeChainId(chainId);\r\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n//     (c) => c.chainId === chainId\r\n//   );\r\n//   if (pools.length > 0) {\r\n//     if (pools[0].MiningVaultRouter) {\r\n//       return pools[0].MiningVaultRouter;\r\n//     }\r\n//   }\r\n// };\r\n\r\nexport const getAnnualBlockNumber = (chainId) => {\r\n  const blockNumbers = getAnnualBlockNumberConfig();\r\n  if (blockNumbers[chainId]) {\r\n    return parseInt(blockNumbers[chainId]);\r\n  }\r\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\r\n};\r\n\r\nexport const getSlpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n    };\r\n  }\r\n  console.log(\r\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getClpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      lTokenAddress: pool[0].lToken,\r\n    };\r\n  }\r\n  console.log(\r\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getLpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      type: pool[0].type,\r\n    };\r\n  }\r\n  console.log(\r\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getDeriContractAddress = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  if (pool.length > 0) {\r\n    return {\r\n      deriAddress: pool[0].Deri,\r\n      wormholeAddress: pool[0].Wormhole,\r\n      bTokenSymbol: pool[0].bTokenSymbol,\r\n    };\r\n  }\r\n  console.log(\r\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getOracleUrl = (chainId, poolAddress) => {\r\n  const env = DeriEnv.get()\r\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\r\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    if (symbol) {\r\n      if (symbol !== 'BTCUSD') {\r\n        return addSymbolParam('https://oracle3.deri.finance/price', symbol);\r\n      } else {\r\n        return addSymbolParam('https://oracle.deri.finance/price', symbol);\r\n      }\r\n    }\r\n    return 'https://oracle.deri.finance/price';\r\n  } else {\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\r\n    }\r\n    // for test\r\n    return 'https://oracle2.deri.finance/price';\r\n  }\r\n};\r\n\r\nexport const getOracleInfo = async (chainId, poolAddress) => {\r\n  let url = getOracleUrl(chainId, poolAddress);\r\n  //console.log('oracle url', url);\r\n  let retry = 5;\r\n  //let timeout = 1000;\r\n  let res;\r\n  while (retry > 0) {\r\n    res = await fetch(url);\r\n    //if (res && !res.timeout) {\r\n    if (res) {\r\n      break;\r\n    }\r\n    //console.log('get oracle info timeout')\r\n    retry -= 1;\r\n    //timeout += 800;\r\n  }\r\n  if (retry === 0 && !res) {\r\n    throw new Error(`fetch oracle info error: exceed max retry(5).`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\r\n  try {\r\n    const responseJson = await getOracleInfo(chainId, poolAddress)\r\n    let price = responseJson.price\r\n    if (!price) {\r\n      price = '0';\r\n    }\r\n    return deriToNatural(responseJson.price).toString();\r\n  } catch (err) {\r\n    throw err\r\n  }\r\n};\r\nexport const getOraclePrice = getBTCUSDPrice;\r\n\r\nexport const getChainProviderUrl = async(chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const urls = getChainProviderUrlsConfig(chainId)\r\n  if (urls.length > 0) {\r\n    return await getAliveHttpServer(urls)\r\n  } else {\r\n    throw new Error(\r\n      `Cannot find the chain provider url with chainId: ${chainId}`\r\n    );\r\n  }\r\n};\r\n\r\nexport const format = (bigNumber) =>\r\n  bigNumber.toFormat().replaceAll(',', '').toString();\r\n\r\nexport const normalizeChainId = (chainId) => {\r\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256']\r\n  let res = chainId ? chainId.toString() : chainId;\r\n  if (chainId && chainIds.includes(res)) {\r\n    return res;\r\n  } else {\r\n    throw new Error(`invalid chainId: ${chainId}`)\r\n  }\r\n};\r\n\r\nexport const normalizeAddress = (address) => {\r\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\r\n    return Web3.utils.toChecksumAddress(address);\r\n  } else {\r\n    throw new Error(`invalid address: ${address}`)\r\n  }\r\n};","import Web3 from 'web3';\r\nimport { getChainProviderUrl } from '../utils';\r\n\r\nexport const metaMaskWeb3 = (function () {\r\n  let web3Instance = null;\r\n  return () => {\r\n    if (web3Instance !== null) {\r\n      return web3Instance;\r\n    }\r\n    let web3;\r\n    if (typeof window.ethereum !== undefined) {\r\n      web3 = new Web3(window.ethereum);\r\n    } else {\r\n      // console.log(\"Please install MetaMask first\")\r\n      throw new Error('Please install MetaMask first');\r\n    }\r\n    web3Instance = web3;\r\n    return web3;\r\n  };\r\n})();\r\n\r\nexport const web3Factory = (function () {\r\n  const web3InstanceMap = {};\r\n  return async(chainId) => {\r\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\r\n      return web3InstanceMap[chainId];\r\n    }\r\n    console.log(\r\n      `==== web3Factory(${chainId}), please caution the access limits ===`\r\n    );\r\n    const providerUrl = await getChainProviderUrl(chainId);\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\r\n    web3InstanceMap[chainId] = web3;\r\n    return web3;\r\n  };\r\n})();\r\n","import React from 'react'\r\nimport Loadable from 'react-loadable'\r\nimport NProgress from 'nprogress'\r\nimport 'nprogress/nprogress.css'\r\n\r\nclass LoadingPage extends React.Component {\r\n  //类似github页面加载的那个加载条\r\n  componentWillMount(){\r\n    NProgress.start()\r\n  }\r\n  componentWillUnmount(){\r\n    NProgress.done()\r\n  }\r\n  render () {\r\n    return (\r\n      <div/>\r\n    )\r\n  }\r\n}\r\n\r\nconst LoadableComponent = (component) => {\r\n  return Loadable({\r\n    loader: component,\r\n    loading: ()=><LoadingPage/>\r\n  })\r\n}\r\n\r\nexport default LoadableComponent","export const ChainProviderUrls = [\r\n  {\r\n    provider_urls: [\r\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '1',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://bsc-dataseed.binance.org',\r\n      'https://bsc-dataseed1.defibit.io/',\r\n      'https://bsc-dataseed1.ninicoin.io/',\r\n    ],\r\n    chainId: '56',\r\n  },\r\n  {\r\n    provider_urls: ['https://http-mainnet.hecochain.com'],\r\n    chainId: '128',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '3',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '42',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n    ],\r\n    chainId: '97',\r\n  },\r\n  {\r\n    provider_urls: ['https://http-testnet.hecochain.com'],\r\n    chainId: '256',\r\n  },\r\n];\r\n\r\nexport const getChainProviderUrlsConfig = (chainId) => {\r\n  const chainProviderUrls = [\r\n    {\r\n      provider_urls: [\r\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '1',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://bsc-dataseed.binance.org',\r\n        'https://bsc-dataseed1.defibit.io/',\r\n        'https://bsc-dataseed1.ninicoin.io/',\r\n      ],\r\n      chainId: '56',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-mainnet.hecochain.com'],\r\n      chainId: '128',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '3',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '42',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      ],\r\n      chainId: '97',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-testnet.hecochain.com'],\r\n      chainId: '256',\r\n    },\r\n  ];\r\n  \r\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\r\n  //console.log('res',res)\r\n  if (res.length > 0) {\r\n    return res[0].provider_urls\r\n  } else {\r\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\r\n  }\r\n}\r\n","/** @module config */\r\n\r\n/**\r\n * Get the contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].pToken - position token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].symbol - symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getContractAddressConfig = (env = 'dev') => {\r\n  // production environment\r\n  if (env === 'prod') {\r\n    // console.log('!!! production !!!')\r\n    return [\r\n      {\r\n        pool: '0x639a9C2fAe976D089dCcc2ffAE51Ef1dd04B7985',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\r\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '5288684',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        pool: '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\r\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '6753399',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'COIN',\r\n        unit: 'COIN',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        pool: '0x919F97417857781f754e00CCCD9100f78B759818',\r\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\r\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '7475766',\r\n        bTokenSymbol: 'DERI',\r\n        symbol: 'iMEME',\r\n        unit: 'iMEME',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        pool: '0x3C2970466635AAeFEd1cfe630D051Fa6D281aEbB',\r\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\r\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        initialBlock: '11949433',\r\n        bTokenSymbol: 'USDT',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        pool: '0x7137cc9f252dc405dadc35F597dA8B32e8653603',\r\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\r\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\r\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        initialBlock: '11860070',\r\n        bTokenSymbol: 'BAC',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        pool: '0x9b404BAB12CE0D5039e7313d9e24f4b5c8E8E8e3',\r\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\r\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\r\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\r\n        initialBlock: '2557914',\r\n        bTokenSymbol: 'HUSD',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '128',\r\n      },\r\n    ];\r\n  }\r\n  // develop environment\r\n  // console.log('-- test ---')\r\n  return [\r\n    {\r\n      pool: '0x67eE8f0CB17e750219Bd58d433D52ab4B3d8A081',\r\n      bToken: '0x8F038C454B6E68B2988706a1a5f78dE2C4634097',\r\n      pToken: '0xad794Adc3Ed6085A79Ba3e2FCD13Df8d33d462Ec',\r\n      lToken: '0x37732230ac101f59490762Ef73Be43B5E5Ec4949',\r\n      initialBlock: '9986356',\r\n      bTokenSymbol: 'USDT',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '3',\r\n    },\r\n    {\r\n      pool: '0xFFe402106E8F73F0A44C7350C2b734e048f448f2',\r\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\r\n      pToken: '0x5FeF67FD24f37b90E0c96324380F63413dF22f78',\r\n      lToken: '0xCdDbf76F76B9F95135F5D531fefc344258ff322a',\r\n      initialBlock: '7796681',\r\n      bTokenSymbol: 'BUSD',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      pool: '0x02A614844212f71049c469902F7A20F6540a2792',\r\n      bToken: '0xa0354a4bB59657ad9A2b3eeC4f53f7A6Fb171DD1',\r\n      pToken: '0x4396025914025F1C8B74788bF7c64f879064FbA6',\r\n      lToken: '0x2E80928a9eC105FE79cfC4B54c65d185AC3b7E9C',\r\n      initialBlock: '8108552',\r\n      bTokenSymbol: 'BUSD',\r\n      symbol: 'COIN',\r\n      unit: 'COIN',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      pool: '0xE5a4fCd3CE3a824bF15D5FABd390cF44E83AbE8B',\r\n      bToken: '0x02c9840fD044abFd58E9674ecc232e8b1F323fE8',\r\n      pToken: '0xfa803C4528A1b9f91DFc5f8b4ff940f9FE4F4635',\r\n      lToken: '0xbD57300A178075F774b5F0F9f367B9A2912b7b5e',\r\n      initialBlock: '3663327',\r\n      bTokenSymbol: 'HUSD',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '256',\r\n    },\r\n  ];\r\n};\r\n\r\n/**\r\n * Get the Slp contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].pToken - position token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].symbol - symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getSlpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        chainId: '1',\r\n        bTokenSymbol: 'DERI-USDT SLP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  }\r\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\r\n  return [];\r\n};\r\n\r\n/**\r\n * Get the Clp contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getClpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '6894880',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n      {\r\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\r\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '8309032',\r\n        chainId: '97',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getLpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        chainId: '1',\r\n        bTokenSymbol: 'DERI-USDT SLP',\r\n        symbol: '--',\r\n        type: 'slp',\r\n      },\r\n      {\r\n        pool: '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '6894880',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n        type: 'clp',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n      {\r\n        pool: '0x7aad5ADF82d8B85c826c91924AcdACafAAA945f5',\r\n        bToken: '0x76340AB22aECAaa8f52D5341d2df404CBA966039',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0xd2138766005FAB46E20e6F7e1C4C32A375CfAC56',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '8309032',\r\n        chainId: '97',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n        type: 'clp',\r\n      },\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getMiningVaultRouterContractAddress= (chainId) => {\r\n  const configs = [\r\n      {\r\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\r\n        chainId: '56'\r\n      }\r\n    ]\r\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\r\n  if (filteredConfig.length > 0) {\r\n    return filteredConfig[0].MiningVaultRouter\r\n  } else {\r\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Get the Deri contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].Deri - deri address\r\n * @returns {string} response[].Wormhole - wormhole token address\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getDeriContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\r\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '128',\r\n      },\r\n    ];\r\n  }\r\n  return [\r\n    {\r\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\r\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '3',\r\n    },\r\n    {\r\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\r\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\r\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '256',\r\n    },\r\n  ];\r\n};\r\n\r\nexport const getAnnualBlockNumberConfig = () => ({\r\n  1: '2367422',\r\n  56: '10497304',\r\n  128: '10511369',\r\n  3: '2367422',\r\n  97: '10497304',\r\n  256: '10511369',\r\n});\r\n","/**\r\n * Get REST server config\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {string} server url\r\n */\r\nexport const getRestServerConfig = (env = 'dev') => {\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    return 'https://api.deri.finance';\r\n  } else {\r\n    // for test\r\n    return 'https://apitest.deri.finance';\r\n  }\r\n};\r\n\r\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\r\n  if (env === \"prod\") {\r\n    return ['trade_tx_quene', 'trade_worker_group']\r\n  } else {\r\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\r\n  }\r\n};\r\n","import { bg, getAnnualBlockNumber } from '../utils';\r\n\r\nexport const calculateLiquidityUsed = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  poolMarginRatio\r\n) => {\r\n  return bg(\r\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\r\n  ).abs();\r\n}\r\n\r\nexport const calculateFundingRate = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  fundingRateCoefficient\r\n) => {\r\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\r\n  fundingRateCoefficient;\r\n}\r\n\r\nexport const processFundingRate = (chainId, fundingRate) => {\r\n  const annualBlockCount = getAnnualBlockNumber(chainId);\r\n  //console.log(annualBlockCount);\r\n  return bg(fundingRate).times(annualBlockCount);\r\n};\r\n","import { bg, max, min } from '../utils';\r\n\r\nexport * from './fundingRate';\r\n\r\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\r\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\r\nexport const calculateMaxRemovableShares = (\r\n  lTokenBalance,\r\n  lTokenTotalSupply,\r\n  liquidity,\r\n  tradersNetVolume,\r\n  tradersNetCost,\r\n  multiplier,\r\n  minPoolMarginRatio,\r\n  price\r\n) => {\r\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\r\n  const value = tradersNetVolume.times(price).times(multiplier);\r\n  const removable = liquidity\r\n    .plus(tradersNetCost)\r\n    .minus(value)\r\n    .minus(value.abs().times(minPoolMarginRatio));\r\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\r\n  return shares;\r\n};\r\n\r\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\r\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\r\n\r\nexport const calculateMarginHeld = (\r\n  price,\r\n  volume,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\r\n};\r\n\r\nexport const calculatePnl = (price, volume, multiplier, cost) => {\r\n  return volume.times(price).times(multiplier).minus(cost);\r\n}\r\n\r\nexport const calculateMaxWithdrawMargin = (\r\n  price,\r\n  volume,\r\n  margin,\r\n  cost,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  if (volume.eq(0)) {\r\n    return margin;\r\n  }\r\n  const held = calculateMarginHeld(\r\n    price,\r\n    volume,\r\n    multiplier,\r\n    minInitialMarginRatio\r\n  );\r\n  const pnl = calculatePnl(price, volume, multiplier, cost);\r\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\r\n  return withdrawable;\r\n};\r\n\r\nexport const calculateLiquidationPrice = (\r\n  volume,\r\n  margin,\r\n  cost,\r\n  multiplier,\r\n  minMaintenanceMarginRatio\r\n) => {\r\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\r\n  let res = volume.gt(0)\r\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\r\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\r\n  res = max(res, bg(0));\r\n  return res;\r\n};\r\n\r\nexport const isOrderValid = (\r\n  price,\r\n  margin,\r\n  volume,\r\n  liquidity,\r\n  tradersNetVolume,\r\n  multiplier,\r\n  minPoolMarginRatio,\r\n  minInitialMarginRatio,\r\n  newVolume,\r\n  amount\r\n) => {\r\n  const minMargin = volume\r\n    .plus(newVolume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .times(minInitialMarginRatio);\r\n  const poolMaxVolume = liquidity\r\n    .div(minPoolMarginRatio)\r\n    .div(price)\r\n    .div(multiplier);\r\n  if (margin.plus(amount).gte(minMargin)) {\r\n    if (\r\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\r\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\r\n    ) {\r\n      return { success: true };\r\n    }\r\n    return { success: false, message: 'Pool insufficient liquidity' };\r\n  }\r\n  return { success: false, message: 'Trader insufficient margin' };\r\n};\r\n","import Web3 from 'web3';\r\nimport { metaMaskWeb3 } from '../factory/web3';\r\nimport { hexToNumber } from '../utils';\r\n\r\n/**\r\n * check ethereum client status for web browser\r\n * @function\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\r\n * @returns {boolean} response.[error] - error message when request failed\r\n */\r\nexport const hasWallet = () => {\r\n  if (window.ethereum && window.ethereum.isMetaMask) {\r\n    return { success: true, isMetaMask: true };\r\n  }\r\n  return {\r\n    success: false,\r\n    error:\r\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\r\n  };\r\n};\r\n\r\n/**\r\n *  Connect wallet using MetaMask account\r\n * @async\r\n * @function\r\n * @param {function} [handleChainChanged] - Callback when chainId changed\r\n * @param {function} [handleAccountChanged]  - callback when account changed\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.chainId - chain Id\r\n * @returns {string} response.account - account address\r\n * @returns {boolean} response.[error] - error message when request failed\r\n */\r\nexport const connectWallet = async (\r\n  handleChainChanged,\r\n  handleAccountChanged\r\n) => {\r\n  if (typeof window.ethereum !== undefined) {\r\n    const accounts = await window.ethereum.request({\r\n      method: 'eth_requestAccounts',\r\n    });\r\n    const chainId = parseInt(\r\n      await window.ethereum.request({ method: 'net_version' })\r\n    );\r\n    // const chainId = hexToNumber(\r\n    //   await window.ethereum.request({ method: 'eth_chainId' })\r\n    // );\r\n    // const account = Array.isArray(accounts) && accounts[0];\r\n    const account ='0xdcB57eb18E59495Abd6B0F787F6B4E8ee53027E4';\r\n    // await web3.eth.requestAccounts().then(console.log)\r\n    window.ethereum.on('accountsChanged', (accounts) => {\r\n      let account;\r\n      if (accounts.length > 0) {\r\n        account = accounts[0];\r\n      } else {\r\n        account = '';\r\n      }\r\n      if (typeof handleAccountChanged === 'function') {\r\n        handleAccountChanged(account);\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n      //console.log('accountChanged', account);\r\n    });\r\n    window.ethereum.on('chainChanged', (chainId) => {\r\n      let res = hexToNumber(chainId);\r\n      if (typeof handleChainChanged === 'function') {\r\n        handleChainChanged(res);\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n      //console.log('chainChanged', res);\r\n    });\r\n    return { success: true, account, chainId };\r\n  }\r\n  return {\r\n    success: false,\r\n    error: 'Cannot connect wallet, please install MetaMask.',\r\n  };\r\n};\r\n\r\n/**\r\n * Get balance of the connected account\r\n * @async\r\n * @method\r\n * @param {string} chainId - Id of the chain\r\n * @param {string} accountAddress - Address of the connected account\r\n * @returns {string} Account balance\r\n */\r\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\r\n  //const web3 = web3Factory(chainId);\r\n  const web3 = metaMaskWeb3();\r\n  const balance = await web3.eth.getBalance(walletAddress);\r\n  const res = Web3.utils.fromWei(balance);\r\n  return res;\r\n};\r\n","import {\r\n  getSlpLiquidityInfo,\r\n  getSlpWalletBalance,\r\n  isSlpUnlocked,\r\n  unlockSlp,\r\n  // addSlpLiquidity,\r\n  // removeSlpLiquidity,\r\n} from './slpPoolApi';\r\nimport {\r\n  getClpLiquidityInfo,\r\n  getClpWalletBalance,\r\n  isClpUnlocked,\r\n  unlockClp,\r\n  // addClpLiquidity,\r\n  // removeClpLiquidity,\r\n} from './clpPoolApi';\r\n\r\nimport {\r\n  addSlpLiquidity2 as addSlpLiquidity,\r\n  removeSlpLiquidity2 as removeSlpLiquidity,\r\n  addClpLiquidity2 as addClpLiquidity,\r\n  removeClpLiquidity2 as removeClpLiquidity,\r\n} from './contractTransactionApiV2'\r\nimport { getLpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity info of LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.bTokenBalance\r\n * @returns {string} response.shares\r\n */\r\nexport const getLpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Add liquidity to LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addLpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else if (type === 'clp') {\r\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else {\r\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Remove liquidity to LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeLpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await removeSlpLiquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else if (type === 'clp') {\r\n    return await removeClpLiquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else {\r\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Unlock the account in the lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await unlockSlp(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await unlockClp(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`unlockLp(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Get account balance in lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getLpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\r\n  }\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  lTokenFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n  miningVaultPoolFactory,\r\n  miningVaultRouterFactory,\r\n  wormholeFactory,\r\n  deriFactory,\r\n  databaseWormholeFactory,\r\n} from '../factory/contracts';\r\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\r\nimport {\r\n  getPoolContractAddress,\r\n  getMiningVaultContractAddress,\r\n  getBTCUSDPrice,\r\n  bg,\r\n  naturalToDeri,\r\n  BigNumber,\r\n  format,\r\n  getDeriContractAddress,\r\n} from '../utils';\r\nimport {\r\n  getMiningVaultRouterContractAddress\r\n} from '../config'\r\nimport {\r\n  calculateMaxRemovableShares,\r\n  calculateMaxWithdrawMargin,\r\n  isOrderValid,\r\n} from '../calculation';\r\n\r\n/**\r\n * Unlock the account in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Deposit margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string|number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const depositMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\r\n};\r\n\r\n/**\r\n * Withdraw margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const withdrawMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\r\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\r\n\r\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\r\n    price,\r\n    volume,\r\n    margin,\r\n    cost,\r\n    multiplier,\r\n    minInitialMarginRatio\r\n  );\r\n  if (bg(amount).lte(maxWithdrawMargin)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'amount exceeds allowed' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const decimals = await bToken.decimals();\r\n  const BONE = 10 ** decimals;\r\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\r\n  let res;\r\n  try {\r\n    const tx = await bToken._transact('mint', [amount], accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Add liquidity in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  let res;\r\n  try {\r\n    const tx = await pPool._transactPool(\r\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n      [naturalToDeri(amount)],\r\n      accountAddress\r\n    );\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} shares\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares\r\n) => {\r\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\r\n  const {\r\n    liquidity,\r\n    tradersNetVolume,\r\n    tradersNetCost,\r\n  } = await pPool.getStateValues();\r\n\r\n  const maxRemovableShares = calculateMaxRemovableShares(\r\n    lTokenBalance,\r\n    lTokenTotalSupply,\r\n    liquidity,\r\n    tradersNetVolume,\r\n    tradersNetCost,\r\n    multiplier,\r\n    minPoolMarginRatio,\r\n    price\r\n  );\r\n  let res;\r\n  if (bg(shares).lte(maxRemovableShares)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(shares)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'shares exceeds allowed' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Trade with margin in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} newVolume\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const tradeWithMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    minInitialMarginRatio,\r\n    minPoolMarginRatio,\r\n  } = await pPool.getParameters();\r\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\r\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\r\n  let res;\r\n  const orderValidation = isOrderValid(\r\n    price,\r\n    margin,\r\n    volume,\r\n    liquidity,\r\n    tradersNetVolume,\r\n    multiplier,\r\n    minPoolMarginRatio,\r\n    minInitialMarginRatio,\r\n    bg(newVolume),\r\n    bg(amount)\r\n  );\r\n  if (orderValidation.success) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: orderValidation.message };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Close position in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  let { volume } = await pToken.getPositionInfo(accountAddress);\r\n  volume = volume.negated();\r\n  let res;\r\n  if (!volume.eq(0)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(volume), '0'],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'no position to close' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint DToken in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintDToken = async (chainId, accountAddress) => {\r\n  let res;\r\n  const userInfo = await getUserInfoAll(accountAddress);\r\n  const amount = naturalToDeri(userInfo.amount);\r\n  const { deadline } = userInfo;\r\n  const { nonce } = userInfo;\r\n  const { v } = userInfo;\r\n  const { r } = userInfo;\r\n  const { s } = userInfo;\r\n  if (userInfo.valid) {\r\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\r\n    if (miningVaultAddress) {\r\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\r\n      //miningVault.setAccount(accountAddress);\r\n      try {\r\n        const tx = await miningVault.mintDToken(\r\n          accountAddress,\r\n          amount,\r\n          deadline,\r\n          nonce,\r\n          v,\r\n          r,\r\n          s\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the mining vault address in chain ${chainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * freeze Deri in current wormhole pool to the specified chain\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @param {string} toChainId\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\r\n  const { wormholeAddress } = getDeriContractAddress(chainId);\r\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\r\n  //wormhole.setAccount(accountAddress);\r\n  let res;\r\n  try {\r\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint Deri in wormhole pool\r\n * @async\r\n * @method\r\n * @param {string} toChainId\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintDeri = async (toChainId, accountAddress) => {\r\n  let res;\r\n  const databaseWormhole = databaseWormholeFactory(true);\r\n  // const userInfo = await getUserInfoAll(accountAddress);\r\n  const userInfo = await databaseWormhole.signature(accountAddress);\r\n  // console.log(userInfo)\r\n  const { amount } = userInfo;\r\n  const { fromChainId } = userInfo;\r\n  const { fromWormhole } = userInfo;\r\n  const fromNonce = userInfo.nonce;\r\n  const { v } = userInfo;\r\n  const { r } = userInfo;\r\n  const { s } = userInfo;\r\n  if (userInfo.valid) {\r\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\r\n    if (wormholeAddress) {\r\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\r\n      //wormhole.setAccount(accountAddress);\r\n      try {\r\n        const tx = await wormhole.mintDeri(\r\n          accountAddress,\r\n          amount,\r\n          fromChainId,\r\n          fromWormhole,\r\n          fromNonce,\r\n          v,\r\n          r,\r\n          s\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Unlock the account in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockDeri = async (chainId, accountAddress) => {\r\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\r\n  let res;\r\n  try {\r\n    const tx = await deri.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint Airdrop in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintAirdrop = async (chainId, accountAddress) => {\r\n  let res;\r\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\r\n  const amount = naturalToDeri(userInfo.amount).toString();\r\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\r\n  if (userInfo.valid) {\r\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\r\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\r\n    // console.log(\"userInfo\", userInfo)\r\n    if (miningVaultAddress) {\r\n      const miningVaultRouter = miningVaultRouterFactory(\r\n        chainId,\r\n        miningVaultAddress\r\n      );\r\n      try {\r\n        const tx = await miningVaultRouter.mint(\r\n          accountAddress,\r\n          amount,\r\n          deadline,\r\n          nonce,\r\n          v1,\r\n          r1,\r\n          s1,\r\n          v2,\r\n          r2,\r\n          s2\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the mining vault router address in chain ${chainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n","import { perpetualPoolFactory } from '../factory/contracts';\r\nimport { getBTCUSDPrice } from '../utils';\r\nimport { getUserWormholeSignature } from './contractQueryApi';\r\nimport { io } from 'socket.io-client';\r\n\r\n/** @module apiCache */\r\n/**\r\n * fundingRateCache Object\r\n * @name fundingRateCache\r\n * @property {function} get - Get the funding rate from cache\r\n * @property {function} set - set the funding rate cache\r\n */\r\nexport const fundingRateCache = (function () {\r\n  let resourceMap = {};\r\n  return {\r\n    get(chainId, contractAddress) {\r\n      const key = `${chainId}.${contractAddress}`;\r\n      if (Object.keys(resourceMap).includes(key)) {\r\n        return resourceMap[key];\r\n      }\r\n      console.log(`Cache key is not in resouceMap: ${key}`);\r\n      return undefined;\r\n    },\r\n    set(chainId, contractAddress, resource) {\r\n      const key = `${chainId}.${contractAddress}`;\r\n      resourceMap[key] = resource;\r\n    },\r\n  };\r\n})();\r\n\r\nexport const accountAddressCache = (function () {\r\n  let _accountAddress = '';\r\n  return {\r\n    get() {\r\n      if (_accountAddress === '') {\r\n        console.log(\"please init 'accountAddress' first\");\r\n      }\r\n      return _accountAddress;\r\n    },\r\n    set(value) {\r\n      if (typeof value === 'string' && value !== '') {\r\n        _accountAddress = value;\r\n      }\r\n    },\r\n  };\r\n})();\r\n\r\n/**\r\n * priceCache Object\r\n * @name priceCache\r\n * @property {function} get - Get the price from cache\r\n * @property {function} update - Set the price to automatic update during a time interval\r\n * @property {function} clear - Clear the the automatic update of the price\r\n */\r\nexport const priceCache = (function () {\r\n  let _price = '';\r\n  let _interval = null;\r\n  return {\r\n    get() {\r\n      if (_price === '') {\r\n        console.log(\"please init 'price' first\");\r\n      }\r\n      return _price;\r\n    },\r\n    async _update(chainId, poolAddress) {\r\n      try {\r\n        const res = await getBTCUSDPrice(chainId, poolAddress);\r\n        if (res !== '') {\r\n          _price = res;\r\n        }\r\n      } catch (err) {\r\n        console.log(`priceCache.update: ${err}`)\r\n      }\r\n    },\r\n    update(chainId, poolAddress) {\r\n      const self = this;\r\n      _interval = setInterval(() => {\r\n        // console.log('tick')\r\n        self._update(chainId, poolAddress);\r\n      }, 3000);\r\n    },\r\n    clear() {\r\n      if (_interval) {\r\n        clearInterval(_interval);\r\n      }\r\n      _price = '';\r\n    },\r\n  };\r\n})();\r\n\r\n/**\r\n * PerpetualPoolParametersCache Object\r\n * @name PerpetualPoolParametersCache\r\n * @property {function} get - Get the perpetualPoolParameters from cache\r\n * @property {function} update - Set the perpetualPoolParameters\r\n */\r\n\r\nexport const PerpetualPoolParametersCache = (function () {\r\n  let _parameters = {};\r\n  return {\r\n    get() {\r\n      if (!_parameters.multiplier) {\r\n        console.log(\"please init 'perpetual pool parameters' first\");\r\n      }\r\n      return _parameters;\r\n    },\r\n    async update(chainId, poolAddress) {\r\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n      const res = await perpetualPool.getParameters();\r\n      if (res.multiplier) {\r\n        _parameters = res;\r\n      }\r\n      return res;\r\n    },\r\n  };\r\n})();\r\n\r\n// websocket instance\r\nexport const wsInstance = (function(){\r\n  let _ws = null;\r\n  return {\r\n    get() {\r\n      if (_ws) {\r\n        return _ws\r\n      } else {\r\n        console.log('wsInstance.get() error: ws instance is not init')\r\n      }\r\n    },\r\n    set(url) {\r\n      try {\r\n        const ws = io(url, {\r\n          transports: ['websocket'],\r\n          path: '/ws',\r\n        });\r\n        ws.on('connect', () => {\r\n          console.log('hello from ws:', ws.id);\r\n        })\r\n        if (ws) {\r\n          _ws = ws\r\n        } else {\r\n          console.log('wsInstance.get() error: ws instance is not init')\r\n        }\r\n      } catch (err) {\r\n        console.log('wsInstance.set():', err)\r\n      }\r\n    },\r\n    getOrSet(url) {\r\n      if (!_ws) {\r\n        this.set(url)\r\n      }\r\n      return _ws\r\n    }\r\n  }\r\n})();\r\n","export {\r\n  DeriEnv,\r\n  getContractAddressConfig,\r\n  getLpContractAddressConfig,\r\n  getSlpContractAddressConfig,\r\n} from './config';\r\nexport * from './utils';\r\nexport * from './calculation';\r\n\r\nexport * from './api/apiGlobals';\r\nexport * from './api/factoryApi';\r\nexport * from './api/walletApi';\r\nexport {\r\n  isUnlocked,\r\n  getEstimatedMargin,\r\n  getEstimatedFee,\r\n  getEstimatedFundingRate,\r\n  getEstimatedLiquidityUsed,\r\n  isDeriUnlocked,\r\n  getUserWormholeSignature,\r\n  // getFundingRate,\r\n  getPositionInfo,\r\n} from './api/contractQueryApi';\r\nexport {\r\n  unlock,\r\n  //depositMargin,\r\n  //withdrawMargin,\r\n  //addLiquidity,\r\n  //removeLiquidity,\r\n  //tradeWithMargin,\r\n  //closePosition,\r\n  mint,\r\n  mintDToken,\r\n  freeze,\r\n  mintDeri,\r\n  unlockDeri,\r\n  mintAirdrop,\r\n} from './api/contractTransactionApi';\r\nexport * from './api/databaseApi';\r\n\r\n// export * from './api/slpPoolApi';\r\n// export * from './api/clpPoolApi';\r\n\r\n// export * from './api/tradeHistoryApi';\r\nexport {\r\ngetSpecification2 as getSpecification,\r\n// getPositionInfo2 as getPositionInfo,\r\ngetLiquidityInfo2 as getLiquidityInfo,\r\ngetWalletBalance2 as getWalletBalance,\r\ngetFundingRate2 as getFundingRate,\r\ngetLiquidityUsed2 as getLiquidityUsed,\r\ngetFundingRateCache2 as getFundingRateCache,\r\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\r\ngetSlpWalletBalance2 as getSlpWalletBalance,\r\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\r\ngetClpWalletBalance2 as getClpWalletBalance,\r\ngetDeriBalance2 as getDeriBalance,\r\ngetTradeHistory2 as getTradeHistory,\r\n} from './api/restApi';\r\n\r\nexport {\r\n  tradeWithMargin2 as tradeWithMargin,\r\n  closePosition2 as closePosition,\r\n  depositMargin2 as depositMargin,\r\n  withdrawMargin2 as withdrawMargin,\r\n  addLiquidity2 as addLiquidity,\r\n  removeLiquidity2 as removeLiquidity,\r\n} from './api/contractTransactionApiV2'\r\n\r\nexport * from './api/lpPoolApi';\r\n","import {\r\n  getPoolContractAddress,\r\n  naturalToDeri,\r\n  deriToNatural,\r\n  hexToString,\r\n  toChecksumAddress,\r\n  hexToNumber,\r\n  hexToNumberString,\r\n} from '../utils';\r\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\r\n\r\nconst processTradeEvent = async (\r\n  perpetualPool,\r\n  bTokenSymbol,\r\n  info,\r\n  blockNumber,\r\n  txHash,\r\n  multiplier,\r\n  feeRatio\r\n) => {\r\n  const tradeVolume = deriToNatural(info.tradeVolume);\r\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\r\n\r\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\r\n  const price = deriToNatural(info.price);\r\n  const time = `${+timeStamp.timestamp}000`;\r\n  const transactionFee = perpetualPool._calculateFee(\r\n    tradeVolume,\r\n    price,\r\n    multiplier,\r\n    feeRatio\r\n  );\r\n  const notional = tradeVolume.abs().times(price).times(multiplier);\r\n  const volume = tradeVolume.abs();\r\n\r\n  const res = {\r\n    direction,\r\n    baseToken: bTokenSymbol,\r\n    price: price.toString(),\r\n    notional: notional.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: transactionFee.toString(),\r\n    transactionHash: txHash.toString(),\r\n    time,\r\n  };\r\n  // console.log(JSON.stringify(res))\r\n  return res;\r\n};\r\n\r\nconst processLiquidateEvent = async (\r\n  info,\r\n  txHash,\r\n  bTokenSymbol,\r\n  multiplier\r\n) => {\r\n  // console.log(info)\r\n  const volume = deriToNatural(info.volume).abs();\r\n  // const cost = deriToNatural(info.cost).abs()\r\n  // const margin = info.margin\r\n  const timestamp = `${info.timestamp}000`;\r\n  const price = deriToNatural(info.price);\r\n  // const liquidator = info.liquidator\r\n  // const reward = info.reward\r\n  const national = volume.times(price).times(multiplier);\r\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\r\n\r\n  const res = {\r\n    direction: 'Liquidation',\r\n    baseToken: bTokenSymbol,\r\n    price: price.toString(),\r\n    notional: national.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: '0',\r\n    transactionHash: txHash.toString(),\r\n    time: timestamp,\r\n    // cost: naturalToDeri(cost).toString(),\r\n    // margin: margin.toString(),\r\n    // liquidator,\r\n    // reward: reward.toString(),\r\n  };\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get the user trade history\r\n * @async\r\n * @method\r\n * @param {string} chainId - Chain Id\r\n * @param {string} poolAddress - Pool Address\r\n * @param {string} accountAddress - Account Address\r\n * @returns {Object[]} response\r\n * @returns {string} response[].direction\r\n * @returns {string} response[].baseToken\r\n * @returns {string} response[].price\r\n * @returns {string} response[].notional\r\n * @returns {string} response[].volume\r\n * @returns {string} response[].transactionFee\r\n * @returns {string} response[].time - Timestamp of the trade\r\n */\r\n\r\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\r\n  const keyMeta = `${chainId}.${poolAddress}`;\r\n  const db = databaseFactory();\r\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\r\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\r\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\r\n  ]);\r\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\r\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\r\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\r\n    // console.log(tradeFromBlock, liquidateFromBlock)\r\n    const [\r\n      tradeHistoryOffline,\r\n      tradeHistoryOnline,\r\n      liquidateHistoryOffline,\r\n      liquidateHistoryOnline,\r\n    ] = await Promise.all([\r\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline\r\n      .concat(liquidateHistoryOnline)\r\n      .concat(tradeHistoryOffline)\r\n      .concat(liquidateHistoryOffline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  } else {\r\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\r\n    tradeFromBlock = parseInt(initialBlock);\r\n    liquidateFromBlock = parseInt(initialBlock);\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  }\r\n};\r\n\r\n// get trade history combined from cache and from online pull\r\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\r\n  // console.log(chainId, poolAddress, accountAddress)\r\n  let result = [];\r\n  // use dev database\r\n  const db = databaseFactory();\r\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\r\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\r\n    accountAddress\r\n  )}.trade`;\r\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const count = hexToNumber(res);\r\n  try {\r\n    if (count && count >= 0) {\r\n      let keyArray = [];\r\n      for (let i = count; i > 0; i--) {\r\n        const key = `${keyMeta}.${i.toString()}`;\r\n        keyArray = keyArray.concat([\r\n          `${key}.direction`,\r\n          `${key}.baseToken`,\r\n          `${key}.price`,\r\n          `${key}.notional`,\r\n          `${key}.volume`,\r\n          `${key}.transactionFee`,\r\n          `${key}.transactionHash`,\r\n          `${key}.time`,\r\n        ]);\r\n      }\r\n      // console.log(keyArray)\r\n      const tradeHistoryLength = keyArray.length / 8;\r\n      // console.log(`trade history length: ${tradeHistoryLength}`)\r\n      const resp = await db.getValues(keyArray);\r\n      for (let i = 0; i < tradeHistoryLength; i++) {\r\n        const indexBase = i * 8;\r\n        //console.log(resp[indexBase + 6].trim());\r\n        const item = {\r\n          direction: hexToString(resp[indexBase]).trim(),\r\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\r\n          price: deriToNatural(resp[indexBase + 2]).toString(),\r\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\r\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\r\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\r\n          transactionHash: resp[indexBase + 6],\r\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\r\n        };\r\n        result.push(item);\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n\r\n// get trade history online from the Block number\r\nexport const getTradeHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  fromBlock\r\n) => {\r\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\r\n  // console.log(poolAddr, bTokenAddress);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //perpetualPool.setAccount(accountAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\r\n  fromBlock = parseInt(fromBlock);\r\n  const filters = { owner: accountAddress };\r\n  const events = await perpetualPool._getPastEvents(\r\n    'Trade',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n  const {\r\n    multiplier,\r\n    feeRatio,\r\n    minInitialMarginRatio,\r\n  } = await perpetualPool.getParameters();\r\n\r\n  const result = [];\r\n  // console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    // const info = item.returnValues;\r\n    const res = await processTradeEvent(\r\n      perpetualPool,\r\n      bTokenSymbol,\r\n      item.returnValues,\r\n      item.blockNumber,\r\n      item.transactionHash,\r\n      multiplier,\r\n      feeRatio,\r\n      minInitialMarginRatio\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\n// get liquidate history online from the Block number\r\nexport const getLiquidateHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  fromBlock\r\n) => {\r\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\r\n  // console.log(poolAddr, bTokenAddress);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //perpetualPool.setAccount(accountAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  fromBlock = parseInt(fromBlock);\r\n  const filters = { owner: accountAddress };\r\n  const events = await perpetualPool._getPastEvents(\r\n    'Liquidate',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n  const { multiplier } = await perpetualPool.getParameters();\r\n\r\n  const result = [];\r\n  // console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    // const info = item.returnValues;\r\n    const res = await processLiquidateEvent(\r\n      item.returnValues,\r\n      item.transactionHash,\r\n      bTokenSymbol,\r\n      multiplier\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\n// get trade history combined from cache and from online pull\r\nconst getLiquidateHistoryOffline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  let result = [];\r\n  // use dev database\r\n  const db = databaseFactory();\r\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\r\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\r\n    accountAddress\r\n  )}.liquidate`;\r\n  const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const count = hexToNumber(res);\r\n  try {\r\n    if (count && count >= 0) {\r\n      let keyArray = [];\r\n      for (let i = count; i > 0; i--) {\r\n        const key = `${keyMeta}.${i.toString()}`;\r\n        keyArray = keyArray.concat([\r\n          `${key}.direction`,\r\n          `${key}.baseToken`,\r\n          `${key}.price`,\r\n          `${key}.notional`,\r\n          `${key}.volume`,\r\n          `${key}.transactionFee`,\r\n          `${key}.transactionHash`,\r\n          `${key}.time`,\r\n        ]);\r\n      }\r\n      // console.log(keyArray)\r\n      const liquidateHistoryLength = keyArray.length / 8;\r\n      const resp = await db.getValues(keyArray);\r\n      for (let i = 0; i < liquidateHistoryLength; i++) {\r\n        const indexBase = i * 8;\r\n        const item = {\r\n          direction: hexToString(resp[indexBase]).trim(),\r\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\r\n          price: deriToNatural(resp[indexBase + 2]).toString(),\r\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\r\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\r\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\r\n          transactionHash: resp[indexBase + 6],\r\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\r\n        };\r\n        result.push(item);\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n","// const\r\nimport { getRestServerConfig, DeriEnv } from '../config';\r\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\r\nimport {\r\n  getLiquidateHistoryOnline,\r\n  getTradeHistoryOnline,\r\n} from './tradeHistoryApi';\r\n\r\nconst getHttpBase = () => {\r\n  return getRestServerConfig(DeriEnv.get());\r\n};\r\n\r\nconst fetchJson = async (url) => {\r\n  const resp = await fetch(url);\r\n  return await resp.json();\r\n};\r\n\r\n/**\r\n * Get specification from REST API, please refer {@link getSpecification}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getSpecification2 = async (chainId, poolAddress) => {\r\n  console.log('hit');\r\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get funding rate from REST API, please refer {@link getFundingRate}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getFundingRate2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    let result = res.data;\r\n    result.price = bg(result.price);\r\n    result.fundingRate = bg(result.fundingRate);\r\n    result.liquidityUsed = bg(result.liquidityUsed);\r\n    return result;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get position info from REST API, please refer {@link getPositionInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getPositionInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance from REST API, please refer {@link getWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getSlpLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getSlpWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getClpLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getClpWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\r\n * @async\r\n * @method\r\n * @param {string} chainId - Chain Id\r\n * @param {string} poolAddress - Pool Address\r\n * @param {string} accountAddress - Account Address\r\n * @returns {Object[]} response\r\n */\r\nexport const getTradeHistory2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\r\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\r\n    tradeHistory = res.data.tradeHistory;\r\n  }\r\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\r\n    return {\r\n      direction: i.direction.trim(),\r\n      baseToken: i.baseToken.trim(),\r\n      price: deriToNatural(i.price).toString(),\r\n      notional: deriToNatural(i.notional).toString(),\r\n      volume: deriToNatural(i.volume).toString(),\r\n      transactionFee: deriToNatural(i.transactionFee).toString(),\r\n      transactionHash: i.transactionHash,\r\n      time: i.time.toString(),\r\n    };\r\n  });\r\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\r\n    // console.log(tradeFromBlock, liquidateFromBlock)\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline\r\n      .concat(liquidateHistoryOnline)\r\n      .concat(tradeHistory);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  } else {\r\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\r\n    tradeFromBlock = parseInt(initialBlock);\r\n    liquidateFromBlock = parseInt(initialBlock);\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  }\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  lTokenFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n  deriFactory,\r\n  databaseWormholeFactory,\r\n} from '../factory/contracts';\r\nimport { getPoolInfoApy } from './databaseApi';\r\nimport {\r\n  fundingRateCache,\r\n  PerpetualPoolParametersCache,\r\n  priceCache,\r\n} from './apiGlobals';\r\nimport {\r\n  hasInvalidArgsValue,\r\n  naturalWithPercentage,\r\n  deriToNatural,\r\n  getPoolContractAddress,\r\n  getBTCUSDPrice,\r\n  bg,\r\n  BigNumber,\r\n  getDeriContractAddress,\r\n} from '../utils';\r\nimport {\r\n  calculateFundingRate,\r\n  calculateLiquidityUsed,\r\n  calculateShareValue,\r\n  calculateMaxRemovableShares,\r\n  calculateEntryPrice,\r\n  calculateMarginHeld,\r\n  calculatePnl,\r\n  calculateLiquidationPrice,\r\n  processFundingRate,\r\n} from '../calculation';\r\n\r\n/**\r\n * Get the contract information\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.addresses\r\n * @returns {string} response.symbol\r\n * @returns {string} response.bSymbol\r\n * @returns {string} response.multiplier\r\n * @returns {string} response.feeRatio\r\n * @returns {string} response.minPoo\r\n * @returns {string} response.minPoolMarginRatio\r\n * @returns {string} response.minInitialMarginRatio\r\n * @returns {string} response.minMaintenanceMarginRatio\r\n * @returns {string} response.minAddLiquidity\r\n * @returns {string} response.redemptionFeeRatio\r\n * @returns {string} response.fundingRateCoefficient\r\n * @returns {string} response.minLiquidationReward\r\n * @returns {string} response.maxLiquidationReward\r\n * @returns {string} response.liquidationCutRatio\r\n * @returns {string} response.priceDelayAllowance\r\n */\r\nexport const getSpecification = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    feeRatio,\r\n    minPoolMarginRatio,\r\n    minInitialMarginRatio,\r\n    minMaintenanceMarginRatio,\r\n    minAddLiquidity,\r\n    redemptionFeeRatio,\r\n    fundingRateCoefficient,\r\n    minLiquidationReward,\r\n    maxLiquidationReward,\r\n    liquidationCutRatio,\r\n    priceDelayAllowance,\r\n  } = await pPool.getParameters();\r\n  const symbol = await pPool.symbol();\r\n  const bSymbolRaw = await bToken.symbol();\r\n\r\n  return {\r\n    addresses: poolAddress,\r\n    symbol,\r\n    bSymbol: bSymbolRaw,\r\n    multiplier: multiplier.toString(),\r\n    feeRatio: feeRatio.toString(),\r\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\r\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\r\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\r\n    minAddLiquidity: minAddLiquidity.toString(),\r\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\r\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n    minLiquidationReward: minLiquidationReward.toString(),\r\n    maxLiquidationReward: maxLiquidationReward.toString(),\r\n    liquidationCutRatio: liquidationCutRatio.toString(),\r\n    priceDelayAllowance: priceDelayAllowance.toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get position Information of the user\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.volume\r\n * @returns {string} response.averageEntryPrice\r\n * @returns {string} response.margin\r\n * @returns {string} response.marginHeld\r\n * @returns {string} response.unrealizedPnl\r\n * @returns {string} response.liquidationPrice\r\n */\r\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    minInitialMarginRatio,\r\n    minMaintenanceMarginRatio,\r\n  } = await pPool.getParameters();\r\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\r\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\r\n\r\n  return {\r\n    volume: volume.toString(),\r\n    averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\r\n    margin: margin.toString(),\r\n    marginHeld: calculateMarginHeld(\r\n      price,\r\n      volume,\r\n      multiplier,\r\n      minInitialMarginRatio\r\n    ).toString(),\r\n    unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\r\n    liquidationPrice: calculateLiquidationPrice(\r\n      volume,\r\n      margin,\r\n      cost,\r\n      multiplier,\r\n      minMaintenanceMarginRatio\r\n    ).toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get liquidity Info of the user\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.totalSupply\r\n * @returns {string} response.poolLiquidity\r\n * @returns {string} response.shares\r\n * @returns {string} response.shareValue\r\n * @returns {string} response.maxRemovableShares\r\n */\r\nexport const getLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const {\r\n    liquidity,\r\n    tradersNetCost,\r\n    tradersNetVolume,\r\n  } = await pPool.getStateValues();\r\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\r\n  const poolDynamicEquity = liquidity.plus(\r\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\r\n  );\r\n\r\n  return {\r\n    totalSupply: lTokenTotalSupply.toString(),\r\n    poolLiquidity: liquidity.toString(),\r\n    shares: lTokenBalance.toString(),\r\n    shareValue: calculateShareValue(\r\n      lTokenTotalSupply,\r\n      poolDynamicEquity\r\n    ).toString(),\r\n    maxRemovableShares: calculateMaxRemovableShares(\r\n      lTokenBalance,\r\n      lTokenTotalSupply,\r\n      liquidity,\r\n      tradersNetVolume,\r\n      tradersNetCost,\r\n      multiplier,\r\n      minPoolMarginRatio,\r\n      price\r\n    ).toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get user balance in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {string} user balance\r\n */\r\nexport const getWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Get estimate margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} volume\r\n * @param {string} leverage\r\n * @returns {string}\r\n */\r\nexport const getEstimatedMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  volume,\r\n  leverage\r\n) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const { multiplier } = await pPool.getParameters();\r\n  return bg(volume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .div(bg(leverage))\r\n    .toString();\r\n};\r\n\r\n/**\r\n * Get estimate Fee in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} volume\r\n * @returns {string}\r\n */\r\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\r\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  let price = priceCache.get();\r\n  let parameters = PerpetualPoolParametersCache.get();\r\n  if (price === '') {\r\n    await priceCache.update(chainId, poolAddress);\r\n    price = priceCache.get();\r\n  }\r\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\r\n  // const { multiplier, feeRatio } = await pPool.getParameters();\r\n  if (!parameters.multiplier) {\r\n    parameters = await PerpetualPoolParametersCache.update(\r\n      chainId,\r\n      poolAddress\r\n    );\r\n  }\r\n  //console.log('price', price);\r\n  const { multiplier, feeRatio } = parameters;\r\n  return bg(volume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .times(feeRatio)\r\n    .toString();\r\n};\r\n\r\n/**\r\n * Get funding rate of the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate0\r\n * @returns {string} response.fundingRatePerBlock\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.volume\r\n * @returns {string} response.tradersNetVolume\r\n */\r\nexport const getFundingRate = async (chainId, poolAddress) => {\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n\r\n  const res = await perpetualPool\r\n    .getFundingRate()\r\n    .catch((err) => console.log('getFundingRate', err));\r\n  fundingRateCache.set(chainId, poolAddress, res);\r\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\r\n\r\n  if (res) {\r\n    // console.log(hexToNatural(res[0]));\r\n    const {\r\n      fundingRate,\r\n      fundingRatePerBlock,\r\n      liquidity,\r\n      tradersNetVolume,\r\n    } = res;\r\n    const volume = poolInfo.volume24h;\r\n    // fundingRate = processFundingRate(chainId, fundingRate);\r\n\r\n    return {\r\n      fundingRate0: naturalWithPercentage(fundingRate),\r\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\r\n      liquidity: liquidity.toString(),\r\n      volume: deriToNatural(volume).toString(),\r\n      tradersNetVolume: tradersNetVolume.toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get estimate funding rate\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} newNetVolume\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate1\r\n */\r\nexport const getEstimatedFundingRate = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume\r\n) => {\r\n  let fundingRate1;\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool.getFundingRate();\r\n  }\r\n  if (res) {\r\n    const parameters = [\r\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.fundingRateCoefficient,\r\n    ];\r\n    if (hasInvalidArgsValue(...parameters)) {\r\n      return {\r\n        fundingRate1: '0',\r\n      };\r\n    }\r\n    // console.log(parameters)\r\n    fundingRate1 = calculateFundingRate(...parameters);\r\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\r\n    return {\r\n      fundingRate1: naturalWithPercentage(fundingRate1),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get liquidity used\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidityUsed0\r\n */\r\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool.getFundingRate();\r\n  }\r\n  if (res) {\r\n    const { liquidityUsed } = res;\r\n    return {\r\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get estimate liquidity used\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} newNetVolume\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate1\r\n */\r\nexport const getEstimatedLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume\r\n) => {\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool\r\n      .getFundingRate()\r\n      .catch((err) => console.log('getLiquidityUsed', err));\r\n  }\r\n  if (res) {\r\n    const parameters = [\r\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.poolMarginRatio,\r\n    ];\r\n    if (hasInvalidArgsValue(...parameters)) {\r\n      return {\r\n        liquidityUsed1: '0',\r\n      };\r\n    }\r\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\r\n    return {\r\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user signature of the wormhole pool\r\n * @async\r\n * @method\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getUserWormholeSignature = async (accountAddress) => {\r\n  const databaseWormhole = databaseWormholeFactory(true);\r\n  return await databaseWormhole.signature(accountAddress);\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\r\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\r\n  let res;\r\n  try {\r\n    const tx = await deri.isUnlocked(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get deri balance in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string}\r\n */\r\nexport const getDeriBalance = async (chainId, accountAddress) => {\r\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  return (await deri.balance(accountAddress)).toString();\r\n};\r\n","import {\r\n  addLiquidity,\r\n  removeLiquidity,\r\n  depositMargin,\r\n  withdrawMargin,\r\n  tradeWithMargin,\r\n  closePosition,\r\n} from './contractTransactionApi';\r\nimport {\r\n  addSlpLiquidity,\r\n  removeSlpLiquidity,\r\n} from './slpPoolApi'\r\nimport {\r\n  addClpLiquidity,\r\n  removeClpLiquidity,\r\n} from './clpPoolApi'\r\nimport { wsInstance } from './apiGlobals'\r\nimport { getRestServerConfig, DeriEnv, getRedisWorkerQueneConfig } from '../config'\r\n\r\nconst wsOnPromise = (ws, event) => {\r\n  return new Promise((resolve, reject) => {\r\n    ws.on(event, function(data){\r\n      resolve(JSON.parse(data))\r\n    })\r\n  })\r\n}\r\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\r\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\r\n  await ws.send(methodCall)\r\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\r\n  //console.log('res', res)\r\n  return res\r\n}\r\n\r\nexport const tradeWithMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const closePosition2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const depositMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const withdrawMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addSlpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeSlpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\nexport const addClpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeClpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};","export const getDBProviderUrlsConfig = () => [\r\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n];\r\n\r\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\r\n  }\r\n  // for test\r\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\r\n};\r\n\r\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\r\n  }\r\n  // for test\r\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\r\n};\r\n\r\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\r\n  }\r\n  // for test\r\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\r\n};\r\n","// eslint-disable-next-line no-extend-native\r\nNumber.prototype.toFixed = function(len){\r\n  if(len>20 || len<0){\r\n      throw new RangeError('toFixed() digits argument must be between 0 and 20');\r\n  }\r\n  // .123转为0.123\r\n  var number = Number(this);\r\n  if (isNaN(number) || number >= Math.pow(10, 21)) {\r\n      return number.toString();\r\n  }\r\n  if (typeof (len) == 'undefined' || len == 0) {\r\n      return (Math.round(number)).toString();\r\n  }\r\n  var result = number.toString(),\r\n      numberArr = result.split('.');\r\n\r\n  if(numberArr.length<2){\r\n      //整数的情况\r\n      return padNum(result);\r\n  }\r\n  var intNum = numberArr[0], //整数部分\r\n      deciNum = numberArr[1],//小数部分\r\n      lastNum = deciNum.substr(len, 1);//最后一个数字\r\n  \r\n  if(deciNum.length == len){\r\n      //需要截取的长度等于当前长度\r\n      return result;\r\n  }\r\n  if(deciNum.length < len){\r\n      //需要截取的长度大于当前长度 1.3.toFixed(2)\r\n      return padNum(result)\r\n  }\r\n  //需要截取的长度小于当前长度，需要判断最后一位数字\r\n  result = intNum + '.' + deciNum.substr(0, len);\r\n  if(parseInt(lastNum, 10)>=5){\r\n      //最后一位数字大于5，要进位\r\n      var times = Math.pow(10, len); //需要放大的倍数\r\n      var changedInt = Number(result.replace('.',''));//截取后转为整数\r\n      changedInt++;//整数进位\r\n      changedInt /= times;//整数转为小数，注：有可能还是整数\r\n      result = padNum(changedInt+'');\r\n  }\r\n  return result;\r\n  //对数字末尾加0\r\n  function padNum(num){\r\n      var dotPos = num.indexOf('.');\r\n      if(dotPos === -1){\r\n          //整数的情况\r\n          num += '.';\r\n          for(var i = 0;i<len;i++){\r\n              num += '0';\r\n          }\r\n          return num;\r\n      } else {\r\n          //小数的情况\r\n          var need = len - (num.length - dotPos - 1);\r\n          for(var j = 0;j<need;j++){\r\n              num += '0';\r\n          }\r\n          return num;\r\n      }\r\n  }\r\n}","import {isBrowser,isMobile} from 'react-device-detect'\r\nimport LoadableComponent from './utils/LoadableComponent';\r\n\r\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\r\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\r\n\r\nfunction App() {\r\n  \r\n  if(isBrowser){\r\n    return <DesktopApp/>\r\n  }\r\n  if(isMobile){\r\n    return <MobileApp/>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","\r\nimport {getUserWalletBalance ,DeriEnv,connectWallet} from \"../lib/web3js/indexV2\";\r\nimport config from '../config.json'\r\nimport { formatBalance } from \"../utils/utils\";\r\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\r\n\r\nconst walletKey = 'mm_wallet_key'\r\n\r\n\r\nclass Wallet {\r\n  \r\n  detail = {}\r\n  \r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      detail : observable,\r\n      loadWalletBalance : action,\r\n      connect : action      \r\n    })\r\n  }\r\n\r\n  isConnected = () => !!this.detail.account;\r\n\r\n  connect =  async () => {\r\n    const res = await connectWallet();\r\n    return new Promise(async (resolve,reject) => {\r\n      if(res.success){\r\n        const {chainId,account} = res\r\n        const wallet = await this.loadWalletBalance(chainId,account);        \r\n        resolve(wallet)\r\n      } else {\r\n        reject(null)\r\n      }\r\n    })\r\n  }\r\n\r\n  loadWalletBalance = async (chainId,account) => {\r\n    const balance = await getUserWalletBalance(chainId,account)\r\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\r\n    const env = DeriEnv.get();\r\n    const {chainInfo} = config[env]\r\n    \r\n    if(chainInfo[chainId]){\r\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\r\n    }\r\n    this.detail = detail;\r\n    return detail;\r\n  }\r\n\r\n  get = () => {\r\n    return this.detail;\r\n  }\r\n\r\n  remove = () => {\r\n    this.detail = null;\r\n    sessionStorage.removeItem(walletKey);\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\r\nimport WebSocket from \"socket.io-client\";\r\n\r\nclass Oracle {\r\n  symbol = 'BTCUSD'\r\n  index = 0.00\r\n  kData = []\r\n  ws = null\r\n  paused = false;\r\n  listeners = {}\r\n\r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      index : observable,\r\n      kData : observable,\r\n      setIndex : action,\r\n    })\r\n    this.initWebSocket()\r\n  }\r\n\r\n  initWebSocket(){\r\n    if(this.ws === null) {\r\n      this.ws = new WebSocket('wss://api.deri.finance', {\r\n        transports: ['websocket'],\r\n        path: '/kline'\r\n      })\r\n      this.ws.on('connect',() => console.log('ws is already connected'));\r\n    }    \r\n  }\r\n\r\n  // loadIndex(symbol){\r\n  //   this.resume();\r\n  //   this.setSymbol(symbol)\r\n  //   this.ws.emit('get_kline', {'symbol': symbol, 'time_type': 'min', 'bars': 10})\r\n  // }\r\n\r\n  load(symbol,timeType = 'min'){\r\n    this.setSymbol(symbol)\r\n    this.ws.on('kline_update',data => {\r\n      const obj = {}\r\n      let time = data.time\r\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\r\n        obj.time = time \r\n        obj.low = Number(data.low)\r\n        obj.high = Number(data.high)\r\n        obj.open = Number(data.open)\r\n        obj.close = Number(data.close)\r\n        obj.volume = Number(data.volume)\r\n        obj.time_type = data.time_type\r\n        obj.symbol = data.symbol\r\n        if(!this.paused) {\r\n          this.setIndex(obj.close)\r\n          for(const key of Object.keys(this.listeners)){\r\n            if(typeof this.listeners[key] === 'function'){\r\n              this.listeners[key](obj)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\r\n  }\r\n\r\n  addListener(id,listener){\r\n    if(!this.listeners[id]) {\r\n      this.listeners[id] = listener\r\n    }    \r\n  }\r\n\r\n\r\n\r\n  unsubscribeBars(uid){\r\n    this.ws.emit('un_get_kline', {\r\n      symbol : this.symbol, 'time_type' : 'min', bars : 1000\r\n    })\r\n  }\r\n\r\n\r\n  loadHistory(symbol,timeType,callback){\r\n    this.ws.on('kline_history', data => {\r\n      const history = data.map(el => {\r\n        return {\r\n          time: el.time,\r\n          low: Number(el.low),\r\n          high: Number(el.high),\r\n          open: Number(el.open),\r\n          close: Number(el.close),\r\n          volume: Number(el.volume)\r\n        }\r\n      })\r\n      if(callback){\r\n        console.log('history ->',history[history.length-1].time)\r\n        callback(history)\r\n      }\r\n    })\r\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\r\n    // this.emit(symbol);\r\n  }\r\n\r\n  // start(symbol){\r\n  //   this.initWebSocket();\r\n  //   this.loadIndex(symbol);\r\n  //   this.ws.on('kline_update',data => {\r\n  //     const obj = {}\r\n  //     let time = data.time\r\n  //     if (data.symbol === this.symbol) {\r\n  //       obj.time = time \r\n  //       obj.low = Number(data.low)\r\n  //       obj.high = Number(data.high)\r\n  //       obj.open = Number(data.open)\r\n  //       obj.close = Number(data.close)\r\n  //       obj.volume = Number(data.volume)\r\n  //       this.setIndex(obj.close)\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  resume(){\r\n    this.setPause(false)\r\n  }\r\n\r\n  pause(){\r\n    this.setPause(true)\r\n  }\r\n\r\n  setIndex(index){\r\n    if(!this.paused) {\r\n      this.index = index;\r\n    }\r\n  }\r\n\r\n  setSymbol(symbol){\r\n    this.symbol = symbol\r\n  }\r\n\r\n  setPause(paused){\r\n    this.paused = paused\r\n  }\r\n}\r\n\r\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\r\n\r\nexport default class Position {\r\n\r\n  callback = () => {}\r\n   wallet = null;\r\n   spec = null\r\n \r\n\r\n   async load(wallet,spec,callback){\r\n     if(spec && spec.pool){\r\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account)\r\n      if(position){\r\n        if(callback){\r\n          callback(position)\r\n        }\r\n      }\r\n      this.start(wallet,spec,callback)\r\n      return position;\r\n     }\r\n   }\r\n\r\n   start(wallet,spec,callback){\r\n     if(!this.interval){\r\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \r\n      if(wallet){\r\n        this.wallet= wallet; \r\n        }\r\n        if(spec){\r\n          this.spec = spec\r\n        }\r\n        if(callback){\r\n          this.callback = callback;\r\n        }\r\n     }\r\n   }\r\n\r\n   pause(){\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n   }\r\n\r\n   resume(wallet,spec,callback){\r\n     this.start(wallet,spec,callback || this.callback)\r\n   }\r\n\r\n   \r\n\r\n\r\n \r\n}","import { getSpecification } from \"../lib/web3js/indexV2\";\r\n\r\nexport default class Contract {\r\n\r\n  async load(wallet,config){\r\n    if(!this.info || (this.info && config.pool !== this.info.pool)){\r\n      const info = await getSpecification(wallet.detail.chainid,config.pool)\r\n      this.setInfo(info);\r\n\r\n    }\r\n    return this.info\r\n  }\r\n\r\n  setInfo(info){\r\n    // if(info.status == \"fail\"){\r\n    //   info = {\r\n    //      bSymbol:'BUSD',\r\n    //      symbol:'BTCUSD',\r\n    //      multiplier:'0.0001',\r\n    //      fundingRateCoefficient:'0.0000025',\r\n    //      minInitialMarginRatio:0.1,\r\n    //      minMaintenanceMarginRatio:0.05,\r\n    //      feeRatio:0.0005,\r\n    //  }\r\n    // }\r\n    this.info = info;\r\n  }\r\n\r\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\r\n\r\n\r\nexport default class History {\r\n\r\n   async load(wallet,config){\r\n      if(wallet.detail.chainId && config && config.pool){\r\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account);    \r\n         return all;\r\n      } else {\r\n         return []\r\n      }\r\n   }\r\n}","import { makeObservable, observable, action } from \"mobx\";\r\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\r\n\r\nexport default class Config {\r\n  all = []\r\n\r\n  constructor(){\r\n    makeObservable(this,{\r\n      all : observable,\r\n      setAll : action\r\n    })\r\n  }\r\n\r\n  async load(){\r\n    const configs = await getContractAddressConfig(DeriEnv.get())\r\n    this.setAll(configs)\r\n    return configs;\r\n  }\r\n\r\n  setAll(all){\r\n    this.all = all;\r\n  }\r\n  \r\n}","import { observable, action, computed, makeObservable } from \"mobx\";\r\nimport Oracle from \"./Oracle\";\r\nimport Position from \"./Position\";\r\nimport Contract from \"./Contract\";\r\nimport History from './History'\r\nimport Config from \"./Config\";\r\nimport { eqInNumber } from \"../utils/utils\";\r\nimport { getFundingRate } from \"../lib/web3js/api/contractQueryApi\";\r\n\r\n/**\r\n * 交易模型\r\n * 关联对象\r\n * 1. chain\r\n * 2. Oracle\r\n * 3. position\r\n * 4. contract\r\n * 5. history\r\n * 计算\r\n * 1. dynamic balance\r\n * 2. available blance\r\n * 响应事件\r\n * 1. chain change\r\n * 2. chain’s symbol changed\r\n * 3. index update\r\n * 4. volum change\r\n * 5. margin change\r\n * 输出\r\n * 1. dynamic balance\r\n * 2. margin\r\n * 3. available balance\r\n * 4. volume\r\n * 5. specs\r\n * 6. spec\r\n * 7. position\r\n * 8. contract\r\n * 9. fundingRate\r\n */\r\n\r\nexport default class Trading {\r\n  wallet = null;\r\n  configs = [] \r\n  config = null;\r\n  fundingRate = '--' \r\n  index = null\r\n  volume = ''\r\n  paused = false\r\n  margin = ''\r\n  position = {}\r\n  contract = {}\r\n  fundingRate = {}\r\n  history = []\r\n  userSelectedDirection = 'long'\r\n\r\n  constructor(){\r\n    makeObservable(this,{\r\n      index : observable,\r\n      volume : observable,\r\n      margin : observable,\r\n      fundingRate : observable,\r\n      position : observable,\r\n      history : observable,\r\n      contract : observable,\r\n      paused : observable,\r\n      userSelectedDirection : observable,\r\n      setWallet :action,\r\n      setConfigs : action,\r\n      setConfig : action,\r\n      setIndex : action,\r\n      setContract : action,\r\n      setPosition : action,\r\n      setVolume : action,\r\n      setUserSelectedDirection : action,\r\n      setFundingRate : action,\r\n      setHistory : action,\r\n      setPaused : action,\r\n      amount : computed,\r\n      fundingRateTip : computed,\r\n      direction : computed,\r\n      volumeDisplay : computed\r\n    })\r\n    this.configInfo = new Config();\r\n    this.oracle = new Oracle();\r\n    this.positionInfo = new Position()\r\n    this.contractInfo = new Contract();\r\n    this.historyInfo = new History()\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  async init(wallet){\r\n    if(!this.wallet || wallet.detail.account !== this.wallet.detail.account){\r\n      this.setWallet(wallet);\r\n      //配置信息，如chainId、pool address、symbol、baseToken等\r\n      const all = await this.configInfo.load();\r\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\r\n      const defaultConfig = this.getDefaultConfig(this.configs,wallet);\r\n      this.setConfig(defaultConfig);\r\n      this.onConfigChange(this.wallet,this.config,true)\r\n    }\r\n    this.setVolume('')\r\n  }\r\n\r\n  async switch(spec){\r\n    const cur = this.configs.find(config => config.pool === spec.pool)\r\n    const changed = !this.config || spec.pool !== this.config.pool\r\n    if(cur){\r\n      this.setConfig(cur)\r\n      this.pause();\r\n      this.onConfigChange(this.wallet,cur,changed);  \r\n      if(changed){\r\n        this.store(cur)\r\n      }    \r\n      this.resume()\r\n      this.setVolume('')\r\n    }\r\n  }\r\n\r\n  async onConfigChange(wallet,config,symbolChanged){\r\n     //position\r\n     this.positionInfo.load(wallet,config,position => {       \r\n        this.setPosition(position);\r\n     })\r\n\r\n     //切换指数\r\n    if(symbolChanged){\r\n      this.oracle.unsubscribeBars();\r\n      this.oracle.addListener('trading',data => {\r\n        this.setIndex(data.close)\r\n      })\r\n      this.oracle.load(config.symbol)\r\n    }\r\n     //contract\r\n     const contract = await this.contractInfo.load(wallet,config)\r\n     this.setContract(contract)\r\n\r\n     //funding rate\r\n     const fundingRate = await this.loadFundingRate(wallet,config)\r\n     this.setFundingRate(fundingRate)\r\n\r\n     //history\r\n     const history = await this.historyInfo.load(wallet,config);\r\n     this.setHistory(history);\r\n  }\r\n\r\n\r\n  getDefaultConfig(all = [],wallet){\r\n    //优先使用session storage 的\r\n    if(all.length > 0){    \r\n      const fromStore = this.getFromStore();\r\n      if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\r\n        return fromStore;\r\n      } else {\r\n        return all[0]\r\n      }\r\n    }\r\n    return {}    \r\n  }\r\n\r\n  //存起来\r\n  store(config){\r\n    if(config){\r\n      sessionStorage.setItem('current-trading-pool',JSON.stringify(config))\r\n    }\r\n  }\r\n\r\n  getFromStore(){\r\n    return JSON.parse(sessionStorage.getItem('current-trading-pool'))\r\n  }\r\n\r\n  async refresh(){\r\n    this.pause()\r\n    const position = await this.positionInfo.load(this.wallet,this.config);\r\n    this.setPosition(position)\r\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\r\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)\r\n    this.setFundingRate(fundingRate)\r\n    const history = await this.historyInfo.load(this.wallet,this.config)\r\n    if(history){\r\n      this.setHistory(history)\r\n    }\r\n    this.setVolume('')\r\n    this.resume();\r\n  }\r\n\r\n  /**\r\n   * 暂停实时读取index和定时读取position\r\n   */\r\n  pause(){\r\n    this.setPaused(true)\r\n    this.oracle.pause();\r\n    this.positionInfo.pause();\r\n  }\r\n\r\n  /**\r\n   * 恢复读取\r\n   */\r\n  resume(){\r\n    this.setPaused(false)\r\n    this.oracle.resume();\r\n    this.positionInfo.resume(this.wallet,this.config);\r\n  }\r\n\r\n  setWallet(wallet){\r\n    this.wallet = wallet;\r\n  }\r\n\r\n  setConfigs(configs){\r\n    this.configs = configs\r\n  }\r\n\r\n  setConfig(config){\r\n    this.config = config\r\n  }\r\n\r\n  setIndex(index){\r\n    this.index = index;\r\n  }\r\n\r\n  setPosition(position){\r\n    if(position){\r\n      this.position = position\r\n    }\r\n  }\r\n\r\n  setContract(contract){\r\n    this.contract = contract\r\n  }\r\n\r\n  setHistory(history){\r\n    this.history = history\r\n  }\r\n\r\n  setFundingRate(fundingRate){\r\n    this.fundingRate = fundingRate;\r\n  }\r\n\r\n  setVolume(volume){\r\n    this.volume = volume;\r\n  }\r\n\r\n  setPaused(paused){\r\n    this.paused = paused\r\n  }\r\n\r\n  setUserSelectedDirection(direction){\r\n    this.userSelectedDirection = direction\r\n  }\r\n\r\n  setMargin(margin){\r\n    this.margin = margin\r\n    if(this.contract){\r\n      const volume = (+margin) / ((+this.index) * (+this.contract.multiplier) * (+this.contract.minInitialMarginRatio))      \r\n      if(!isNaN(volume)){\r\n        this.setVolume(Math.abs(volume))\r\n        console.log('volume ',volume)\r\n      }\r\n    }\r\n  }\r\n\r\n  get volumeDisplay(){\r\n    if(this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\r\n      return '';\r\n    } else if(this.margin !== '') {\r\n        if((+this.volume) > Math.abs(+this.position.volume)) {\r\n          const result = parseInt(Math.abs(this.volume) - Math.abs(this.position.volume))\r\n          return result\r\n        } else {\r\n          const result = parseInt(Math.abs(this.position.volume) - Math.abs(this.volume));          \r\n          return result\r\n        }\r\n    } else {\r\n      return this.volume\r\n    }\r\n  }\r\n\r\n  \r\n  //计算available balance、contract value、\r\n  get amount(){\r\n    if(this.index && this.position && this.contract && this.volume !== ''){\r\n      //合同价值\r\n      let curVolume = Math.abs(this.volume);\r\n      const originVolume = Math.abs(this.volumeDisplay);\r\n      //如果不是通过marge 算出来的volume\r\n      if(this.margin === '') {       \r\n        if(this.userSelectedDirection === 'long') {\r\n          if((+this.position.volume) > 0) {\r\n            curVolume = curVolume + (+this.position.volume)\r\n          } else {\r\n            curVolume = Math.abs(this.position.volume) - curVolume\r\n          }         \r\n        } else {\r\n          if((+this.position.volume) > 0){\r\n            curVolume =  (+this.position.volume) - curVolume\r\n          } else {\r\n            curVolume = Math.abs(this.position.volume) + (+curVolume)\r\n          }\r\n        }\r\n      }\r\n      const contractValue = Math.abs(curVolume) * this.index * this.contract.multiplier\r\n      const dynBalance = (+this.position.margin) + (+this.position.unrealizedPnl)\r\n      const margin = contractValue * this.contract.minInitialMarginRatio\r\n      const leverage = (+contractValue / +dynBalance).toFixed(1);\r\n      const balance = ((+dynBalance) - (+margin)).toFixed(2)\r\n      const available = balance > 0 ? balance : 0\r\n      const exchanged = (originVolume * (+this.contract.multiplier)).toFixed(4)\r\n      return {\r\n        dynBalance, //动态余额\r\n        margin,         //存入保证金\r\n        available,      //可用余额\r\n        exchanged,      //换算的值\r\n        leverage,        //杠杆\r\n      }\r\n    } else if(this.position && this.position.margin){\r\n      const dynBalance = ((+this.position.margin) + (+this.position.unrealizedPnl)).toFixed(2)\r\n      const margin = (+this.position.marginHeld).toFixed(2)\r\n      const available = ((+dynBalance) - (+margin)).toFixed(2)\r\n      return {\r\n        dynBalance,\r\n        margin,\r\n        available,\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  get direction(){    \r\n    // 正仓\r\n    if(this.margin !== ''){\r\n      if((+this.position.volume) > 0) {\r\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\r\n          return 'long'\r\n        } else {\r\n          return 'short'\r\n        }\r\n      } else if((+this.position.volume) < 0){\r\n        //负仓\r\n        if((+this.volume) > Math.abs(+this.position.volume)){\r\n          return 'short'\r\n        } else {\r\n          return 'long'\r\n        }\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  //资金费率\r\n  async loadFundingRate(wallet,config){\r\n    if(wallet && config){    \r\n      const res = await getFundingRate(wallet.detail.chainId,config.pool)\r\n      return res;\r\n    }\r\n  }\r\n\r\n  get fundingRateTip(){\r\n    if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\r\n      return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\r\n      `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \r\n    }\r\n    return ''\r\n  }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter} from 'react-router-dom'\r\nimport App from './App';\r\nimport './assets/deri.less';\r\nimport { Provider } from 'mobx-react';\r\nimport Wallet from './model/Wallet';\r\n//note dont remove zhe line\r\nimport NumberPolyfill from './lib/polyfill/numberPolyfill'\r\nimport Trading from './model/Trading';\r\nimport { DeriEnv } from './lib/web3js/config';\r\n\r\nconst wallet = new Wallet();\r\nconst trading = new Trading()\r\n\r\nconsole.log(process.env)\r\nif(process.env.NODE_ENV === 'production') {\r\n  DeriEnv.set('prod')\r\n} \r\nDeriEnv.set('prod')\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider wallet={wallet}  trading={trading} >\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\r\nimport { getSlpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity info of SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.bTokenBalance\r\n * @returns {string} response.shares\r\n */\r\nexport const getSlpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\r\n      bToken.balance(poolAddress),\r\n      bToken.balance(accountAddress),\r\n      slpPool.getLiquidity(accountAddress),\r\n    ]);\r\n\r\n    return {\r\n      poolLiquidity: liquidity.toString(),\r\n      bTokenBalance: bTokenBalance.toString(),\r\n      shares: shares.toString(),\r\n    };\r\n  }\r\n  console.log('no SlpPool address, please check');\r\n  return {};\r\n};\r\n\r\n/**\r\n * Add liquidity to SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addSlpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    try {\r\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity to SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeSlpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    try {\r\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Unlock the account in the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get account balance in Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getSlpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  clpPoolFactory,\r\n  lTokenFactory,\r\n} from '../factory/contracts';\r\nimport { bg, getClpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity Info of the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.totalSupply\r\n * @returns {string} response.poolLiquidity\r\n * @returns {string} response.shares\r\n * @returns {string} response.shareValue\r\n * @returns {string} response.maxRemovableShares\r\n */\r\nexport const getClpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const clpPool = clpPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const { liquidity } = await clpPool.getStateValues();\r\n  //console.log(liquidity);\r\n\r\n  return {\r\n    totalSupply: lTokenTotalSupply.toString(),\r\n    poolLiquidity: liquidity.toString(),\r\n    shares: lTokenBalance.toString(),\r\n    shareValue: (lTokenTotalSupply.eq(0)\r\n      ? bg(0)\r\n      : liquidity.div(lTokenTotalSupply)\r\n    ).toString(),\r\n    maxRemovableShares: lTokenBalance.toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Add liquidity to the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addClpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clpPool = clpPoolFactory(chainId, poolAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\r\n      console.log(tx, typeof tx);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity of the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeClpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clpPool = clpPoolFactory(chainId, poolAddress);\r\n    try {\r\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Unlock the account in the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get account balance in Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getClpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\r\nimport {\r\n  toChecksumAddress,\r\n  getNetworkName,\r\n  deriToString,\r\n  deriToBool,\r\n  deriToNatural,\r\n  getPoolContractAddress,\r\n} from '../utils';\r\n// import { getLiquidityUsed } from \"./contractApi\";\r\n\r\nexport const getUserInfo = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.chainId`,\r\n      `${userAddress}.claim.amount`,\r\n      `${userAddress}.claim.deadline`,\r\n      `${userAddress}.claim.nonce`,\r\n      `${userAddress}.claim.v`,\r\n      `${userAddress}.claim.r`,\r\n      `${userAddress}.claim.s`,\r\n      `${userAddress}.claim.valid`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfo', err));\r\n  if (res) {\r\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\r\n    return {\r\n      chainId: deriToString(chainId),\r\n      amount: deriToNatural(amount).toString(),\r\n      deadline: deriToString(deadline),\r\n      nonce: deriToString(nonce),\r\n      v: deriToString(v),\r\n      r,\r\n      s,\r\n      valid: deriToBool(valid),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserInfoHarvest = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.harvest.lp`,\r\n      `${userAddress}.claim.harvest.trade`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfoHarvest', err));\r\n  if (res) {\r\n    const [harvestLp, harvestTrade] = res;\r\n    return {\r\n      lp: deriToNatural(harvestLp).toString(),\r\n      trade: deriToNatural(harvestTrade).toString(),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserInfoTotal = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([`${userAddress}.claim.total`])\r\n    .catch((err) => console.log('getUserInfoTotal', err));\r\n  if (res) {\r\n    const [total] = res;\r\n    return {\r\n      total: deriToNatural(total).toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user claim info from database\r\n * @async\r\n * @method\r\n * @param {string} userAddress - account address\r\n * @returns {Object} response\r\n * @returns {string} resposne.chainId\r\n * @returns {BigNumber} response.amount\r\n * @returns {string} response.deadline\r\n * @returns {string} response.nonce\r\n * @returns {string} response.v\r\n * @returns {string} response.r\r\n * @returns {string} response.s\r\n * @returns {bool} response.valid\r\n * @returns {BigNumber} response.lp\r\n * @returns {BigNumber} response.trade\r\n * @returns {string} response.total\r\n */\r\nexport const getUserInfoAll = async (userAddress) => {\r\n  const userInfo = await getUserInfo(userAddress);\r\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\r\n  const userInfoTotal = await getUserInfoTotal(userAddress);\r\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\r\n};\r\n\r\n/**\r\n * Get pool liquidity\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {symbol} response.symbol\r\n */\r\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\r\n  // use the dev database\r\n  const db = databaseFactory();\r\n  try {\r\n    const res = await db\r\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\r\n      .catch((err) => console.log('getPoolLiquidity', err));\r\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\r\n    if (res) {\r\n      const [liquidity] = res;\r\n      return {\r\n        liquidity: deriToNatural(liquidity).toString(),\r\n        symbol,\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get pool apy\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\r\n  //console.log('getPoolInfoApy', chainId, poolAddress);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get apy of the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getSlpPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get apy of the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getClpPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get user info of the pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} userAddress\r\n * @returns {Object} response\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\r\n  const db = databaseFactory(true);\r\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getUserInfoInPool', err));\r\n    if (res) {\r\n      const [volume1h, volume24h] = res;\r\n      return {\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\r\n  const db = databaseAirdropFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.chainId`,\r\n      `${userAddress}.claim.amount`,\r\n      `${userAddress}.claim.deadline`,\r\n      `${userAddress}.claim.nonce`,\r\n      `${userAddress}.claim.v1`,\r\n      `${userAddress}.claim.r1`,\r\n      `${userAddress}.claim.s1`,\r\n      `${userAddress}.claim.v2`,\r\n      `${userAddress}.claim.r2`,\r\n      `${userAddress}.claim.s2`,\r\n      `${userAddress}.claim.valid`,\r\n      // `${userAddress}.claim.harvest.lp`,\r\n      // `${userAddress}.claim.harvest.trade`,\r\n      // `${userAddress}.claim.total`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\r\n  if (res) {\r\n    const [\r\n      chainId,\r\n      amount,\r\n      deadline,\r\n      nonce,\r\n      v1,\r\n      r1,\r\n      s1,\r\n      v2,\r\n      r2,\r\n      s2,\r\n      valid,\r\n      // harvestLp,\r\n      // harvestTrade,\r\n      // total,\r\n    ] = res;\r\n    return {\r\n      chainId: deriToString(chainId),\r\n      amount: deriToNatural(amount).toString(),\r\n      deadline: deriToString(deadline),\r\n      nonce: deriToString(nonce),\r\n      v1: deriToString(v1),\r\n      r1,\r\n      s1,\r\n      v2: deriToString(v2),\r\n      r2,\r\n      s2,\r\n      valid: deriToBool(valid),\r\n      // lp: deriToNatural(harvestLp),\r\n      // trade: deriToNatural(harvestTrade),\r\n      // total: deriToString(total),\r\n    };\r\n  }\r\n};\r\n","import Web3 from 'web3';\r\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\r\n\r\nconst MAX_GAS_AMOUNT = 532731;\r\n\r\nexport class Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    this.chainId = chainId;\r\n    this.contractAddress = contractAddress;\r\n    if (isProvider) {\r\n      this.web3 = web3Factory(chainId);\r\n    } else {\r\n      this.web3 = metaMaskWeb3();\r\n    }\r\n  }\r\n  setAccount(accountAddress) {\r\n    this.accountAddress = accountAddress;\r\n    return this;\r\n  }\r\n  setPool(poolAddress) {\r\n    this.poolAddress = poolAddress;\r\n    return this;\r\n  }\r\n  async _call(method, args = []) {\r\n    return await this.contract.methods[method](...args).call();\r\n  }\r\n\r\n  async _estimatedGas(method, args = [], accountAddress) {\r\n    let gas = 0;\r\n    for (let i = 0; i < 20; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (err) {\r\n        //console.log(\"err\", err);\r\n      }\r\n    }\r\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\r\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\r\n    return gas;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt === null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _transact(method, args, accountAddress) {\r\n    const [gas, gasPrice] = await Promise.all([\r\n      this._estimatedGas(method, args, accountAddress),\r\n      this.web3.eth.getGasPrice(),\r\n    ]);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods[method](...args).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\nimport {\r\n  hasInvalidArgsValue,\r\n  getBTCUSDPrice,\r\n  getOracleInfo,\r\n  deriToNatural,\r\n  bg,\r\n} from '../utils';\r\nimport {\r\n  calculateFundingRate,\r\n  calculateLiquidityUsed,\r\n  processFundingRate,\r\n} from '../calculation';\r\n\r\n/* eslint-disable */\r\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class PerpetualPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\r\n  }\r\n\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async getStateValues() {\r\n    let result;\r\n    const defaultValue = bg(0);\r\n    try {\r\n      const res = await this._call('getStateValues');\r\n      //console.log(\"getStateValues() raw:\", res)\r\n      result = {\r\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\r\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\r\n        liquidity: deriToNatural(res.liquidity),\r\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\r\n        tradersNetCost: deriToNatural(res.tradersNetCost),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        cumuFundingRate: defaultValue,\r\n        cumuFundingRateBlock: defaultValue,\r\n        liquidity: defaultValue,\r\n        tradersNetCost: defaultValue,\r\n        tradersNetVolume: defaultValue,\r\n      };\r\n      console.log(`getStateValues: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async getParameters() {\r\n    let result;\r\n    const defaultValue = bg(0);\r\n    try {\r\n      const res = await this._call('getParameters');\r\n      // console.log(\"getParameters() raw: \", res)\r\n      result = {\r\n        multiplier: deriToNatural(res.multiplier),\r\n        feeRatio: deriToNatural(res.feeRatio),\r\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\r\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\r\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\r\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\r\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\r\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\r\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\r\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\r\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\r\n        priceDelayAllowance: bg(res.priceDelayAllowance),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        multiplier: defaultValue,\r\n        feeRatio: defaultValue,\r\n        minPoolMarginRatio: defaultValue,\r\n        minInitialMarginRatio: defaultValue,\r\n        minMaintenanceMarginRatio: defaultValue,\r\n        minAddLiquidity: defaultValue,\r\n        redemptionFeeRatio: defaultValue,\r\n        fundingRateCoefficient: defaultValue,\r\n        minLiquidationReward: defaultValue,\r\n        maxLiquidationReward: defaultValue,\r\n        liquidationCutRatio: defaultValue,\r\n        priceDelayAllowance: defaultValue,\r\n      };\r\n      console.log(`getParameters: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt == null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _estimatedGas(method, args, accountAddress) {\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    let gas = 0;\r\n    for (let i = 0; i < 20; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (err) {\r\n        //console.log(\"err\", err);\r\n      }\r\n    }\r\n    if (gas == 0) gas = 532731;\r\n    if (gas > 532731) gas = 532731;\r\n    return gas;\r\n  }\r\n\r\n  async _transactPool(method, args = [], accountAddress) {\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\r\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\r\n\r\n    const [gas, gasPrice] = await Promise.all([\r\n      this._estimatedGas(method, [...args, ...signed], accountAddress),\r\n      this.web3.eth.getGasPrice(),\r\n    ]);\r\n    console.log(`gasPrice ${gasPrice / 1000000000} GW`);\r\n\r\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n\r\n  async getFundingRate() {\r\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\r\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\r\n    try {\r\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\r\n      const {\r\n        multiplier,\r\n        fundingRateCoefficient,\r\n        minPoolMarginRatio,\r\n      } = await this.getParameters();\r\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\r\n      const args1 = [\r\n        tradersNetVolume,\r\n        price,\r\n        multiplier,\r\n        liquidity,\r\n        fundingRateCoefficient,\r\n      ];\r\n      if (hasInvalidArgsValue(...args1)) {\r\n        fundingRate = '0';\r\n        fundingRatePerBlock = '0';\r\n      } else {\r\n        fundingRatePerBlock = calculateFundingRate(...args1);\r\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\r\n      }\r\n      const args2 = [\r\n        tradersNetVolume,\r\n        price,\r\n        multiplier,\r\n        liquidity,\r\n        minPoolMarginRatio,\r\n      ];\r\n      if (hasInvalidArgsValue(...args2)) {\r\n        liquidityUsed = '0';\r\n      } else {\r\n        liquidityUsed = calculateLiquidityUsed(...args2);\r\n      }\r\n      return {\r\n        price,\r\n        multiplier: multiplier.toString(),\r\n        fundingRate: fundingRate,\r\n        fundingRatePerBlock: fundingRatePerBlock,\r\n        tradersNetVolume: tradersNetVolume.toString(),\r\n        liquidity: liquidity.toString(),\r\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n        liquidityUsed: liquidityUsed,\r\n        poolMarginRatio: minPoolMarginRatio.toString(),\r\n      };\r\n    } catch (err) {\r\n      console.log('PerpetualPool#gerFundingRate():', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  async depositMargin(accountAddress, amount) {\r\n    //await this.web3.eth.getAccounts(console.log)\r\n    console.log('depositMargin');\r\n    let res;\r\n    try {\r\n      let tx = await this._transactPool(\r\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [amount],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      console.log('here');\r\n      res = { success: false, error: err };\r\n    }\r\n    return res;\r\n  }\r\n  async _getBlockInfo(blockNumber) {\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\r\n    let events = [];\r\n    //let toBlock = await this._getBlockInfo(\"latest\");\r\n    //toBlock = toBlock.number;\r\n    let amount;\r\n    if (this.chainId === '56') {\r\n      amount = 1999;\r\n    } else {\r\n      amount = 4999;\r\n    }\r\n    if (fromBlock + amount > to) {\r\n      amount = to - fromBlock;\r\n    }\r\n    while (fromBlock <= to) {\r\n      //console.log('tick')\r\n      let es = await this.contract.getPastEvents(eventName, {\r\n        filter: filter,\r\n        fromBlock,\r\n        toBlock: fromBlock + amount,\r\n      });\r\n      for (let e of es) {\r\n        events.push(e);\r\n      }\r\n      fromBlock += amount + 1;\r\n      if (fromBlock + amount > to) {\r\n        amount = to - fromBlock;\r\n      }\r\n    }\r\n    return events;\r\n  }\r\n  async _getTimeStamp(blockNumber) {\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  _calculateFee(volume, price, multiplier, feeRatio) {\r\n    return bg(volume)\r\n      .abs()\r\n      .times(price)\r\n      .times(multiplier)\r\n      .times(feeRatio)\r\n      .toString();\r\n  }\r\n}\r\n","import { Contract } from './contract';\r\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\r\n/* eslint-enable */\r\n\r\nexport class BTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async isUnlocked(accountAddress) {\r\n    let allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      this.poolAddress,\r\n    ]);\r\n    allowance = deriToNatural(allowance);\r\n    return allowance.gt(0);\r\n  }\r\n\r\n  async unlock(accountAddress) {\r\n    return await this._transact(\r\n      'approve',\r\n      [this.poolAddress, MAX_VALUE],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n  async _balance(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balance(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balance(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n\r\n  // for slp pool use\r\n  // async balanceOf(poolAddress) {\r\n  //   //const res = await this._call('balanceOf', [poolAddress])\r\n  //   let result\r\n  //   const [res, decimals] = await Promise.all([\r\n  //     this._balance(this.poolAddress),\r\n  //     this.decimals(),\r\n  //   ])\r\n  //   result = bg(res, -decimals)\r\n  //   return result\r\n  // }\r\n}\r\n","import { deriToNatural, bg } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class PTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async getPositionInfo(accountAddress) {\r\n    let result = {};\r\n    try {\r\n      const res = await this._call('getPosition(address)', [accountAddress]);\r\n      //console.log(\"getPositionInfo() raw:\", res)\r\n      result = {\r\n        volume: deriToNatural(res[0]),\r\n        cost: deriToNatural(res[1]),\r\n        lastCumuFundingRate: deriToNatural(res[2]),\r\n        margin: deriToNatural(res[3]),\r\n        lastUpdateTimestamp: bg(res[4]),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        volume: bg(0),\r\n        cost: bg(0),\r\n        lastCumuFundingRate: bg(0),\r\n        margin: bg(0),\r\n        lastUpdateTimestamp: bg(0),\r\n      };\r\n      console.log(`getPositionInfo: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async exists(accountAddress) {\r\n    return await this._call('exists', [accountAddress]);\r\n  }\r\n}\r\n","import { deriToNatural } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class LTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async balance(accountAddress) {\r\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\r\n    //console.log(\"> lToken balance\", res.toString())\r\n    return res;\r\n  }\r\n\r\n  async totalSupply() {\r\n    const res = deriToNatural(await this._call('totalSupply'));\r\n    //console.log(\"> lToken totalSupply\", res.toString())\r\n    return res;\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { getDBProviderUrlsConfig } from '../config/database';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      DB_CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async getValues(keyArray) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods.getValues(keyArray).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import { getDBProviderUrlsConfig } from '../config/database';\r\nimport Web3 from 'web3';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseWormholeContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async signature(accountAddress) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods['signature'](accountAddress).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import { getDBProviderUrlsConfig } from '../config/database';\r\nimport Web3 from 'web3';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseAirdropContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async getValues(keyArray) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods.getValues(keyArray).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80636b0509b1116100975780639a8a0592116100665780639a8a0592146101c85780639d76ea58146101d0578063b06faf62146101d8578063f77c4791146101e0576100f5565b80636b0509b114610185578063701422691461018d57806379a87b19146101a057806392eefe9b146101b5576100f5565b806351dfdb48116100d357806351dfdb4814610137578063560ebbd11461014a57806358c700a31461016a578063677528cb14610172576100f5565b806306fdde03146100fa57806320606b7014610118578063325564ec1461012d575b600080fd5b6101026101e8565b60405161010f9190610dbf565b60405180910390f35b610120610209565b60405161010f9190610d48565b61013561022d565b005b610135610145366004610bab565b6103a1565b61015d610158366004610ca1565b61066f565b60405161010f9190610d3d565b610120610684565b610135610180366004610bea565b61068a565b6101206107b1565b61013561019b366004610c15565b6107d5565b6101a8610acc565b60405161010f9190610cec565b6101356101c3366004610bab565b610adb565b610120610b77565b6101a8610b7d565b61015d610b8c565b6101a8610b9c565b6040518060400160405280600581526020016415985d5b1d60da1b81525081565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6000546001600160a01b031633146102605760405162461bcd60e51b815260040161025790610f7f565b60405180910390fd5b600254600160a01b900460ff161561028a5760405162461bcd60e51b81526004016102579061106a565b6001541580159061029d57506001544210155b6102b95760405162461bcd60e51b815260040161025790610e12565b60035460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926102f19291169060001990600401610d24565b602060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610c81565b506002805460ff60a01b1916600160a01b17908190556001546040517fce3275b30d22151f82ee29ce7ea685563b66ff98e56afc576a94d8a88c676ec092610397929130916001600160a01b031690611153565b60405180910390a1565b6000546001600160a01b031633146103cb5760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156103f55760405162461bcd60e51b81526004016102579061106a565b6000816001600160a01b03166358c700a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561043057600080fd5b505afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610cb9565b90506000826001600160a01b03166379a87b196040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610bce565b905081158015906104ee5750814210155b61050a5760405162461bcd60e51b815260040161025790610ec5565b6001600160a01b03811630146105325760405162461bcd60e51b815260040161025790610fd5565b6003546040516370a0823160e01b81526001600160a01b03909116906323b872dd908590309084906370a082319061056e908590600401610cec565b60206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190610cb9565b6040518463ffffffff1660e01b81526004016105dc93929190610d00565b602060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190610c81565b507f18ce2512842fddee8c808fb717780a66007d1da9a942dd32625813c82d53c34282843060405161066293929190611153565b60405180910390a1505050565b60056020526000908152604090205460ff1681565b60015481565b6000546001600160a01b031633146106b45760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff16156106de5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b0382166107045760405162461bcd60e51b8152600401610257906110d3565b60038110158015610717575061016d8111155b6107335760405162461bcd60e51b815260040161025790610e68565b61074081620151806111a0565b61074a9042611188565b6001819055600280546001600160a01b0319166001600160a01b0385811691909117918290556040517fe2a3b7ba8269be3ca7ba4627f844bb9abd978e9b05d290dc89d4b107f9e3dda7936107a59390923092911690611153565b60405180910390a15050565b7f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb1281565b600254600160a01b900460ff16156107ff5760405162461bcd60e51b81526004016102579061106a565b8442111561081f5760405162461bcd60e51b815260040161025790610f1b565b604080518082018252600581526415985d5b1d60da1b6020918201526004549151600092610894927f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866927f8d03f8e727eaf836840d08da04cd9ecc9773328dd38f4a6c7b84a9ec2b88b7c79291309101610d7d565b60405160208183030381529060405280519060200120905060007f019be9374ae64f46b6d65fb010e2366f7f5a3c1e1fd07b8842f388871d59fb12898989896040516020016108e7959493929190610d51565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff161561092f5760405162461bcd60e51b815260040161025790610f52565b6000818152600560209081526040808320805460ff191660011790555161095a918591859101610cd1565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516109979493929190610da1565b6020604051602081039080840390855afa1580156109b9573d6000803e3d6000fd5b5050604051601f1901516000549092506001600160a01b0380841691161490506109f55760405162461bcd60e51b81526004016102579061111c565b60035460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610a27908e908e90600401610d24565b602060405180830381600087803b158015610a4157600080fd5b505af1158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190610c81565b508a6001600160a01b03167f45c072aa05b9853b5a993de7a28bc332ee01404a628cec1a23ce0f659f842ef18b8b8b604051610ab793929190611172565b60405180910390a25050505050505050505050565b6002546001600160a01b031681565b6000546001600160a01b03163314610b055760405162461bcd60e51b815260040161025790610f7f565b600254600160a01b900460ff1615610b2f5760405162461bcd60e51b81526004016102579061106a565b6001600160a01b038116610b555760405162461bcd60e51b815260040161025790611024565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b6003546001600160a01b031681565b600254600160a01b900460ff1681565b6000546001600160a01b031681565b600060208284031215610bbc578081fd5b8135610bc7816111d5565b9392505050565b600060208284031215610bdf578081fd5b8151610bc7816111d5565b60008060408385031215610bfc578081fd5b8235610c07816111d5565b946020939093013593505050565b600080600080600080600060e0888a031215610c2f578283fd5b8735610c3a816111d5565b9650602088013595506040880135945060608801359350608088013560ff81168114610c64578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215610c92578081fd5b81518015158114610bc7578182fd5b600060208284031215610cb2578081fd5b5035919050565b600060208284031215610cca578081fd5b5051919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015610deb57858101830151858201604001528201610dcf565b81811115610dfc5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526036908201527f5661756c742e617070726f76654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b60208082526039908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a2067726160408201527f636544617973206d75737420626520332d333635206461797300000000000000606082015260800190565b60208082526036908201527f5661756c742e657865637574654d6967726174696f6e3a206d6967726174696f6040820152751b951a5b595cdd185b5c081b9bdd081b595d081e595d60521b606082015260800190565b6020808252601e908201527f5661756c742e636c61696d3a207369676e617475726520657870697265640000604082015260600190565b6020808252601390820152725661756c742e636c61696d3a207265706c617960681b604082015260600190565b60208082526036908201527f4d696772617461626c652e5f636f6e74726f6c6c65725f3a2063616e206f6e6c6040820152753c9031b0b63632b210313c9031b7b73a3937b63632b960511b606082015260800190565b6020808252602f908201527f5661756c742e657865637574654d6967726174696f6e3a206e6f74206465737460408201526e696e6174696f6e206164647265737360881b606082015260800190565b60208082526026908201527f4d696772617461626c652e736574436f6e74726f6c6c65723a20746f2030206160408201526564647265737360d01b606082015260800190565b60208082526043908201527f4d696772617461626c652e5f76616c69645f3a2063616e6e6f742070726f636560408201527f65642c207468697320636f6e747261637420686173206265656e206d696772616060820152621d195960ea1b608082015260a00190565b60208082526029908201527f4d696772617461626c652e707265706172654d6967726174696f6e3a20746f2060408201526830206164647265737360b81b606082015260800190565b60208082526019908201527f5661756c742e636c61696d3a20756e617574686f72697a656400000000000000604082015260600190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526020830191909152604082015260600190565b6000821982111561119b5761119b6111bf565b500190565b60008160001904831182151516156111ba576111ba6111bf565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111ea57600080fd5b5056fea2646970667358221220309376e66ca21a54581da8ded1f86303ca0c78bd47254d1bdb5fb101169baa2364736f6c63430008010033\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\r\n/* eslint-enable */\r\n\r\nexport class MiningVaultPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI['abi'],\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async mintDToken(accountAddress, ...args) {\r\n    //return this._transact('claim', args)\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    const gas = await this._estimatedGas(\r\n      'claim',\r\n      [accountAddress, ...args],\r\n      accountAddress\r\n    );\r\n    console.log(gas);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods['claim'](\r\n          accountAddress,\r\n          ...args\r\n        ).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class MiningVaultRouter extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async mint(accountAddress, ...args) {\r\n    //console.log(accountAddress, args)\r\n    const gas = await this._estimatedGas(\r\n      'claim',\r\n      [accountAddress, ...args],\r\n      accountAddress\r\n    );\r\n    //console.log(gas);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods['claim'](\r\n          accountAddress,\r\n          ...args\r\n        ).encodeABI(),\r\n      },\r\n    ];\r\n    //console.log('txRaw', txRaw)\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class SlpPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [152, naturalToDeri(amount)];\r\n    return await this._transact('deposit', args, accountAddress);\r\n  }\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [152, naturalToDeri(amount)];\r\n    return await this._transact('withdraw', args, accountAddress);\r\n  }\r\n  async getLiquidity(accountAddress) {\r\n    const res = await this._call('userInfo', [152, accountAddress]);\r\n    if (res && res.amount) {\r\n      return deriToNatural(res.amount);\r\n    } else {\r\n      console.log('the amount is not exist ');\r\n      return '0';\r\n    }\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class ClpPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [naturalToDeri(amount)];\r\n    return await this._transact('addLiquidity', args, accountAddress);\r\n  }\r\n\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [naturalToDeri(amount)];\r\n    return await this._transact('removeLiquidity', args, accountAddress);\r\n  }\r\n\r\n  async getParameters() {\r\n    const res = await this._call('getParameters');\r\n    return {\r\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\r\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\r\n    };\r\n  }\r\n\r\n  async getStateValues() {\r\n    const res = await this._call('getStateValues');\r\n    return {\r\n      liquidity: deriToNatural(res),\r\n    };\r\n  }\r\n\r\n  async getLiquidity() {\r\n    const res = await this._call('getStateValues');\r\n    if (res && res.liquidity) {\r\n      return deriToNatural(res.liquidity);\r\n    }\r\n    throw new Error(\r\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\r\n    );\r\n  }\r\n}\r\n","import { deriToNatural, MAX_VALUE, bg } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DeriContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\r\n    super(chainId, contractAddress, useProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async isUnlocked(accountAddress) {\r\n    let allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      this.poolAddress,\r\n    ]);\r\n    return deriToNatural(allowance).gt(0);\r\n  }\r\n  async unlock(accountAddress) {\r\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\r\n    return await this._transact(\r\n      'approve',\r\n      [this.poolAddress, MAX_VALUE],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n\r\n  async _balance(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balance(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balance(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n}\r\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class WormholeContract extends Contract {\r\n  constructor(chainId, contractAddress, useProvider) {\r\n    super(chainId, contractAddress, useProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async freeze(accountAddress, amount, toChainId) {\r\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\r\n      toChainId\r\n    );\r\n    return this._transact(\r\n      'freeze',\r\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async mintDeri(\r\n    accountAddress,\r\n    amount,\r\n    fromChainId,\r\n    fromWormhole,\r\n    fromNonce,\r\n    v,\r\n    r,\r\n    s\r\n  ) {\r\n    return this._transact(\r\n      'claim',\r\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\r\n      accountAddress\r\n    );\r\n  }\r\n}\r\n","import { PerpetualPool } from '../contract/perpetual_pool';\r\nimport { BTokenContract } from '../contract/bToken';\r\nimport { PTokenContract } from '../contract/pToken';\r\nimport { LTokenContract } from '../contract/lToken';\r\nimport { DatabaseContract } from '../contract/database';\r\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\r\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\r\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\r\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\r\n\r\nimport { DeriEnv } from '../config/env';\r\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\r\nimport { SlpPool } from '../contract/slp_pool';\r\nimport { ClpPool } from '../contract/clp_pool';\r\nimport { DeriContract } from '../contract/deri';\r\nimport { WormholeContract } from '../contract/wormhole';\r\nimport { getLpContractAddress } from '../utils';\r\n// import { getPoolBaseSymbolList } from '../utils'\r\n\r\nexport const databaseFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const databaseWormholeFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseWormholeContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const databaseAirdropFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    //console.log('---airdrop key', key)\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseAirdropContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const perpetualPoolFactory = (() => {\r\n  const perpetualPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\r\n      return perpetualPoolInstanceMap[key];\r\n    }\r\n    const perpetualPool = new PerpetualPool(\r\n      chainId,\r\n      contractAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new PerpetualPoolContract\");\r\n    perpetualPoolInstanceMap[key] = perpetualPool;\r\n    return perpetualPool;\r\n  };\r\n})();\r\n\r\nexport const bTokenFactory = (function () {\r\n  const bTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\r\n      return bTokenInstanceMap[key];\r\n    }\r\n    const bToken = new BTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new BTokenContract\")\r\n    bTokenInstanceMap[key] = bToken;\r\n    return bToken;\r\n  };\r\n})();\r\n\r\nexport const pTokenFactory = (function () {\r\n  const pTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\r\n      return pTokenInstanceMap[key];\r\n    }\r\n    const pToken = new PTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new PTokenContract\")\r\n    pTokenInstanceMap[key] = pToken;\r\n    return pToken;\r\n  };\r\n})();\r\n\r\nexport const lTokenFactory = (function () {\r\n  const lTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\r\n      return lTokenInstanceMap[key];\r\n    }\r\n    const lToken = new LTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new LTokenContract\")\r\n    lTokenInstanceMap[key] = lToken;\r\n    return lToken;\r\n  };\r\n})();\r\n\r\nexport const miningVaultPoolFactory = (function () {\r\n  const mVaultInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\r\n      return mVaultInstanceMap[key];\r\n    }\r\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\r\n    // console.log(\"new MiningValutPool\")\r\n    mVaultInstanceMap[key] = mVault;\r\n    return mVault;\r\n  };\r\n})();\r\n\r\nexport const slpPoolFactory = (function () {\r\n  const slpPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\r\n      return slpPoolInstanceMap[key];\r\n    }\r\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\r\n    slpPoolInstanceMap[key] = slpPool;\r\n    return slpPool;\r\n  };\r\n})();\r\n\r\nexport const clpPoolFactory = (function () {\r\n  const clpPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\r\n      return clpPoolInstanceMap[key];\r\n    }\r\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\r\n    clpPoolInstanceMap[key] = clpPool;\r\n    return clpPool;\r\n  };\r\n})();\r\n\r\n// export const lpPoolFactory = (function () {\r\n//   const lpPoolInstanceMap = {};\r\n//   return (chainId, contractAddress, isProvider = false) => {\r\n//     let key;\r\n//     if (isProvider) {\r\n//       key = `${chainId}.${contractAddress}.isProvider`;\r\n//     } else {\r\n//       key = `${chainId}.${contractAddress}`;\r\n//     }\r\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\r\n//       return lpPoolInstanceMap[key];\r\n//     } else {\r\n//       let lpPool;\r\n//       const { type } = getLpContractAddress(chainId, contractAddress);\r\n//       console.log(`lp type: ${type}`);\r\n//       if (type === 'slp') {\r\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\r\n//       } else if (type === 'clp') {\r\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\r\n//       }\r\n//       lpPoolInstanceMap[key] = lpPool;\r\n//       return lpPool;\r\n//     }\r\n//   };\r\n// })();\r\n\r\nexport const deriFactory = (function () {\r\n  const deriInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(deriInstanceMap).includes(key)) {\r\n      return deriInstanceMap[key];\r\n    }\r\n    const deri = new DeriContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    deriInstanceMap[key] = deri;\r\n    return deri;\r\n  };\r\n})();\r\n\r\nexport const wormholeFactory = (function () {\r\n  const wormholeInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\r\n      return wormholeInstanceMap[key];\r\n    }\r\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\r\n    wormholeInstanceMap[key] = wormhole;\r\n    return wormhole;\r\n  };\r\n})();\r\n\r\nexport const miningVaultRouterFactory = (function () {\r\n  const mVaultInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\r\n      return mVaultInstanceMap[key];\r\n    }\r\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\r\n    mVaultInstanceMap[key] = mVault;\r\n    return mVault;\r\n  };\r\n})();\r\n","// export const DERI_ENV=\"dev\"\r\nexport const DeriEnv = (() => {\r\n  let _deriEnv = 'dev';\r\n  return {\r\n    get: () => _deriEnv,\r\n    set: (value) => {\r\n      if (value === 'dev' || value === 'prod' || value === 'production') {\r\n        _deriEnv = value;\r\n      } else {\r\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\r\n      }\r\n    },\r\n  };\r\n})();\r\n","\r\n\r\nimport BigNumber from 'bignumber.js'\r\nexport function bg(value, base = 0) {\r\n  if (base == 0) {\r\n    return BigNumber(value);\r\n  } else if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\r\n  } else {\r\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\r\n  }\r\n}\r\n\r\nexport function deriNatural(value) {\r\n  return bg(value, -18);\r\n}\r\n\r\nexport function formatAddress(address){\r\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\r\n}\r\n\r\nexport function formatBalance(balance){\r\n  return balance && (+balance).toFixed(4)\r\n}\r\n\r\nexport function eqInNumber(str1,str2){\r\n  return (+str1) === (+str2)\r\n}\r\n\r\nexport function isSushi(address){\r\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\r\n}"],"sourceRoot":""}