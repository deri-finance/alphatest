{"version":3,"sources":["components/Button/Button.js","utils/DeriNumberFormat.js","components/Pool/PoolBox.js","hooks/useMiningPool.js","mobile/components/Mining/Pool.js"],"names":["Button","btnText","className","disabled","click","afterClick","useState","status","setStatus","pending","setPending","loadRef","useRef","onClick","a","current","style","display","ref","marginRight","DeriNumberFormat","props","renderablity","setRenderablity","useEffect","value","Math","abs","allowZero","displayType","chainConfig","config","DeriEnv","get","inject","observer","wallet","pool","logoClassName","bTokenSymbol","history","useHistory","network","toUpperCase","airdrop","liquidity","thousandSeparator","decimalScale","sushiApy","symbol","title","apy","suffix","target","rel","href","chainId","address","isConnected","res","getUserInfoAllForAirDrop","valid","alert","eqInNumber","detail","mintAirdrop","account","push","type","buttonText","connect","env","chainInfo","useMiningPool","loaded","setLoaded","pools","setPools","configs","getContractAddressConfig","map","getPoolLiquidity","liqPool","getPoolInfoApy","apyPool","Object","assign","name","formatAddress","slpConfig","getLpContractAddressConfig","liqInfo","isSushi","allConfigs","concat","Promise","all","then","length","Pool","index"],"mappings":"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","file":"static/js/11.85cbe656.chunk.js","sourcesContent":["import {useState,useRef} from 'react';\nexport default function Button({btnText,className,disabled,click,afterClick}){\n  const [status, setStatus] = useState(disabled ? 'disabled' : 'enabled');\n  const [pending, setPending] = useState(false);\n  const loadRef = useRef(null)\n\n  const onClick = async () => {\n    if(status !== 'enabled') {\n      return ;\n    }\n    setStatus('disabled')\n    setPending(true);\n    loadRef.current && (loadRef.current.style.display = 'inline-block')\n    const result = await click();    \n    if(result){\n      afterClick && afterClick()\n    } \n    loadRef.current && (loadRef.current.style.display = 'none')\n    setStatus('enabled')\n    setPending(false);\n  }\n\n  return(\n    <button className={className} onClick={onClick} >\n        <span className='btn-loading-wrap'>\n          <span ref={loadRef}\n            className='spinner spinner-border spinner-border-sm'\n            style={{display : 'none' ,marginRight : '2'}}>\n          </span>\n        </span>\n          {pending ? 'PENDING' : btnText  }\n        </button>\n  )\n}","import React,{useState,useEffect} from 'react'\nimport NumberFormat from 'react-number-format'\n\nexport default function DeriNumberFormat(props){\n  const [renderablity, setRenderablity] = useState('--');\n\n  useEffect(() => {\n    if((props.value || ((Math.abs(props.value)) === 0 && props.allowZero === true))) {\n      setRenderablity(<NumberFormat {...props} displayType = 'text' />)\n    } \n    return () => {};\n  }, [props.value]);\n\n  return renderablity;\n}","import {useHistory} from 'react-router-dom'\nimport NumberFormat from 'react-number-format';\nimport config from  '../../config.json'\nimport { DeriEnv, getUserInfoAllForAirDrop, connectWallet, mintAirdrop } from '../../lib/web3js/indexV2';\nimport DeriNumberFormat from '../../utils/DeriNumberFormat';\nimport { inject, observer } from 'mobx-react';\nimport Button from '../Button/Button.js';\nimport { eqInNumber } from '../../utils/utils.js';\n\nconst chainConfig = config[DeriEnv.get()]['chainInfo'];\n\nfunction PoolBox({wallet,pool}){\n  const logoClassName = `logo ${pool.bTokenSymbol}`\n  const history = useHistory();\n\n  const airdrop = () => {\n    const res = getUserInfoAllForAirDrop(pool.pool)\n    if(res){\n      const {chainId,valid} = res;\n      if(!valid){\n        alert('No DERI to claim')\n        return;\n      }\n      if(!eqInNumber(wallet.detail.chainId,chainId)) {\n        alert('Please switch to BSC to claim DERI')\n        return;\n      }\n      mintAirdrop(chainId,wallet.detail.account)\n    }\n  }\n  const mining = () => history.push(`/mining/${pool.chainId}/${pool.type}/${pool.symbol}/${pool.bTokenSymbol}/${pool.address}`)\n  const action = () => {\n    if(pool.airdrop){\n      airdrop();\n    } else {\n      mining();\n    }\n  }\n\n  const connectWallet = () => {\n    wallet.connect()\n  }\n  \n  return(\n    <div className=\"pool\" >\n      <div className=\"pool-header\">\n        <div className=\"network\">\n          {pool.network && pool.network.toUpperCase()}\n        </div>\n      </div>\n      <div className=\"pool-info\">\n        <div className=\"info-center\">\n          <div className=\"top-info\">\n            <div className={logoClassName} ></div>\n            <div className=\"pool-detail\">\n              <div className=\"base-token\">{pool.bTokenSymbol}</div>\n              <div>\n                <span>{pool.airdrop ? 'Total' : 'Pool Liq'}</span>\n                <DeriNumberFormat value={pool.liquidity} displayType='text' thousandSeparator={true} decimalScale={pool.sushiApy ? 7 : 0}/>\n              </div>\n              <div>\n                <span>Symbol</span>\n                {pool.symbol}\n              </div>\n              <div className=\"apy\">\n                <span>APY</span>\n                <span>\n                  <span className={pool.sushiApy ? 'sushi-apy-underline' : ''} title={ pool.sushiApy && 'DERI-APY'}>\n                    {pool.apy ? <DeriNumberFormat value={pool.apy} suffix='%' displayType='text' allowZero={true} decimalScale={2}/> : '--'}                 \n                  </span>\n                  {pool.sushiApy &&<>\n                  <span> + </span>\n                  <span className={pool.sushiApy ? 'sushi-apy-underline' : '' } title={ pool.sushiApy && 'SUSHI-APY'}> <DeriNumberFormat value={pool.sushiApy} displayType='text' suffix='%' decimalScale={2}/></span>\n                  </>}\n                </span>\n                \n              </div>\n              <div className=\"pool-address\">\n                <span>Address</span>\n                {!pool.airdrop ? <a target='_blank' rel='noreferrer' href={`${chainConfig[pool.chainId]['viewUrl']}/address/${pool.address || pool.pool}`}> \n                  {pool.pool}\n                </a> : '--'}\n              </div>\n            </div>\n          </div>\n          <div className=\"bottom-btn\">\n              {!pool.airdrop || wallet.isConnected() ? (<button onClick={action}>\n                {pool.buttonText}\n              </button>) : (<Button btnText='Connect Wallet' click={connectWallet}></Button>)}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default  inject('wallet')(observer(PoolBox))","import {useState,useEffect} from 'react';\nimport {\n  DeriEnv,\n  getContractAddressConfig,\n  getPoolLiquidity,\n  getPoolInfoApy,\n  getLpContractAddressConfig\n} from '../lib/web3js/indexV2'\nimport config from '../config.json'\nimport { formatAddress, isSushi } from '../utils/utils';\n\nconst env = DeriEnv.get();\nconst {chainInfo} = config[env]\n\nexport default function useMiningPool(){\n  const [loaded,setLoaded] = useState(false)\n  const [pools, setPools] = useState([])\n\n\n  useEffect(() => {\n    const configs = getContractAddressConfig(env).map(async config =>  {\n      const liqPool = await getPoolLiquidity(config.chainId,config.pool) || {}\n      const apyPool = await getPoolInfoApy(config.chainId,config.pool) || {}\n      const pool = config.pool || ''\n      return Object.assign(config,{ \n        network : chainInfo[config.chainId].name,\n        liquidity : liqPool.liquidity,\n        apy :  (+apyPool.apy) * 100,\n        pool : formatAddress(pool),\n        address : pool,\n        type : 'perpetual',\n        buttonText : 'STAKING'        \n      })\n    })\n    const slpConfig = getLpContractAddressConfig(env).map(async config => {\n      const liqInfo = await getPoolLiquidity(config.chainId,config.pool) || {}\n      const apyPool = await getPoolInfoApy(config.chainId,config.pool) || {} \n      const pool = config.pool || ''      \n      let sushiApy ;\n      if(isSushi(config.pool)){\n        sushiApy =  0.22008070161007/liqInfo.liquidity * 100;           \n      }\n      return Object.assign(config,{\n        network : chainInfo[config.chainId].name,\n        liquidity : liqInfo.liquidity,\n        apy : (+apyPool.apy) * 100,\n        pool : formatAddress(pool),\n        sushiApy : sushiApy,\n        address : pool,\n        type : 'lp',\n        buttonText : 'STAKING'\n      })    \n    })\n    const allConfigs = configs.concat(slpConfig)\n    Promise.all(allConfigs).then(pools => {\n      const airDrop = {\n        network : 'BSC',\n        bTokenSymbol : 'GIVEAWAY',\n        liquidity : '12800',\n        symbol : '--',\n        airdrop : true,\n        buttonText : 'CLAIM'\n      }\n      pools.push(airDrop)\n      setPools(pools);\n      setLoaded(true)\n    })\n    return () => pools.length = 0\n  })\n  return [loaded,pools];\n}","import React from 'react'\nimport './pool.less'\nimport PoolBox from '../../../components/Pool/PoolBox';\nimport useMiningPool from '../../../hooks/useMiningPool';\n\n\nexport default function Pool(){\n  const [loaded,pools] = useMiningPool();\n\n  return (\n    <div className=\"mining-info\">\n      <div className=\"pools\">\n        {pools.map((pool,index) => <PoolBox pool={pool} key={index}/>)}\n        {!loaded && <div className=\"loading\">\n          <span\n            className=\"spinner spinner-border spinner-border-sm\">\n            </span>\n          </div>}  \n      </div>\n    </div>\n  )\n}"],"sourceRoot":""}