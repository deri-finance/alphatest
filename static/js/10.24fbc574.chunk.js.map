{"version":3,"sources":["utils/DeriNumberFormat.js","components/Pool/PoolBox.js","hooks/useMiningPool.js","hooks/useSlpMiningPool.js","desktop/components/Mining/Pool.js"],"names":["DeriNumberFormat","props","useState","renderablity","setRenderablity","useEffect","value","Math","abs","allowZero","displayType","chainConfig","config","DeriEnv","get","PoolBox","pool","logoClassName","bTokenSymbol","history","useHistory","className","network","toUpperCase","liquidity","thousandSeparator","decimalScale","symbol","apy","suffix","sushiApy","target","rel","href","chainId","address","onClick","push","env","chainInfo","useMiningPool","loaded","setLoaded","pools","setPools","configs","getContractAddressConfig","map","a","getPoolLiquidity","liqPool","getPoolInfoApy","apyPool","Object","assign","name","formatBalance","formatAddress","Promise","all","then","length","useSlpMiningPool","slpPools","setSlpPools","slpConfig","getSlpContractAddressConfig","getSlpPoolInfoApy","toFixed","deriapy","deriNatural","Pool","concat","index"],"mappings":"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","file":"static/js/10.24fbc574.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport NumberFormat from 'react-number-format'\n\nexport default function DeriNumberFormat(props){\n  const [renderablity, setRenderablity] = useState('--');\n\n  useEffect(() => {\n    if((props.value || ((Math.abs(props.value)) === 0 && props.allowZero === true))) {\n      setRenderablity(<NumberFormat {...props} displayType = 'text' />)\n    } \n    return () => {};\n  }, [props.value]);\n\n  return renderablity;\n}","import {useHistory} from 'react-router-dom'\nimport NumberFormat from 'react-number-format';\nimport config from  '../../config.json'\nimport { DeriEnv } from '../../lib/web3js/indexV2';\nimport DeriNumberFormat from '../../utils/DeriNumberFormat';\n\nconst chainConfig = config[DeriEnv.get()]['chainInfo'];\n\nexport default function PoolBox({pool}){\n  const logoClassName = `logo ${pool.bTokenSymbol}`\n  const history = useHistory();\n  const mining = () => history.push(`/mining/${pool.chainId}/${pool.symbol}/${pool.bTokenSymbol}/${pool.address}`)\n  \n  return(\n    <div className=\"pool\" >\n      <div className=\"pool-header\">\n        <div className=\"network\">\n          {pool.network && pool.network.toUpperCase()}\n        </div>\n      </div>\n      <div className=\"pool-info\">\n        <div className=\"info-center\">\n          <div className=\"top-info\">\n            <div className={logoClassName} ></div>\n            <div className=\"pool-detail\">\n              <div className=\"base-token\">{pool.bTokenSymbol}</div>\n              <div>\n                <span>Pool Liq</span>\n                <DeriNumberFormat value={pool.liquidity} displayType='text' thousandSeparator={true} decimalScale={0}/>\n              </div>\n              <div>\n                <span>Symbol</span>\n                {pool.symbol}\n              </div>\n              <div className=\"apy\">\n                <span>APY</span>\n                <span>\n                  <span>\n                    <DeriNumberFormat value={pool.apy} suffix='%' displayType='text' allowZero={true} decimalScale={2}/>                  \n                  </span>\n                  {pool.sushiApy &&<>\n                  <span>+</span>\n                  <span > <DeriNumberFormat value={pool.sushiApy} displayType='text' suffix='%' decimalScale={2}/></span>\n                  </>}\n                </span>\n                \n              </div>\n              <div className=\"pool-address\">\n                <span>Address</span>\n                <a target='_blank' rel='noreferrer' href={`${chainConfig[pool.chainId]['viewUrl']}/address/${pool.address || pool.pool}`}>\n                  {pool.pool}\n                </a>\n              </div>\n            </div>\n          </div>\n          <div className=\"bottom-btn\">\n              <button onClick={mining}>\n                STAKING\n              </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import {useState,useEffect} from 'react';\nimport {\n  DeriEnv,\n  getContractAddressConfig,\n  getPoolLiquidity,\n  getPoolInfoApy,\n} from '../lib/web3js/indexV2'\nimport config from '../config.json'\nimport { formatAddress, formatBalance } from '../utils/utils';\n\nconst env = DeriEnv.get();\nconst {chainInfo} = config[env]\n\nexport default function useMiningPool(){\n  const [loaded,setLoaded] = useState(false)\n  const [pools, setPools] = useState([])\n\n\n  useEffect(() => {\n    const configs = getContractAddressConfig(env).map(async config =>  {\n      const liqPool = await getPoolLiquidity(config.chainId,config.pool) || {}\n      const apyPool = await getPoolInfoApy(config.chainId,config.bTokenSymbol) || {}\n      const pool = config.pool || ''\n      return Object.assign(config,{ \n        network : chainInfo[config.chainId].name,\n        liquidity : formatBalance(liqPool.liquidity),\n        apy : apyPool.apy,\n        pool : formatAddress(pool),\n        address : pool\n      })\n    })\n    Promise.all(configs).then(pools => {\n      setPools(pools);\n      setLoaded(true)\n    })\n    return () => pools.length = 0\n  })\n  return [loaded,pools];\n}","import {useState,useEffect} from 'react';\n\nimport {\n  getPoolLiquidity,\n  getSlpContractAddressConfig,\n  getSlpPoolInfoApy,\n  DeriEnv\n} from '../lib/web3js/indexV2'\nimport { deriNatural} from '../utils/utils';\n\nconst env = DeriEnv.get();\n\nexport default function useSlpMiningPool(){\n  const [slpPools, setSlpPools] = useState([])\n\n  useEffect(() => {\n    const slpConfig = getSlpContractAddressConfig(env).map(async config => {\n      const liqPool = await getPoolLiquidity(config.chainId,config.pool);\n      const apyPool = await getSlpPoolInfoApy(config.chainId,config.pool)\n      let sushiApy =  0.22008070161007/liqPool.liquidity;\n      sushiApy = (sushiApy * 100).toFixed(2) + \"%\";\n      let deriapy = deriNatural(apyPool.apy)\n      if (deriapy == \"0\") {\n        deriapy = \"--\";\n      } else {\n        deriapy = (deriapy * 100).toFixed(2) + \"%\";\n      }\n      return Object.assign(config,{\n        deriapy,\n        sushiApy,\n        bTokenSymbol : 'DERI-USDT SLP'\n      })\n    })\n    Promise.all(slpConfig).then(pools => {\n      setSlpPools(pools)\n    })\n    return () => {\n      slpPools.length = 0\n    }\n  },[])\n\n  return slpPools;\n}","import PoolBox from '../../../components/Pool/PoolBox';\nimport useMiningPool from '../../../hooks/useMiningPool';\nimport useSlpMiningPool from '../../../hooks/useSlpMiningPool';\nimport './pool.less'\n\n\nexport default function Pool(){\n  const [loaded,pools] = useMiningPool();\n  const slpPools = useSlpMiningPool()  \n  const all = pools.concat(slpPools)\n  return (\n    <div className=\"mining-info\">\n      <div className=\"pools\">\n        {all.map((pool,index) => <PoolBox pool={pool} key={index}/>)}\n        {!loaded && <div className=\"loading\">\n          <span\n            className=\"spinner spinner-border spinner-border-sm\">\n            </span>\n          </div>}  \n      </div>\n    </div>\n  )\n}"],"sourceRoot":""}